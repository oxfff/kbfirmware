   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB103:
  15               		.file 1 "../../../../tmk_core/common/action.c"
   1:../../../../tmk_core/common/action.c **** /*
   2:../../../../tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../../../tmk_core/common/action.c **** 
   4:../../../../tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../../../tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../../../tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../../../tmk_core/common/action.c **** (at your option) any later version.
   8:../../../../tmk_core/common/action.c **** 
   9:../../../../tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../../../tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../../../tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../../../tmk_core/common/action.c **** GNU General Public License for more details.
  13:../../../../tmk_core/common/action.c **** 
  14:../../../../tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:../../../../tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../../../tmk_core/common/action.c **** */
  17:../../../../tmk_core/common/action.c **** #include "host.h"
  18:../../../../tmk_core/common/action.c **** #include "keycode.h"
  19:../../../../tmk_core/common/action.c **** #include "keyboard.h"
  20:../../../../tmk_core/common/action.c **** #include "mousekey.h"
  21:../../../../tmk_core/common/action.c **** #include "command.h"
  22:../../../../tmk_core/common/action.c **** #include "led.h"
  23:../../../../tmk_core/common/action.c **** #include "backlight.h"
  24:../../../../tmk_core/common/action.c **** #include "action_layer.h"
  25:../../../../tmk_core/common/action.c **** #include "action_tapping.h"
  26:../../../../tmk_core/common/action.c **** #include "action_macro.h"
  27:../../../../tmk_core/common/action.c **** #include "action_util.h"
  28:../../../../tmk_core/common/action.c **** #include "action.h"
  29:../../../../tmk_core/common/action.c **** 
  30:../../../../tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:../../../../tmk_core/common/action.c **** #include "debug.h"
  32:../../../../tmk_core/common/action.c **** #else
  33:../../../../tmk_core/common/action.c **** #include "nodebug.h"
  34:../../../../tmk_core/common/action.c **** #endif
  35:../../../../tmk_core/common/action.c **** 
  36:../../../../tmk_core/common/action.c **** 
  37:../../../../tmk_core/common/action.c **** void action_exec(keyevent_t event)
  38:../../../../tmk_core/common/action.c **** {
  16               		.loc 1 38 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  39:../../../../tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  40:../../../../tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:../../../../tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:../../../../tmk_core/common/action.c ****     }
  43:../../../../tmk_core/common/action.c **** 
  44:../../../../tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  48               		.loc 1 44 0
  49 001e DE01      		movw r26,r28
  50 0020 1196      		adiw r26,1
  51 0022 86E0      		ldi r24,lo8(6)
  52 0024 FD01      		movw r30,r26
  53               		0:
  54 0026 1192      		st Z+,__zero_reg__
  55 0028 8A95      		dec r24
  56 002a 01F4      		brne 0b
  57 002c 85E0      		ldi r24,lo8(5)
  58 002e FE01      		movw r30,r28
  59 0030 3796      		adiw r30,7
  60               		0:
  61 0032 0190      		ld r0,Z+
  62 0034 0D92      		st X+,r0
  63 0036 8A95      		dec r24
  64 0038 01F4      		brne 0b
  45:../../../../tmk_core/common/action.c **** 
  46:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  47:../../../../tmk_core/common/action.c ****     action_tapping_process(record);
  65               		.loc 1 47 0
  66 003a 4981      		ldd r20,Y+1
  67               	.LVL1:
  68 003c 5A81      		ldd r21,Y+2
  69               	.LVL2:
  70 003e 6B81      		ldd r22,Y+3
  71 0040 7C81      		ldd r23,Y+4
  72 0042 8D81      		ldd r24,Y+5
  73 0044 9E81      		ldd r25,Y+6
  74 0046 0E94 0000 		call action_tapping_process
  75               	.LVL3:
  76               	/* epilogue start */
  48:../../../../tmk_core/common/action.c **** #else
  49:../../../../tmk_core/common/action.c ****     process_record(&record);
  50:../../../../tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  51:../../../../tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  52:../../../../tmk_core/common/action.c ****     }
  53:../../../../tmk_core/common/action.c **** #endif
  54:../../../../tmk_core/common/action.c **** }
  77               		.loc 1 54 0
  78 004a 2B96      		adiw r28,11
  79 004c 0FB6      		in __tmp_reg__,__SREG__
  80 004e F894      		cli
  81 0050 DEBF      		out __SP_H__,r29
  82 0052 0FBE      		out __SREG__,__tmp_reg__
  83 0054 CDBF      		out __SP_L__,r28
  84 0056 DF91      		pop r29
  85 0058 CF91      		pop r28
  86 005a 0895      		ret
  87               		.cfi_endproc
  88               	.LFE103:
  90               		.section	.text.process_record_quantum,"ax",@progbits
  91               		.weak	process_record_quantum
  93               	process_record_quantum:
  94               	.LFB105:
  55:../../../../tmk_core/common/action.c **** 
  56:../../../../tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  57:../../../../tmk_core/common/action.c **** bool disable_action_cache = false;
  58:../../../../tmk_core/common/action.c **** 
  59:../../../../tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  60:../../../../tmk_core/common/action.c **** {
  61:../../../../tmk_core/common/action.c ****     disable_action_cache = true;
  62:../../../../tmk_core/common/action.c ****     process_record(record);
  63:../../../../tmk_core/common/action.c ****     disable_action_cache = false;
  64:../../../../tmk_core/common/action.c **** }
  65:../../../../tmk_core/common/action.c **** #else
  66:../../../../tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  67:../../../../tmk_core/common/action.c **** {
  68:../../../../tmk_core/common/action.c ****     process_record(record);
  69:../../../../tmk_core/common/action.c **** }
  70:../../../../tmk_core/common/action.c **** #endif
  71:../../../../tmk_core/common/action.c **** 
  72:../../../../tmk_core/common/action.c **** __attribute__ ((weak))
  73:../../../../tmk_core/common/action.c **** bool process_record_quantum(keyrecord_t *record) {
  95               		.loc 1 73 0
  96               		.cfi_startproc
  97               	.LVL4:
  98               	/* prologue: function */
  99               	/* frame size = 0 */
 100               	/* stack size = 0 */
 101               	.L__stack_usage = 0
  74:../../../../tmk_core/common/action.c ****     return true;
  75:../../../../tmk_core/common/action.c **** }
 102               		.loc 1 75 0
 103 0000 81E0      		ldi r24,lo8(1)
 104               	.LVL5:
 105 0002 0895      		ret
 106               		.cfi_endproc
 107               	.LFE105:
 109               		.section	.text.register_code,"ax",@progbits
 110               	.global	register_code
 112               	register_code:
 113               	.LFB108:
  76:../../../../tmk_core/common/action.c **** 
  77:../../../../tmk_core/common/action.c **** void process_record(keyrecord_t *record) 
  78:../../../../tmk_core/common/action.c **** {
  79:../../../../tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
  80:../../../../tmk_core/common/action.c **** 
  81:../../../../tmk_core/common/action.c ****     if(!process_record_quantum(record))
  82:../../../../tmk_core/common/action.c ****         return;
  83:../../../../tmk_core/common/action.c **** 
  84:../../../../tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
  85:../../../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
  86:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
  87:../../../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
  88:../../../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  89:../../../../tmk_core/common/action.c **** #endif
  90:../../../../tmk_core/common/action.c ****     dprintln();
  91:../../../../tmk_core/common/action.c **** 
  92:../../../../tmk_core/common/action.c ****     process_action(record, action);
  93:../../../../tmk_core/common/action.c **** }
  94:../../../../tmk_core/common/action.c **** 
  95:../../../../tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action)
  96:../../../../tmk_core/common/action.c **** {
  97:../../../../tmk_core/common/action.c ****     bool do_release_oneshot = false;
  98:../../../../tmk_core/common/action.c ****     keyevent_t event = record->event;
  99:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 100:../../../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 101:../../../../tmk_core/common/action.c **** #endif
 102:../../../../tmk_core/common/action.c **** 
 103:../../../../tmk_core/common/action.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 104:../../../../tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
 105:../../../../tmk_core/common/action.c ****         dprintf("Oneshot layer: timeout\n");
 106:../../../../tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 107:../../../../tmk_core/common/action.c ****     }
 108:../../../../tmk_core/common/action.c **** #endif
 109:../../../../tmk_core/common/action.c **** 
 110:../../../../tmk_core/common/action.c ****     if (event.pressed) {
 111:../../../../tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 112:../../../../tmk_core/common/action.c ****         clear_weak_mods();
 113:../../../../tmk_core/common/action.c ****     }
 114:../../../../tmk_core/common/action.c **** 
 115:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 116:../../../../tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 117:../../../../tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 118:../../../../tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 119:../../../../tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 120:../../../../tmk_core/common/action.c ****     }
 121:../../../../tmk_core/common/action.c **** #endif
 122:../../../../tmk_core/common/action.c **** 
 123:../../../../tmk_core/common/action.c ****     switch (action.kind.id) {
 124:../../../../tmk_core/common/action.c ****         /* Key and Mods */
 125:../../../../tmk_core/common/action.c ****         case ACT_LMODS:
 126:../../../../tmk_core/common/action.c ****         case ACT_RMODS:
 127:../../../../tmk_core/common/action.c ****             {
 128:../../../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 129:../../../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 130:../../../../tmk_core/common/action.c ****                 if (event.pressed) {
 131:../../../../tmk_core/common/action.c ****                     if (mods) {
 132:../../../../tmk_core/common/action.c ****                         if (IS_MOD(action.key.code)) {
 133:../../../../tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 134:../../../../tmk_core/common/action.c ****                             // this also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSF
 135:../../../../tmk_core/common/action.c ****                             add_mods(mods);
 136:../../../../tmk_core/common/action.c ****                         } else {
 137:../../../../tmk_core/common/action.c ****                             add_weak_mods(mods);
 138:../../../../tmk_core/common/action.c ****                         }
 139:../../../../tmk_core/common/action.c ****                         send_keyboard_report();
 140:../../../../tmk_core/common/action.c ****                     }
 141:../../../../tmk_core/common/action.c ****                     register_code(action.key.code);
 142:../../../../tmk_core/common/action.c ****                 } else {
 143:../../../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
 144:../../../../tmk_core/common/action.c ****                     if (mods) {
 145:../../../../tmk_core/common/action.c ****                         if (IS_MOD(action.key.code)) {
 146:../../../../tmk_core/common/action.c ****                             del_mods(mods);
 147:../../../../tmk_core/common/action.c ****                         } else {
 148:../../../../tmk_core/common/action.c ****                             del_weak_mods(mods);
 149:../../../../tmk_core/common/action.c ****                         }
 150:../../../../tmk_core/common/action.c ****                         send_keyboard_report();
 151:../../../../tmk_core/common/action.c ****                     }
 152:../../../../tmk_core/common/action.c ****                 }
 153:../../../../tmk_core/common/action.c ****             }
 154:../../../../tmk_core/common/action.c ****             break;
 155:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 156:../../../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 157:../../../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 158:../../../../tmk_core/common/action.c ****             {
 159:../../../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 160:../../../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 161:../../../../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 162:../../../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 163:../../../../tmk_core/common/action.c ****                     case MODS_ONESHOT:
 164:../../../../tmk_core/common/action.c ****                         // Oneshot modifier
 165:../../../../tmk_core/common/action.c ****                         if (event.pressed) {
 166:../../../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 167:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 168:../../../../tmk_core/common/action.c ****                                 register_mods(mods);
 169:../../../../tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 170:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 171:../../../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 172:../../../../tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 173:../../../../tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 174:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Toggling oneshot");
 175:../../../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 176:../../../../tmk_core/common/action.c ****                                 set_oneshot_locked_mods(mods);
 177:../../../../tmk_core/common/action.c ****                                 register_mods(mods);
 178:../../../../tmk_core/common/action.c ****                     #endif
 179:../../../../tmk_core/common/action.c ****                             } else {
 180:../../../../tmk_core/common/action.c ****                                 register_mods(mods);
 181:../../../../tmk_core/common/action.c ****                             }
 182:../../../../tmk_core/common/action.c ****                         } else {
 183:../../../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 184:../../../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 185:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 186:../../../../tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 187:../../../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 188:../../../../tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 189:../../../../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 190:../../../../tmk_core/common/action.c ****                                     clear_oneshot_locked_mods();
 191:../../../../tmk_core/common/action.c ****                                     clear_oneshot_mods();
 192:../../../../tmk_core/common/action.c ****                                     unregister_mods(mods);
 193:../../../../tmk_core/common/action.c ****                                 }
 194:../../../../tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 195:../../../../tmk_core/common/action.c ****                                 // Toggle Oneshot Layer
 196:../../../../tmk_core/common/action.c ****                     #endif
 197:../../../../tmk_core/common/action.c ****                             } else {
 198:../../../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 199:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 200:../../../../tmk_core/common/action.c ****                             }
 201:../../../../tmk_core/common/action.c ****                         }
 202:../../../../tmk_core/common/action.c ****                         break;
 203:../../../../tmk_core/common/action.c ****     #endif
 204:../../../../tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 205:../../../../tmk_core/common/action.c ****                         if (event.pressed) {
 206:../../../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 207:../../../../tmk_core/common/action.c ****                                 register_mods(mods);
 208:../../../../tmk_core/common/action.c ****                             }
 209:../../../../tmk_core/common/action.c ****                         } else {
 210:../../../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 211:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 212:../../../../tmk_core/common/action.c ****                             }
 213:../../../../tmk_core/common/action.c ****                         }
 214:../../../../tmk_core/common/action.c ****                         break;
 215:../../../../tmk_core/common/action.c ****                     default:
 216:../../../../tmk_core/common/action.c ****                         if (event.pressed) {
 217:../../../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 218:../../../../tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 219:../../../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 220:../../../../tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 221:../../../../tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 222:../../../../tmk_core/common/action.c ****                                     record->tap.count = 0;
 223:../../../../tmk_core/common/action.c ****                                     register_mods(mods);
 224:../../../../tmk_core/common/action.c ****                                 } else
 225:../../../../tmk_core/common/action.c **** #endif
 226:../../../../tmk_core/common/action.c ****                                 {
 227:../../../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 228:../../../../tmk_core/common/action.c ****                                     register_code(action.key.code);
 229:../../../../tmk_core/common/action.c ****                                 }
 230:../../../../tmk_core/common/action.c ****                             } else {
 231:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 232:../../../../tmk_core/common/action.c ****                                 register_mods(mods);
 233:../../../../tmk_core/common/action.c ****                             }
 234:../../../../tmk_core/common/action.c ****                         } else {
 235:../../../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 236:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 237:../../../../tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 238:../../../../tmk_core/common/action.c ****                             } else {
 239:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 240:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 241:../../../../tmk_core/common/action.c ****                             }
 242:../../../../tmk_core/common/action.c ****                         }
 243:../../../../tmk_core/common/action.c ****                         break;
 244:../../../../tmk_core/common/action.c ****                 }
 245:../../../../tmk_core/common/action.c ****             }
 246:../../../../tmk_core/common/action.c ****             break;
 247:../../../../tmk_core/common/action.c **** #endif
 248:../../../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 249:../../../../tmk_core/common/action.c ****         /* other HID usage */
 250:../../../../tmk_core/common/action.c ****         case ACT_USAGE:
 251:../../../../tmk_core/common/action.c ****             switch (action.usage.page) {
 252:../../../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 253:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 254:../../../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 255:../../../../tmk_core/common/action.c ****                     } else {
 256:../../../../tmk_core/common/action.c ****                         host_system_send(0);
 257:../../../../tmk_core/common/action.c ****                     }
 258:../../../../tmk_core/common/action.c ****                     break;
 259:../../../../tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 260:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 261:../../../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 262:../../../../tmk_core/common/action.c ****                     } else {
 263:../../../../tmk_core/common/action.c ****                         host_consumer_send(0);
 264:../../../../tmk_core/common/action.c ****                     }
 265:../../../../tmk_core/common/action.c ****                     break;
 266:../../../../tmk_core/common/action.c ****             }
 267:../../../../tmk_core/common/action.c ****             break;
 268:../../../../tmk_core/common/action.c **** #endif
 269:../../../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 270:../../../../tmk_core/common/action.c ****         /* Mouse key */
 271:../../../../tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 272:../../../../tmk_core/common/action.c ****             if (event.pressed) {
 273:../../../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 274:../../../../tmk_core/common/action.c ****                 mousekey_send();
 275:../../../../tmk_core/common/action.c ****             } else {
 276:../../../../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 277:../../../../tmk_core/common/action.c ****                 mousekey_send();
 278:../../../../tmk_core/common/action.c ****             }
 279:../../../../tmk_core/common/action.c ****             break;
 280:../../../../tmk_core/common/action.c **** #endif
 281:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 282:../../../../tmk_core/common/action.c ****         case ACT_LAYER:
 283:../../../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 284:../../../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 285:../../../../tmk_core/common/action.c ****                 if (!event.pressed) {
 286:../../../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 287:../../../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 288:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 289:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 290:../../../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 291:../../../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 292:../../../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 293:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 294:../../../../tmk_core/common/action.c ****                     }
 295:../../../../tmk_core/common/action.c ****                 }
 296:../../../../tmk_core/common/action.c ****             } else {
 297:../../../../tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 298:../../../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 299:../../../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 300:../../../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 301:../../../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 302:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 303:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 304:../../../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 305:../../../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 306:../../../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 307:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 308:../../../../tmk_core/common/action.c ****                     }
 309:../../../../tmk_core/common/action.c ****                 }
 310:../../../../tmk_core/common/action.c ****             }
 311:../../../../tmk_core/common/action.c ****             break;
 312:../../../../tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 313:../../../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 314:../../../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 315:../../../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 316:../../../../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 317:../../../../tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 318:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 319:../../../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 320:../../../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 321:../../../../tmk_core/common/action.c ****                     } else {
 322:../../../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 323:../../../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 324:../../../../tmk_core/common/action.c ****                     }
 325:../../../../tmk_core/common/action.c ****                     break;
 326:../../../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 327:../../../../tmk_core/common/action.c ****                     /* tap toggle */
 328:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 329:../../../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 330:../../../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 331:../../../../tmk_core/common/action.c ****                         }
 332:../../../../tmk_core/common/action.c ****                     } else {
 333:../../../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 334:../../../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 335:../../../../tmk_core/common/action.c ****                         }
 336:../../../../tmk_core/common/action.c ****                     }
 337:../../../../tmk_core/common/action.c ****                     break;
 338:../../../../tmk_core/common/action.c ****                 case OP_ON_OFF:
 339:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 340:../../../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 341:../../../../tmk_core/common/action.c ****                     break;
 342:../../../../tmk_core/common/action.c ****                 case OP_OFF_ON:
 343:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 344:../../../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 345:../../../../tmk_core/common/action.c ****                     break;
 346:../../../../tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 347:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 348:../../../../tmk_core/common/action.c ****                                     layer_clear();
 349:../../../../tmk_core/common/action.c ****                     break;
 350:../../../../tmk_core/common/action.c ****             #ifndef NO_ACTION_ONESHOT
 351:../../../../tmk_core/common/action.c ****                 case OP_ONESHOT:
 352:../../../../tmk_core/common/action.c ****                     // Oneshot modifier
 353:../../../../tmk_core/common/action.c ****                 #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 354:../../../../tmk_core/common/action.c ****                     do_release_oneshot = false;
 355:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 356:../../../../tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 357:../../../../tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 358:../../../../tmk_core/common/action.c ****                             reset_oneshot_layer();
 359:../../../../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 360:../../../../tmk_core/common/action.c ****                             break;
 361:../../../../tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 362:../../../../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 363:../../../../tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 364:../../../../tmk_core/common/action.c ****                         }
 365:../../../../tmk_core/common/action.c ****                     } else {
 366:../../../../tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 367:../../../../tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 368:../../../../tmk_core/common/action.c ****                             reset_oneshot_layer();
 369:../../../../tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 370:../../../../tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 371:../../../../tmk_core/common/action.c ****                         } else {
 372:../../../../tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 373:../../../../tmk_core/common/action.c ****                         }
 374:../../../../tmk_core/common/action.c ****                     }
 375:../../../../tmk_core/common/action.c ****                 #else
 376:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 377:../../../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 378:../../../../tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 379:../../../../tmk_core/common/action.c ****                     } else {
 380:../../../../tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 381:../../../../tmk_core/common/action.c ****                         if (tap_count > 1) {
 382:../../../../tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 383:../../../../tmk_core/common/action.c ****                         }
 384:../../../../tmk_core/common/action.c ****                     }
 385:../../../../tmk_core/common/action.c ****                 #endif
 386:../../../../tmk_core/common/action.c ****                     break;
 387:../../../../tmk_core/common/action.c ****             #endif
 388:../../../../tmk_core/common/action.c ****                 default:
 389:../../../../tmk_core/common/action.c ****                     /* tap key */
 390:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 391:../../../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 392:../../../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 393:../../../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 394:../../../../tmk_core/common/action.c ****                         } else {
 395:../../../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 396:../../../../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 397:../../../../tmk_core/common/action.c ****                         }
 398:../../../../tmk_core/common/action.c ****                     } else {
 399:../../../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 400:../../../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 401:../../../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 402:../../../../tmk_core/common/action.c ****                         } else {
 403:../../../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 404:../../../../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 405:../../../../tmk_core/common/action.c ****                         }
 406:../../../../tmk_core/common/action.c ****                     }
 407:../../../../tmk_core/common/action.c ****                     break;
 408:../../../../tmk_core/common/action.c ****             }
 409:../../../../tmk_core/common/action.c ****             break;
 410:../../../../tmk_core/common/action.c ****     #endif
 411:../../../../tmk_core/common/action.c **** #endif
 412:../../../../tmk_core/common/action.c ****         /* Extentions */
 413:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 414:../../../../tmk_core/common/action.c ****         case ACT_MACRO:
 415:../../../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 416:../../../../tmk_core/common/action.c ****             break;
 417:../../../../tmk_core/common/action.c **** #endif
 418:../../../../tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 419:../../../../tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 420:../../../../tmk_core/common/action.c ****             if (!event.pressed) {
 421:../../../../tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 422:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 423:../../../../tmk_core/common/action.c ****                         backlight_increase();
 424:../../../../tmk_core/common/action.c ****                         break;
 425:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 426:../../../../tmk_core/common/action.c ****                         backlight_decrease();
 427:../../../../tmk_core/common/action.c ****                         break;
 428:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 429:../../../../tmk_core/common/action.c ****                         backlight_toggle();
 430:../../../../tmk_core/common/action.c ****                         break;
 431:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 432:../../../../tmk_core/common/action.c ****                         backlight_step();
 433:../../../../tmk_core/common/action.c ****                         break;
 434:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 435:../../../../tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 436:../../../../tmk_core/common/action.c ****                         break;
 437:../../../../tmk_core/common/action.c ****                 }
 438:../../../../tmk_core/common/action.c ****             }
 439:../../../../tmk_core/common/action.c ****             break;
 440:../../../../tmk_core/common/action.c **** #endif
 441:../../../../tmk_core/common/action.c ****         case ACT_COMMAND:
 442:../../../../tmk_core/common/action.c ****             break;
 443:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 444:../../../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 445:../../../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 446:../../../../tmk_core/common/action.c ****             break;
 447:../../../../tmk_core/common/action.c **** #endif
 448:../../../../tmk_core/common/action.c ****         default:
 449:../../../../tmk_core/common/action.c ****             break;
 450:../../../../tmk_core/common/action.c ****     }
 451:../../../../tmk_core/common/action.c **** 
 452:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 453:../../../../tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 454:../../../../tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 455:../../../../tmk_core/common/action.c ****      */
 456:../../../../tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 457:../../../../tmk_core/common/action.c ****         record->event.pressed = false;
 458:../../../../tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 459:../../../../tmk_core/common/action.c ****         process_record(record);
 460:../../../../tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 461:../../../../tmk_core/common/action.c ****     }
 462:../../../../tmk_core/common/action.c **** #endif
 463:../../../../tmk_core/common/action.c **** }
 464:../../../../tmk_core/common/action.c **** 
 465:../../../../tmk_core/common/action.c **** 
 466:../../../../tmk_core/common/action.c **** 
 467:../../../../tmk_core/common/action.c **** 
 468:../../../../tmk_core/common/action.c **** /*
 469:../../../../tmk_core/common/action.c ****  * Utilities for actions.
 470:../../../../tmk_core/common/action.c ****  */
 471:../../../../tmk_core/common/action.c **** void register_code(uint8_t code)
 472:../../../../tmk_core/common/action.c **** {
 114               		.loc 1 472 0
 115               		.cfi_startproc
 116               	.LVL6:
 117 0000 CF93      		push r28
 118               	.LCFI4:
 119               		.cfi_def_cfa_offset 3
 120               		.cfi_offset 28, -2
 121               	/* prologue: function */
 122               	/* frame size = 0 */
 123               	/* stack size = 1 */
 124               	.L__stack_usage = 1
 473:../../../../tmk_core/common/action.c ****     if (code == KC_NO) {
 125               		.loc 1 473 0
 126 0002 8823      		tst r24
 127 0004 01F4      		brne .+2
 128 0006 00C0      		rjmp .L3
 129 0008 C82F      		mov r28,r24
 474:../../../../tmk_core/common/action.c ****         return;
 475:../../../../tmk_core/common/action.c ****     }
 476:../../../../tmk_core/common/action.c **** 
 477:../../../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 478:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 130               		.loc 1 478 0
 131 000a 8238      		cpi r24,lo8(-126)
 132 000c 01F4      		brne .L6
 479:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 480:../../../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 481:../../../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 133               		.loc 1 481 0
 134 000e 0E94 0000 		call host_keyboard_leds
 135               	.LVL7:
 136 0012 81FD      		sbrc r24,1
 137 0014 00C0      		rjmp .L3
 482:../../../../tmk_core/common/action.c **** #endif
 483:../../../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 138               		.loc 1 483 0
 139 0016 89E3      		ldi r24,lo8(57)
 140 0018 0E94 0000 		call add_key
 141               	.LVL8:
 484:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 142               		.loc 1 484 0
 143 001c 0E94 0000 		call send_keyboard_report
 144               	.LVL9:
 485:../../../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 145               		.loc 1 485 0
 146 0020 89E3      		ldi r24,lo8(57)
 147 0022 00C0      		rjmp .L38
 148               	.LVL10:
 149               	.L6:
 486:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 487:../../../../tmk_core/common/action.c ****     }
 488:../../../../tmk_core/common/action.c **** 
 489:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 150               		.loc 1 489 0
 151 0024 8338      		cpi r24,lo8(-125)
 152 0026 01F4      		brne .L8
 490:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 491:../../../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 153               		.loc 1 491 0
 154 0028 0E94 0000 		call host_keyboard_leds
 155               	.LVL11:
 156 002c 80FD      		sbrc r24,0
 157 002e 00C0      		rjmp .L3
 492:../../../../tmk_core/common/action.c **** #endif
 493:../../../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 158               		.loc 1 493 0
 159 0030 83E5      		ldi r24,lo8(83)
 160 0032 0E94 0000 		call add_key
 161               	.LVL12:
 494:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 162               		.loc 1 494 0
 163 0036 0E94 0000 		call send_keyboard_report
 164               	.LVL13:
 495:../../../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 165               		.loc 1 495 0
 166 003a 83E5      		ldi r24,lo8(83)
 167               	.L38:
 168 003c 0E94 0000 		call del_key
 169               	.LVL14:
 170               	.L39:
 171               	/* epilogue start */
 496:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 497:../../../../tmk_core/common/action.c ****     }
 498:../../../../tmk_core/common/action.c **** 
 499:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 500:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 501:../../../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 502:../../../../tmk_core/common/action.c **** #endif
 503:../../../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 504:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 505:../../../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 506:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 507:../../../../tmk_core/common/action.c ****     }
 508:../../../../tmk_core/common/action.c **** #endif
 509:../../../../tmk_core/common/action.c **** 
 510:../../../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 511:../../../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 512:../../../../tmk_core/common/action.c ****         if (command_proc(code)) return;
 513:../../../../tmk_core/common/action.c **** 
 514:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 515:../../../../tmk_core/common/action.c **** /* TODO: remove
 516:../../../../tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 517:../../../../tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 518:../../../../tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 519:../../../../tmk_core/common/action.c **** 
 520:../../../../tmk_core/common/action.c ****             add_key(code);
 521:../../../../tmk_core/common/action.c ****             send_keyboard_report();
 522:../../../../tmk_core/common/action.c **** 
 523:../../../../tmk_core/common/action.c ****             set_mods(tmp_mods);
 524:../../../../tmk_core/common/action.c ****             send_keyboard_report();
 525:../../../../tmk_core/common/action.c ****             oneshot_cancel();
 526:../../../../tmk_core/common/action.c ****         } else
 527:../../../../tmk_core/common/action.c **** */
 528:../../../../tmk_core/common/action.c **** #endif
 529:../../../../tmk_core/common/action.c ****         {
 530:../../../../tmk_core/common/action.c ****             add_key(code);
 531:../../../../tmk_core/common/action.c ****             send_keyboard_report();
 532:../../../../tmk_core/common/action.c ****         }
 533:../../../../tmk_core/common/action.c ****     }
 534:../../../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 535:../../../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 536:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 537:../../../../tmk_core/common/action.c ****     }
 538:../../../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 539:../../../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 540:../../../../tmk_core/common/action.c ****     }
 541:../../../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 542:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 543:../../../../tmk_core/common/action.c ****     }
 544:../../../../tmk_core/common/action.c **** }
 172               		.loc 1 544 0
 173 0040 CF91      		pop r28
 496:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 174               		.loc 1 496 0
 175 0042 0C94 0000 		jmp send_keyboard_report
 176               	.LVL15:
 177               	.L8:
 499:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 178               		.loc 1 499 0
 179 0046 8438      		cpi r24,lo8(-124)
 180 0048 01F4      		brne .L9
 501:../../../../tmk_core/common/action.c **** #endif
 181               		.loc 1 501 0
 182 004a 0E94 0000 		call host_keyboard_leds
 183               	.LVL16:
 184 004e 82FD      		sbrc r24,2
 185 0050 00C0      		rjmp .L3
 503:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 186               		.loc 1 503 0
 187 0052 87E4      		ldi r24,lo8(71)
 188 0054 0E94 0000 		call add_key
 189               	.LVL17:
 504:../../../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 190               		.loc 1 504 0
 191 0058 0E94 0000 		call send_keyboard_report
 192               	.LVL18:
 505:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 193               		.loc 1 505 0
 194 005c 87E4      		ldi r24,lo8(71)
 195 005e 00C0      		rjmp .L38
 196               	.LVL19:
 197               	.L9:
 510:../../../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 198               		.loc 1 510 0
 199 0060 8CEF      		ldi r24,lo8(-4)
 200               	.LVL20:
 201 0062 8C0F      		add r24,r28
 202 0064 813A      		cpi r24,lo8(-95)
 203 0066 00F4      		brsh .L10
 512:../../../../tmk_core/common/action.c **** 
 204               		.loc 1 512 0
 205 0068 8C2F      		mov r24,r28
 206 006a 0E94 0000 		call command_proc
 207               	.LVL21:
 208 006e 8111      		cpse r24,__zero_reg__
 209 0070 00C0      		rjmp .L3
 530:../../../../tmk_core/common/action.c ****             send_keyboard_report();
 210               		.loc 1 530 0
 211 0072 8C2F      		mov r24,r28
 212 0074 0E94 0000 		call add_key
 213               	.LVL22:
 214 0078 00C0      		rjmp .L39
 215               	.L10:
 534:../../../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 216               		.loc 1 534 0
 217 007a 80E2      		ldi r24,lo8(32)
 218 007c 8C0F      		add r24,r28
 219 007e 8830      		cpi r24,lo8(8)
 220 0080 00F4      		brsh .L11
 535:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 221               		.loc 1 535 0
 222 0082 C770      		andi r28,lo8(7)
 223               	.LVL23:
 224 0084 81E0      		ldi r24,lo8(1)
 225 0086 00C0      		rjmp 2f
 226               		1:
 227 0088 880F      		lsl r24
 228               		2:
 229 008a CA95      		dec r28
 230 008c 02F4      		brpl 1b
 231 008e 0E94 0000 		call add_mods
 232               	.LVL24:
 233 0092 00C0      		rjmp .L39
 234               	.LVL25:
 235               	.L11:
 538:../../../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 236               		.loc 1 538 0
 237 0094 8BE5      		ldi r24,lo8(91)
 238 0096 8C0F      		add r24,r28
 239 0098 8330      		cpi r24,lo8(3)
 240 009a 00F4      		brsh .L12
 539:../../../../tmk_core/common/action.c ****     }
 241               		.loc 1 539 0
 242 009c C53A      		cpi r28,lo8(-91)
 243 009e 01F0      		breq .L15
 539:../../../../tmk_core/common/action.c ****     }
 244               		.loc 1 539 0 is_stmt 0 discriminator 1
 245 00a0 C63A      		cpi r28,lo8(-90)
 246 00a2 01F0      		breq .L16
 539:../../../../tmk_core/common/action.c ****     }
 247               		.loc 1 539 0
 248 00a4 83E8      		ldi r24,lo8(-125)
 249 00a6 90E0      		ldi r25,0
 250 00a8 00C0      		rjmp .L13
 251               	.L15:
 252 00aa 81E8      		ldi r24,lo8(-127)
 253 00ac 90E0      		ldi r25,0
 254 00ae 00C0      		rjmp .L13
 255               	.L16:
 256 00b0 82E8      		ldi r24,lo8(-126)
 257 00b2 90E0      		ldi r25,0
 258               	.L13:
 259               	/* epilogue start */
 260               		.loc 1 544 0 is_stmt 1 discriminator 12
 261 00b4 CF91      		pop r28
 262               	.LVL26:
 539:../../../../tmk_core/common/action.c ****     }
 263               		.loc 1 539 0 discriminator 12
 264 00b6 0C94 0000 		jmp host_system_send
 265               	.LVL27:
 266               	.L12:
 541:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 267               		.loc 1 541 0
 268 00ba 88E5      		ldi r24,lo8(88)
 269 00bc 8C0F      		add r24,r28
 270 00be 8531      		cpi r24,lo8(21)
 271 00c0 00F0      		brlo .+2
 272 00c2 00C0      		rjmp .L3
 542:../../../../tmk_core/common/action.c ****     }
 273               		.loc 1 542 0
 274 00c4 C83A      		cpi r28,lo8(-88)
 275 00c6 01F0      		breq .L17
 542:../../../../tmk_core/common/action.c ****     }
 276               		.loc 1 542 0 is_stmt 0 discriminator 1
 277 00c8 C93A      		cpi r28,lo8(-87)
 278 00ca 01F0      		breq .L18
 542:../../../../tmk_core/common/action.c ****     }
 279               		.loc 1 542 0 discriminator 3
 280 00cc CA3A      		cpi r28,lo8(-86)
 281 00ce 01F0      		breq .L19
 542:../../../../tmk_core/common/action.c ****     }
 282               		.loc 1 542 0 discriminator 5
 283 00d0 CB3A      		cpi r28,lo8(-85)
 284 00d2 01F0      		breq .L20
 542:../../../../tmk_core/common/action.c ****     }
 285               		.loc 1 542 0 discriminator 7
 286 00d4 CC3A      		cpi r28,lo8(-84)
 287 00d6 01F0      		breq .L21
 542:../../../../tmk_core/common/action.c ****     }
 288               		.loc 1 542 0 discriminator 9
 289 00d8 CB3B      		cpi r28,lo8(-69)
 290 00da 01F0      		breq .L22
 542:../../../../tmk_core/common/action.c ****     }
 291               		.loc 1 542 0 discriminator 11
 292 00dc CC3B      		cpi r28,lo8(-68)
 293 00de 01F0      		breq .L23
 542:../../../../tmk_core/common/action.c ****     }
 294               		.loc 1 542 0 discriminator 13
 295 00e0 CD3A      		cpi r28,lo8(-83)
 296 00e2 01F0      		breq .L24
 542:../../../../tmk_core/common/action.c ****     }
 297               		.loc 1 542 0 discriminator 15
 298 00e4 C03B      		cpi r28,lo8(-80)
 299 00e6 01F0      		breq .L25
 542:../../../../tmk_core/common/action.c ****     }
 300               		.loc 1 542 0 discriminator 17
 301 00e8 CE3A      		cpi r28,lo8(-82)
 302 00ea 01F0      		breq .L26
 542:../../../../tmk_core/common/action.c ****     }
 303               		.loc 1 542 0 discriminator 19
 304 00ec CF3A      		cpi r28,lo8(-81)
 305 00ee 01F0      		breq .L27
 542:../../../../tmk_core/common/action.c ****     }
 306               		.loc 1 542 0 discriminator 21
 307 00f0 C13B      		cpi r28,lo8(-79)
 308 00f2 01F0      		breq .L28
 542:../../../../tmk_core/common/action.c ****     }
 309               		.loc 1 542 0 discriminator 23
 310 00f4 C23B      		cpi r28,lo8(-78)
 311 00f6 01F0      		breq .L29
 542:../../../../tmk_core/common/action.c ****     }
 312               		.loc 1 542 0 discriminator 25
 313 00f8 C33B      		cpi r28,lo8(-77)
 314 00fa 01F0      		breq .L30
 542:../../../../tmk_core/common/action.c ****     }
 315               		.loc 1 542 0 discriminator 27
 316 00fc C43B      		cpi r28,lo8(-76)
 317 00fe 01F0      		breq .L31
 542:../../../../tmk_core/common/action.c ****     }
 318               		.loc 1 542 0 discriminator 29
 319 0100 C53B      		cpi r28,lo8(-75)
 320 0102 01F0      		breq .L32
 542:../../../../tmk_core/common/action.c ****     }
 321               		.loc 1 542 0 discriminator 31
 322 0104 C63B      		cpi r28,lo8(-74)
 323 0106 01F0      		breq .L33
 542:../../../../tmk_core/common/action.c ****     }
 324               		.loc 1 542 0 discriminator 33
 325 0108 C73B      		cpi r28,lo8(-73)
 326 010a 01F0      		breq .L34
 542:../../../../tmk_core/common/action.c ****     }
 327               		.loc 1 542 0 discriminator 35
 328 010c C83B      		cpi r28,lo8(-72)
 329 010e 01F0      		breq .L35
 542:../../../../tmk_core/common/action.c ****     }
 330               		.loc 1 542 0 discriminator 37
 331 0110 C93B      		cpi r28,lo8(-71)
 332 0112 01F0      		breq .L36
 542:../../../../tmk_core/common/action.c ****     }
 333               		.loc 1 542 0 discriminator 39
 334 0114 CA3B      		cpi r28,lo8(-70)
 335 0116 01F4      		brne .+2
 336 0118 00C0      		rjmp .L37
 542:../../../../tmk_core/common/action.c ****     }
 337               		.loc 1 542 0
 338 011a 80E0      		ldi r24,0
 339 011c 90E0      		ldi r25,0
 340 011e 00C0      		rjmp .L14
 341               	.L17:
 342 0120 82EE      		ldi r24,lo8(-30)
 343 0122 90E0      		ldi r25,0
 344 0124 00C0      		rjmp .L14
 345               	.L18:
 346 0126 89EE      		ldi r24,lo8(-23)
 347 0128 90E0      		ldi r25,0
 348 012a 00C0      		rjmp .L14
 349               	.L19:
 350 012c 8AEE      		ldi r24,lo8(-22)
 351 012e 90E0      		ldi r25,0
 352 0130 00C0      		rjmp .L14
 353               	.L20:
 354 0132 85EB      		ldi r24,lo8(-75)
 355 0134 90E0      		ldi r25,0
 356 0136 00C0      		rjmp .L14
 357               	.L21:
 358 0138 86EB      		ldi r24,lo8(-74)
 359 013a 90E0      		ldi r25,0
 360 013c 00C0      		rjmp .L14
 361               	.L22:
 362 013e 83EB      		ldi r24,lo8(-77)
 363 0140 90E0      		ldi r25,0
 364 0142 00C0      		rjmp .L14
 365               	.L23:
 366 0144 84EB      		ldi r24,lo8(-76)
 367 0146 90E0      		ldi r25,0
 368 0148 00C0      		rjmp .L14
 369               	.L24:
 370 014a 87EB      		ldi r24,lo8(-73)
 371 014c 90E0      		ldi r25,0
 372 014e 00C0      		rjmp .L14
 373               	.L25:
 374 0150 8CEC      		ldi r24,lo8(-52)
 375 0152 90E0      		ldi r25,0
 376 0154 00C0      		rjmp .L14
 377               	.L26:
 378 0156 8DEC      		ldi r24,lo8(-51)
 379 0158 90E0      		ldi r25,0
 380 015a 00C0      		rjmp .L14
 381               	.L27:
 382 015c 83E8      		ldi r24,lo8(-125)
 383 015e 91E0      		ldi r25,lo8(1)
 384 0160 00C0      		rjmp .L14
 385               	.L28:
 386 0162 8AE8      		ldi r24,lo8(-118)
 387 0164 91E0      		ldi r25,lo8(1)
 388 0166 00C0      		rjmp .L14
 389               	.L29:
 390 0168 82E9      		ldi r24,lo8(-110)
 391 016a 91E0      		ldi r25,lo8(1)
 392 016c 00C0      		rjmp .L14
 393               	.L30:
 394 016e 84E9      		ldi r24,lo8(-108)
 395 0170 91E0      		ldi r25,lo8(1)
 396 0172 00C0      		rjmp .L14
 397               	.L31:
 398 0174 81E2      		ldi r24,lo8(33)
 399 0176 92E0      		ldi r25,lo8(2)
 400 0178 00C0      		rjmp .L14
 401               	.L32:
 402 017a 83E2      		ldi r24,lo8(35)
 403 017c 92E0      		ldi r25,lo8(2)
 404 017e 00C0      		rjmp .L14
 405               	.L33:
 406 0180 84E2      		ldi r24,lo8(36)
 407 0182 92E0      		ldi r25,lo8(2)
 408 0184 00C0      		rjmp .L14
 409               	.L34:
 410 0186 85E2      		ldi r24,lo8(37)
 411 0188 92E0      		ldi r25,lo8(2)
 412 018a 00C0      		rjmp .L14
 413               	.L35:
 414 018c 86E2      		ldi r24,lo8(38)
 415 018e 92E0      		ldi r25,lo8(2)
 416 0190 00C0      		rjmp .L14
 417               	.L36:
 418 0192 87E2      		ldi r24,lo8(39)
 419 0194 92E0      		ldi r25,lo8(2)
 420 0196 00C0      		rjmp .L14
 421               	.L37:
 422 0198 8AE2      		ldi r24,lo8(42)
 423 019a 92E0      		ldi r25,lo8(2)
 424               	.L14:
 425               	/* epilogue start */
 426               		.loc 1 544 0 is_stmt 1 discriminator 84
 427 019c CF91      		pop r28
 428               	.LVL28:
 542:../../../../tmk_core/common/action.c ****     }
 429               		.loc 1 542 0 discriminator 84
 430 019e 0C94 0000 		jmp host_consumer_send
 431               	.LVL29:
 432               	.L3:
 433               	/* epilogue start */
 434               		.loc 1 544 0
 435 01a2 CF91      		pop r28
 436 01a4 0895      		ret
 437               		.cfi_endproc
 438               	.LFE108:
 440               		.section	.text.unregister_code,"ax",@progbits
 441               	.global	unregister_code
 443               	unregister_code:
 444               	.LFB109:
 545:../../../../tmk_core/common/action.c **** 
 546:../../../../tmk_core/common/action.c **** void unregister_code(uint8_t code)
 547:../../../../tmk_core/common/action.c **** {
 445               		.loc 1 547 0
 446               		.cfi_startproc
 447               	.LVL30:
 448               	/* prologue: function */
 449               	/* frame size = 0 */
 450               	/* stack size = 0 */
 451               	.L__stack_usage = 0
 548:../../../../tmk_core/common/action.c ****     if (code == KC_NO) {
 452               		.loc 1 548 0
 453 0000 8823      		tst r24
 454 0002 01F4      		brne .+2
 455 0004 00C0      		rjmp .L41
 549:../../../../tmk_core/common/action.c ****         return;
 550:../../../../tmk_core/common/action.c ****     }
 551:../../../../tmk_core/common/action.c **** 
 552:../../../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 553:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 456               		.loc 1 553 0
 457 0006 8238      		cpi r24,lo8(-126)
 458 0008 01F4      		brne .L44
 554:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 555:../../../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 556:../../../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 459               		.loc 1 556 0
 460 000a 0E94 0000 		call host_keyboard_leds
 461               	.LVL31:
 462 000e 81FF      		sbrs r24,1
 463 0010 00C0      		rjmp .L41
 557:../../../../tmk_core/common/action.c **** #endif
 558:../../../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 464               		.loc 1 558 0
 465 0012 89E3      		ldi r24,lo8(57)
 466 0014 0E94 0000 		call add_key
 467               	.LVL32:
 559:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 468               		.loc 1 559 0
 469 0018 0E94 0000 		call send_keyboard_report
 470               	.LVL33:
 560:../../../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 471               		.loc 1 560 0
 472 001c 89E3      		ldi r24,lo8(57)
 473 001e 00C0      		rjmp .L60
 474               	.LVL34:
 475               	.L44:
 561:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 562:../../../../tmk_core/common/action.c ****     }
 563:../../../../tmk_core/common/action.c **** 
 564:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 476               		.loc 1 564 0
 477 0020 8338      		cpi r24,lo8(-125)
 478 0022 01F4      		brne .L46
 565:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 566:../../../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 479               		.loc 1 566 0
 480 0024 0E94 0000 		call host_keyboard_leds
 481               	.LVL35:
 482 0028 80FF      		sbrs r24,0
 483 002a 00C0      		rjmp .L41
 567:../../../../tmk_core/common/action.c **** #endif
 568:../../../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 484               		.loc 1 568 0
 485 002c 83E5      		ldi r24,lo8(83)
 486 002e 0E94 0000 		call add_key
 487               	.LVL36:
 569:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 488               		.loc 1 569 0
 489 0032 0E94 0000 		call send_keyboard_report
 490               	.LVL37:
 570:../../../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 491               		.loc 1 570 0
 492 0036 83E5      		ldi r24,lo8(83)
 493               	.L60:
 494 0038 0E94 0000 		call del_key
 495               	.LVL38:
 496               	.L61:
 571:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 497               		.loc 1 571 0
 498 003c 0C94 0000 		jmp send_keyboard_report
 499               	.LVL39:
 500               	.L46:
 572:../../../../tmk_core/common/action.c ****     }
 573:../../../../tmk_core/common/action.c **** 
 574:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 501               		.loc 1 574 0
 502 0040 8438      		cpi r24,lo8(-124)
 503 0042 01F4      		brne .L47
 575:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 576:../../../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 504               		.loc 1 576 0
 505 0044 0E94 0000 		call host_keyboard_leds
 506               	.LVL40:
 507 0048 82FF      		sbrs r24,2
 508 004a 00C0      		rjmp .L41
 577:../../../../tmk_core/common/action.c **** #endif
 578:../../../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 509               		.loc 1 578 0
 510 004c 87E4      		ldi r24,lo8(71)
 511 004e 0E94 0000 		call add_key
 512               	.LVL41:
 579:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 513               		.loc 1 579 0
 514 0052 0E94 0000 		call send_keyboard_report
 515               	.LVL42:
 580:../../../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 516               		.loc 1 580 0
 517 0056 87E4      		ldi r24,lo8(71)
 518 0058 00C0      		rjmp .L60
 519               	.LVL43:
 520               	.L47:
 581:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 582:../../../../tmk_core/common/action.c ****     }
 583:../../../../tmk_core/common/action.c **** #endif
 584:../../../../tmk_core/common/action.c **** 
 585:../../../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 521               		.loc 1 585 0
 522 005a 9CEF      		ldi r25,lo8(-4)
 523 005c 980F      		add r25,r24
 524 005e 913A      		cpi r25,lo8(-95)
 525 0060 00F0      		brlo .L60
 586:../../../../tmk_core/common/action.c ****         del_key(code);
 587:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 588:../../../../tmk_core/common/action.c ****     }
 589:../../../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 526               		.loc 1 589 0
 527 0062 90E2      		ldi r25,lo8(32)
 528 0064 980F      		add r25,r24
 529 0066 9830      		cpi r25,lo8(8)
 530 0068 00F4      		brsh .L49
 590:../../../../tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 531               		.loc 1 590 0
 532 006a 8770      		andi r24,lo8(7)
 533               	.LVL44:
 534 006c 91E0      		ldi r25,lo8(1)
 535 006e 00C0      		rjmp 2f
 536               		1:
 537 0070 990F      		lsl r25
 538               		2:
 539 0072 8A95      		dec r24
 540 0074 02F4      		brpl 1b
 541 0076 892F      		mov r24,r25
 542 0078 0E94 0000 		call del_mods
 543               	.LVL45:
 544 007c 00C0      		rjmp .L61
 545               	.LVL46:
 546               	.L49:
 591:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 592:../../../../tmk_core/common/action.c ****     }
 593:../../../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 547               		.loc 1 593 0
 548 007e 9BE5      		ldi r25,lo8(91)
 549 0080 980F      		add r25,r24
 550 0082 9330      		cpi r25,lo8(3)
 551 0084 00F4      		brsh .L50
 594:../../../../tmk_core/common/action.c ****         host_system_send(0);
 552               		.loc 1 594 0
 553 0086 80E0      		ldi r24,0
 554 0088 90E0      		ldi r25,0
 555               	.LVL47:
 556 008a 0C94 0000 		jmp host_system_send
 557               	.LVL48:
 558               	.L50:
 595:../../../../tmk_core/common/action.c ****     }
 596:../../../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 559               		.loc 1 596 0
 560 008e 885A      		subi r24,lo8(-(88))
 561               	.LVL49:
 562 0090 8531      		cpi r24,lo8(21)
 563 0092 00F4      		brsh .L41
 597:../../../../tmk_core/common/action.c ****         host_consumer_send(0);
 564               		.loc 1 597 0
 565 0094 80E0      		ldi r24,0
 566 0096 90E0      		ldi r25,0
 567               	.LVL50:
 568 0098 0C94 0000 		jmp host_consumer_send
 569               	.LVL51:
 570               	.L41:
 571 009c 0895      		ret
 572               		.cfi_endproc
 573               	.LFE109:
 575               		.section	.text.register_mods,"ax",@progbits
 576               	.global	register_mods
 578               	register_mods:
 579               	.LFB110:
 598:../../../../tmk_core/common/action.c ****     }
 599:../../../../tmk_core/common/action.c **** }
 600:../../../../tmk_core/common/action.c **** 
 601:../../../../tmk_core/common/action.c **** void register_mods(uint8_t mods)
 602:../../../../tmk_core/common/action.c **** {
 580               		.loc 1 602 0
 581               		.cfi_startproc
 582               	.LVL52:
 583               	/* prologue: function */
 584               	/* frame size = 0 */
 585               	/* stack size = 0 */
 586               	.L__stack_usage = 0
 603:../../../../tmk_core/common/action.c ****     if (mods) {
 587               		.loc 1 603 0
 588 0000 8823      		tst r24
 589 0002 01F0      		breq .L62
 604:../../../../tmk_core/common/action.c ****         add_mods(mods);
 590               		.loc 1 604 0
 591 0004 0E94 0000 		call add_mods
 592               	.LVL53:
 605:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 593               		.loc 1 605 0
 594 0008 0C94 0000 		jmp send_keyboard_report
 595               	.LVL54:
 596               	.L62:
 597 000c 0895      		ret
 598               		.cfi_endproc
 599               	.LFE110:
 601               		.section	.text.unregister_mods,"ax",@progbits
 602               	.global	unregister_mods
 604               	unregister_mods:
 605               	.LFB111:
 606:../../../../tmk_core/common/action.c ****     }
 607:../../../../tmk_core/common/action.c **** }
 608:../../../../tmk_core/common/action.c **** 
 609:../../../../tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 610:../../../../tmk_core/common/action.c **** {
 606               		.loc 1 610 0
 607               		.cfi_startproc
 608               	.LVL55:
 609               	/* prologue: function */
 610               	/* frame size = 0 */
 611               	/* stack size = 0 */
 612               	.L__stack_usage = 0
 611:../../../../tmk_core/common/action.c ****     if (mods) {
 613               		.loc 1 611 0
 614 0000 8823      		tst r24
 615 0002 01F0      		breq .L64
 612:../../../../tmk_core/common/action.c ****         del_mods(mods);
 616               		.loc 1 612 0
 617 0004 0E94 0000 		call del_mods
 618               	.LVL56:
 613:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 619               		.loc 1 613 0
 620 0008 0C94 0000 		jmp send_keyboard_report
 621               	.LVL57:
 622               	.L64:
 623 000c 0895      		ret
 624               		.cfi_endproc
 625               	.LFE111:
 627               		.section	.text.process_action,"ax",@progbits
 628               	.global	process_action
 630               	process_action:
 631               	.LFB107:
  96:../../../../tmk_core/common/action.c ****     bool do_release_oneshot = false;
 632               		.loc 1 96 0
 633               		.cfi_startproc
 634               	.LVL58:
 635 0000 7F92      		push r7
 636               	.LCFI5:
 637               		.cfi_def_cfa_offset 3
 638               		.cfi_offset 7, -2
 639 0002 8F92      		push r8
 640               	.LCFI6:
 641               		.cfi_def_cfa_offset 4
 642               		.cfi_offset 8, -3
 643 0004 9F92      		push r9
 644               	.LCFI7:
 645               		.cfi_def_cfa_offset 5
 646               		.cfi_offset 9, -4
 647 0006 AF92      		push r10
 648               	.LCFI8:
 649               		.cfi_def_cfa_offset 6
 650               		.cfi_offset 10, -5
 651 0008 BF92      		push r11
 652               	.LCFI9:
 653               		.cfi_def_cfa_offset 7
 654               		.cfi_offset 11, -6
 655 000a CF92      		push r12
 656               	.LCFI10:
 657               		.cfi_def_cfa_offset 8
 658               		.cfi_offset 12, -7
 659 000c DF92      		push r13
 660               	.LCFI11:
 661               		.cfi_def_cfa_offset 9
 662               		.cfi_offset 13, -8
 663 000e EF92      		push r14
 664               	.LCFI12:
 665               		.cfi_def_cfa_offset 10
 666               		.cfi_offset 14, -9
 667 0010 FF92      		push r15
 668               	.LCFI13:
 669               		.cfi_def_cfa_offset 11
 670               		.cfi_offset 15, -10
 671 0012 0F93      		push r16
 672               	.LCFI14:
 673               		.cfi_def_cfa_offset 12
 674               		.cfi_offset 16, -11
 675 0014 1F93      		push r17
 676               	.LCFI15:
 677               		.cfi_def_cfa_offset 13
 678               		.cfi_offset 17, -12
 679 0016 CF93      		push r28
 680               	.LCFI16:
 681               		.cfi_def_cfa_offset 14
 682               		.cfi_offset 28, -13
 683 0018 DF93      		push r29
 684               	.LCFI17:
 685               		.cfi_def_cfa_offset 15
 686               		.cfi_offset 29, -14
 687 001a 1F92      		push __zero_reg__
 688               	.LCFI18:
 689               		.cfi_def_cfa_offset 16
 690 001c CDB7      		in r28,__SP_L__
 691 001e DEB7      		in r29,__SP_H__
 692               	.LCFI19:
 693               		.cfi_def_cfa_register 28
 694               	/* prologue: function */
 695               	/* frame size = 1 */
 696               	/* stack size = 14 */
 697               	.L__stack_usage = 14
 698 0020 7C01      		movw r14,r24
 699 0022 C62E      		mov r12,r22
 700 0024 772E      		mov r7,r23
 701               	.LVL59:
 100:../../../../tmk_core/common/action.c **** #endif
 702               		.loc 1 100 0
 703 0026 FC01      		movw r30,r24
 704 0028 0581      		ldd r16,Z+5
 705 002a 0295      		swap r16
 706 002c 0F70      		andi r16,lo8(15)
 707               	.LVL60:
 110:../../../../tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 708               		.loc 1 110 0
 709 002e 1281      		ldd r17,Z+2
 710 0030 1111      		cpse r17,__zero_reg__
 112:../../../../tmk_core/common/action.c ****     }
 711               		.loc 1 112 0
 712 0032 0E94 0000 		call clear_weak_mods
 713               	.LVL61:
 714               	.L67:
 117:../../../../tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 715               		.loc 1 117 0
 716 0036 0E94 0000 		call is_oneshot_layer_active
 717               	.LVL62:
 718 003a 8823      		tst r24
 719 003c 01F0      		breq .L149
 117:../../../../tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 720               		.loc 1 117 0 is_stmt 0 discriminator 1
 721 003e 1123      		tst r17
 722 0040 01F0      		breq .L149
 117:../../../../tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 723               		.loc 1 117 0 discriminator 2
 724 0042 80E2      		ldi r24,lo8(32)
 725 0044 8C0D      		add r24,r12
 726 0046 8830      		cpi r24,lo8(8)
 727 0048 00F0      		brlo .L149
 118:../../../../tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 728               		.loc 1 118 0 is_stmt 1
 729 004a 82E0      		ldi r24,lo8(2)
 730 004c 0E94 0000 		call clear_oneshot_layer_state
 731               	.LVL63:
 119:../../../../tmk_core/common/action.c ****     }
 732               		.loc 1 119 0
 733 0050 0E94 0000 		call is_oneshot_layer_active
 734               	.LVL64:
 735 0054 91E0      		ldi r25,lo8(1)
 736 0056 D82E      		mov r13,r24
 737 0058 D926      		eor r13,r25
 738               	.LVL65:
 739 005a 00C0      		rjmp .L68
 740               	.LVL66:
 741               	.L149:
  97:../../../../tmk_core/common/action.c ****     keyevent_t event = record->event;
 742               		.loc 1 97 0
 743 005c D12C      		mov r13,__zero_reg__
 744               	.LVL67:
 745               	.L68:
 123:../../../../tmk_core/common/action.c ****         /* Key and Mods */
 746               		.loc 1 123 0
 747 005e E72D      		mov r30,r7
 748 0060 E295      		swap r30
 749 0062 EF70      		andi r30,lo8(15)
 750 0064 F0E0      		ldi r31,0
 751 0066 E050      		subi r30,lo8(-(gs(.L71)))
 752 0068 F040      		sbci r31,hi8(-(gs(.L71)))
 753 006a 0C94 0000 		jmp __tablejump2__
 754               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 755               		.p2align	1
 756               	.L71:
 757 0000 0000      		.word gs(.L70)
 758 0002 0000      		.word gs(.L70)
 759 0004 0000      		.word gs(.L72)
 760 0006 0000      		.word gs(.L72)
 761 0008 0000      		.word gs(.L73)
 762 000a 0000      		.word gs(.L74)
 763 000c 0000      		.word gs(.L69)
 764 000e 0000      		.word gs(.L69)
 765 0010 0000      		.word gs(.L75)
 766 0012 0000      		.word gs(.L69)
 767 0014 0000      		.word gs(.L76)
 768 0016 0000      		.word gs(.L76)
 769 0018 0000      		.word gs(.L77)
 770 001a 0000      		.word gs(.L78)
 771 001c 0000      		.word gs(.L69)
 772 001e 0000      		.word gs(.L79)
 773               		.section	.text.process_action
 774               	.L70:
 775               	.LBB2:
 128:../../../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 776               		.loc 1 128 0
 777 006e 872D      		mov r24,r7
 778 0070 807F      		andi r24,lo8(-16)
 779 0072 072D      		mov r16,r7
 780               	.LVL68:
 781 0074 0F70      		andi r16,lo8(15)
 782 0076 8823      		tst r24
 783 0078 01F0      		breq .L81
 128:../../../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 784               		.loc 1 128 0 is_stmt 0 discriminator 2
 785 007a 0295      		swap r16
 786 007c 007F      		andi r16,lo8(-16)
 787               	.L81:
 788               	.LVL69:
 130:../../../../tmk_core/common/action.c ****                     if (mods) {
 789               		.loc 1 130 0 is_stmt 1 discriminator 4
 790 007e 1123      		tst r17
 791 0080 01F0      		breq .L82
 131:../../../../tmk_core/common/action.c ****                         if (IS_MOD(action.key.code)) {
 792               		.loc 1 131 0
 793 0082 0023      		tst r16
 794 0084 01F4      		brne .+2
 795 0086 00C0      		rjmp .L176
 132:../../../../tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 796               		.loc 1 132 0
 797 0088 80E2      		ldi r24,lo8(32)
 798 008a 8C0D      		add r24,r12
 799 008c 8830      		cpi r24,lo8(8)
 800 008e 00F4      		brsh .L84
 135:../../../../tmk_core/common/action.c ****                         } else {
 801               		.loc 1 135 0
 802 0090 802F      		mov r24,r16
 803 0092 0E94 0000 		call add_mods
 804               	.LVL70:
 805 0096 00C0      		rjmp .L85
 806               	.L84:
 137:../../../../tmk_core/common/action.c ****                         }
 807               		.loc 1 137 0
 808 0098 802F      		mov r24,r16
 809 009a 0E94 0000 		call add_weak_mods
 810               	.LVL71:
 811               	.L85:
 139:../../../../tmk_core/common/action.c ****                     }
 812               		.loc 1 139 0
 813 009e 0E94 0000 		call send_keyboard_report
 814               	.LVL72:
 815 00a2 00C0      		rjmp .L176
 816               	.L82:
 143:../../../../tmk_core/common/action.c ****                     if (mods) {
 817               		.loc 1 143 0
 818 00a4 8C2D      		mov r24,r12
 819 00a6 0E94 0000 		call unregister_code
 820               	.LVL73:
 144:../../../../tmk_core/common/action.c ****                         if (IS_MOD(action.key.code)) {
 821               		.loc 1 144 0
 822 00aa 0023      		tst r16
 823 00ac 01F4      		brne .+2
 824 00ae 00C0      		rjmp .L69
 145:../../../../tmk_core/common/action.c ****                             del_mods(mods);
 825               		.loc 1 145 0
 826 00b0 80E2      		ldi r24,lo8(32)
 827 00b2 8C0D      		add r24,r12
 828 00b4 8830      		cpi r24,lo8(8)
 829 00b6 00F4      		brsh .L87
 146:../../../../tmk_core/common/action.c ****                         } else {
 830               		.loc 1 146 0
 831 00b8 802F      		mov r24,r16
 832 00ba 0E94 0000 		call del_mods
 833               	.LVL74:
 834 00be 00C0      		rjmp .L88
 835               	.L87:
 148:../../../../tmk_core/common/action.c ****                         }
 836               		.loc 1 148 0
 837 00c0 802F      		mov r24,r16
 838 00c2 0E94 0000 		call del_weak_mods
 839               	.LVL75:
 840               	.L88:
 150:../../../../tmk_core/common/action.c ****                     }
 841               		.loc 1 150 0
 842 00c6 0E94 0000 		call send_keyboard_report
 843               	.LVL76:
 844 00ca 00C0      		rjmp .L69
 845               	.LVL77:
 846               	.L72:
 847               	.LBE2:
 848               	.LBB3:
 159:../../../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 849               		.loc 1 159 0
 850 00cc 872D      		mov r24,r7
 851 00ce 807F      		andi r24,lo8(-16)
 852 00d0 972D      		mov r25,r7
 853 00d2 9F70      		andi r25,lo8(15)
 854 00d4 8032      		cpi r24,lo8(32)
 855 00d6 01F4      		brne .L89
 159:../../../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 856               		.loc 1 159 0 is_stmt 0 discriminator 1
 857 00d8 892F      		mov r24,r25
 858 00da 00C0      		rjmp .L90
 859               	.L89:
 159:../../../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 860               		.loc 1 159 0 discriminator 2
 861 00dc 892F      		mov r24,r25
 862 00de 8295      		swap r24
 863 00e0 807F      		andi r24,lo8(-16)
 864               	.L90:
 865               	.LVL78:
 161:../../../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 866               		.loc 1 161 0 is_stmt 1 discriminator 4
 867 00e2 CC20      		tst r12
 868 00e4 01F0      		breq .L92
 869 00e6 F1E0      		ldi r31,lo8(1)
 870 00e8 CF16      		cp r12,r31
 871 00ea 01F0      		breq .L93
 872 00ec 00C0      		rjmp .L184
 873               	.L92:
 165:../../../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 874               		.loc 1 165 0
 875 00ee 1123      		tst r17
 876 00f0 01F0      		breq .L94
 166:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 877               		.loc 1 166 0
 878 00f2 0023      		tst r16
 879 00f4 01F0      		breq .L177
 169:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 880               		.loc 1 169 0
 881 00f6 0130      		cpi r16,lo8(1)
 882 00f8 01F4      		brne .L177
 171:../../../../tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 883               		.loc 1 171 0
 884 00fa 0E94 0000 		call set_oneshot_mods
 885               	.LVL79:
 886 00fe 00C0      		rjmp .L69
 887               	.LVL80:
 888               	.L94:
 183:../../../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 889               		.loc 1 183 0
 890 0100 0023      		tst r16
 891 0102 01F0      		breq .L183
 186:../../../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 892               		.loc 1 186 0
 893 0104 0130      		cpi r16,lo8(1)
 894 0106 01F4      		brne .+2
 895 0108 00C0      		rjmp .L69
 896               	.L183:
 198:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 897               		.loc 1 198 0
 898 010a 8983      		std Y+1,r24
 899 010c 0E94 0000 		call clear_oneshot_mods
 900               	.LVL81:
 199:../../../../tmk_core/common/action.c ****                             }
 901               		.loc 1 199 0
 902 0110 8981      		ldd r24,Y+1
 903 0112 00C0      		rjmp .L179
 904               	.LVL82:
 905               	.L93:
 205:../../../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 906               		.loc 1 205 0
 907 0114 1123      		tst r17
 908 0116 01F0      		breq .L99
 206:../../../../tmk_core/common/action.c ****                                 register_mods(mods);
 909               		.loc 1 206 0
 910 0118 0630      		cpi r16,lo8(6)
 911 011a 00F0      		brlo .+2
 912 011c 00C0      		rjmp .L69
 913 011e 00C0      		rjmp .L177
 914               	.L99:
 210:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 915               		.loc 1 210 0
 916 0120 0530      		cpi r16,lo8(5)
 917 0122 00F0      		brlo .+2
 918 0124 00C0      		rjmp .L69
 919 0126 00C0      		rjmp .L179
 920               	.L184:
 216:../../../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 921               		.loc 1 216 0
 922 0128 1123      		tst r17
 923 012a 01F0      		breq .L100
 217:../../../../tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 924               		.loc 1 217 0
 925 012c 0023      		tst r16
 926 012e 01F0      		breq .L177
 219:../../../../tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 927               		.loc 1 219 0
 928 0130 F701      		movw r30,r14
 929 0132 9581      		ldd r25,Z+5
 930 0134 90FF      		sbrs r25,0
 931 0136 00C0      		rjmp .L176
 222:../../../../tmk_core/common/action.c ****                                     register_mods(mods);
 932               		.loc 1 222 0
 933 0138 9F70      		andi r25,lo8(15)
 934 013a 9583      		std Z+5,r25
 935               	.LVL83:
 936               	.L177:
 223:../../../../tmk_core/common/action.c ****                                 } else
 937               		.loc 1 223 0
 938 013c 0E94 0000 		call register_mods
 939               	.LVL84:
 940 0140 00C0      		rjmp .L69
 941               	.LVL85:
 942               	.L100:
 235:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 943               		.loc 1 235 0
 944 0142 0023      		tst r16
 945 0144 01F4      		brne .+2
 946 0146 00C0      		rjmp .L179
 947 0148 00C0      		rjmp .L178
 948               	.LVL86:
 949               	.L73:
 950               	.LBE3:
 251:../../../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 951               		.loc 1 251 0
 952 014a 872D      		mov r24,r7
 953 014c 8695      		lsr r24
 954 014e 8695      		lsr r24
 955 0150 8370      		andi r24,lo8(3)
 956 0152 90E0      		ldi r25,0
 957 0154 0097      		sbiw r24,0
 958 0156 01F0      		breq .L104
 959 0158 0197      		sbiw r24,1
 960 015a 01F0      		breq .L105
 961 015c 00C0      		rjmp .L69
 962               	.L104:
 253:../../../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 963               		.loc 1 253 0
 964 015e 1123      		tst r17
 965 0160 01F0      		breq .L106
 254:../../../../tmk_core/common/action.c ****                     } else {
 966               		.loc 1 254 0
 967 0162 8C2D      		mov r24,r12
 968 0164 972D      		mov r25,r7
 969 0166 9370      		andi r25,lo8(3)
 970 0168 00C0      		rjmp .L174
 971               	.L106:
 256:../../../../tmk_core/common/action.c ****                     }
 972               		.loc 1 256 0
 973 016a 80E0      		ldi r24,0
 974 016c 90E0      		ldi r25,0
 975               	.L174:
 976 016e 0E94 0000 		call host_system_send
 977               	.LVL87:
 978 0172 00C0      		rjmp .L69
 979               	.L105:
 260:../../../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 980               		.loc 1 260 0
 981 0174 1123      		tst r17
 982 0176 01F0      		breq .L107
 261:../../../../tmk_core/common/action.c ****                     } else {
 983               		.loc 1 261 0
 984 0178 8C2D      		mov r24,r12
 985 017a 972D      		mov r25,r7
 986 017c 9370      		andi r25,lo8(3)
 987 017e 00C0      		rjmp .L180
 988               	.L107:
 263:../../../../tmk_core/common/action.c ****                     }
 989               		.loc 1 263 0
 990 0180 80E0      		ldi r24,0
 991 0182 90E0      		ldi r25,0
 992               	.L180:
 993 0184 0E94 0000 		call host_consumer_send
 994               	.LVL88:
 995 0188 00C0      		rjmp .L69
 996               	.L74:
 273:../../../../tmk_core/common/action.c ****                 mousekey_send();
 997               		.loc 1 273 0
 998 018a 8C2D      		mov r24,r12
 272:../../../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 999               		.loc 1 272 0
 1000 018c 1123      		tst r17
 1001 018e 01F0      		breq .L108
 273:../../../../tmk_core/common/action.c ****                 mousekey_send();
 1002               		.loc 1 273 0
 1003 0190 0E94 0000 		call mousekey_on
 1004               	.LVL89:
 1005 0194 00C0      		rjmp .L175
 1006               	.L108:
 276:../../../../tmk_core/common/action.c ****                 mousekey_send();
 1007               		.loc 1 276 0
 1008 0196 0E94 0000 		call mousekey_off
 1009               	.LVL90:
 1010               	.L175:
 277:../../../../tmk_core/common/action.c ****             }
 1011               		.loc 1 277 0
 1012 019a 0E94 0000 		call mousekey_send
 1013               	.LVL91:
 1014 019e 00C0      		rjmp .L69
 1015               	.L75:
 283:../../../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1016               		.loc 1 283 0
 1017 01a0 872D      		mov r24,r7
 1018 01a2 8370      		andi r24,lo8(3)
 1019 01a4 01F0      		breq .+2
 1020 01a6 00C0      		rjmp .L109
 285:../../../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1021               		.loc 1 285 0
 1022 01a8 1111      		cpse r17,__zero_reg__
 1023 01aa 00C0      		rjmp .L69
 1024               	.LVL92:
 1025               	.LBB4:
 286:../../../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1026               		.loc 1 286 0
 1027 01ac 8C2D      		mov r24,r12
 1028 01ae 8295      		swap r24
 1029 01b0 8695      		lsr r24
 1030 01b2 8770      		andi r24,lo8(7)
 1031 01b4 880F      		lsl r24
 1032 01b6 880F      		lsl r24
 287:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1033               		.loc 1 287 0
 1034 01b8 9C2D      		mov r25,r12
 1035 01ba 9F70      		andi r25,lo8(15)
 1036 01bc 892E      		mov r8,r25
 1037 01be 912C      		mov r9,__zero_reg__
 1038 01c0 A12C      		mov r10,__zero_reg__
 1039 01c2 B12C      		mov r11,__zero_reg__
 1040 01c4 082E      		mov r0,r24
 1041 01c6 00C0      		rjmp 2f
 1042               		1:
 1043 01c8 880C      		lsl r8
 1044 01ca 991C      		rol r9
 1045 01cc AA1C      		rol r10
 1046 01ce BB1C      		rol r11
 1047               		2:
 1048 01d0 0A94      		dec r0
 1049 01d2 02F4      		brpl 1b
 1050               	.LVL93:
 288:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1051               		.loc 1 288 0
 1052 01d4 C4FE      		sbrs r12,4
 1053 01d6 00C0      		rjmp .L150
 288:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1054               		.loc 1 288 0 is_stmt 0 discriminator 1
 1055 01d8 0FE0      		ldi r16,lo8(15)
 1056 01da 10E0      		ldi r17,0
 1057 01dc 20E0      		ldi r18,0
 1058 01de 30E0      		ldi r19,0
 1059               	.LVL94:
 1060 01e0 B901      		movw r22,r18
 1061 01e2 A801      		movw r20,r16
 1062 01e4 00C0      		rjmp 2f
 1063               		1:
 1064 01e6 440F      		lsl r20
 1065 01e8 551F      		rol r21
 1066 01ea 661F      		rol r22
 1067 01ec 771F      		rol r23
 1068               		2:
 1069 01ee 8A95      		dec r24
 1070 01f0 02F4      		brpl 1b
 1071 01f2 CB01      		movw r24,r22
 1072 01f4 BA01      		movw r22,r20
 1073 01f6 6095      		com r22
 1074 01f8 7095      		com r23
 1075 01fa 8095      		com r24
 1076 01fc 9095      		com r25
 1077 01fe 00C0      		rjmp .L110
 1078               	.LVL95:
 1079               	.L150:
 288:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1080               		.loc 1 288 0
 1081 0200 60E0      		ldi r22,0
 1082 0202 70E0      		ldi r23,0
 1083 0204 CB01      		movw r24,r22
 1084               	.LVL96:
 1085               	.L110:
 289:../../../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1086               		.loc 1 289 0 is_stmt 1 discriminator 4
 1087 0206 272D      		mov r18,r7
 1088 0208 2695      		lsr r18
 1089 020a 2695      		lsr r18
 1090 020c 2370      		andi r18,lo8(3)
 1091 020e 30E0      		ldi r19,0
 1092 0210 2230      		cpi r18,2
 1093 0212 3105      		cpc r19,__zero_reg__
 1094 0214 01F0      		breq .L112
 1095 0216 2330      		cpi r18,3
 1096 0218 3105      		cpc r19,__zero_reg__
 1097 021a 01F0      		breq .L113
 1098 021c 6829      		or r22,r8
 1099 021e 7929      		or r23,r9
 1100 0220 8A29      		or r24,r10
 1101 0222 9B29      		or r25,r11
 1102               	.LVL97:
 1103 0224 2130      		cpi r18,1
 1104 0226 3105      		cpc r19,__zero_reg__
 1105 0228 01F0      		breq .L181
 290:../../../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1106               		.loc 1 290 0 discriminator 4
 1107 022a 0E94 0000 		call default_layer_and
 1108               	.LVL98:
 1109 022e 00C0      		rjmp .L69
 1110               	.LVL99:
 1111               	.L112:
 292:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1112               		.loc 1 292 0
 1113 0230 6829      		or r22,r8
 1114 0232 7929      		or r23,r9
 1115 0234 8A29      		or r24,r10
 1116 0236 9B29      		or r25,r11
 1117               	.LVL100:
 1118 0238 0E94 0000 		call default_layer_xor
 1119               	.LVL101:
 1120 023c 00C0      		rjmp .L69
 1121               	.LVL102:
 1122               	.L113:
 293:../../../../tmk_core/common/action.c ****                     }
 1123               		.loc 1 293 0
 1124 023e 0E94 0000 		call default_layer_and
 1125               	.LVL103:
 1126 0242 C501      		movw r24,r10
 1127 0244 B401      		movw r22,r8
 1128               	.L181:
 1129 0246 0E94 0000 		call default_layer_or
 1130               	.LVL104:
 1131 024a 00C0      		rjmp .L69
 1132               	.LVL105:
 1133               	.L109:
 1134               	.LBE4:
 298:../../../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1135               		.loc 1 298 0
 1136 024c 1123      		tst r17
 1137 024e 01F0      		breq .L115
 298:../../../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1138               		.loc 1 298 0 is_stmt 0 discriminator 1
 1139 0250 872D      		mov r24,r7
 1140 0252 8170      		andi r24,lo8(1)
 1141 0254 00C0      		rjmp .L116
 1142               	.L115:
 298:../../../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1143               		.loc 1 298 0 discriminator 2
 1144 0256 8695      		lsr r24
 1145               	.L116:
 298:../../../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1146               		.loc 1 298 0 discriminator 4
 1147 0258 8823      		tst r24
 1148 025a 01F4      		brne .+2
 1149 025c 00C0      		rjmp .L69
 1150               	.LVL106:
 1151               	.LBB5:
 300:../../../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1152               		.loc 1 300 0 is_stmt 1
 1153 025e 8C2D      		mov r24,r12
 1154 0260 8295      		swap r24
 1155 0262 8695      		lsr r24
 1156 0264 8770      		andi r24,lo8(7)
 1157 0266 880F      		lsl r24
 1158 0268 880F      		lsl r24
 301:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1159               		.loc 1 301 0
 1160 026a 9C2D      		mov r25,r12
 1161 026c 9F70      		andi r25,lo8(15)
 1162 026e 892E      		mov r8,r25
 1163 0270 912C      		mov r9,__zero_reg__
 1164 0272 A12C      		mov r10,__zero_reg__
 1165 0274 B12C      		mov r11,__zero_reg__
 1166 0276 082E      		mov r0,r24
 1167 0278 00C0      		rjmp 2f
 1168               		1:
 1169 027a 880C      		lsl r8
 1170 027c 991C      		rol r9
 1171 027e AA1C      		rol r10
 1172 0280 BB1C      		rol r11
 1173               		2:
 1174 0282 0A94      		dec r0
 1175 0284 02F4      		brpl 1b
 1176               	.LVL107:
 302:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1177               		.loc 1 302 0
 1178 0286 C4FE      		sbrs r12,4
 1179 0288 00C0      		rjmp .L151
 302:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1180               		.loc 1 302 0 is_stmt 0 discriminator 1
 1181 028a 0FE0      		ldi r16,lo8(15)
 1182 028c 10E0      		ldi r17,0
 1183 028e 20E0      		ldi r18,0
 1184 0290 30E0      		ldi r19,0
 1185               	.LVL108:
 1186 0292 B901      		movw r22,r18
 1187 0294 A801      		movw r20,r16
 1188 0296 00C0      		rjmp 2f
 1189               		1:
 1190 0298 440F      		lsl r20
 1191 029a 551F      		rol r21
 1192 029c 661F      		rol r22
 1193 029e 771F      		rol r23
 1194               		2:
 1195 02a0 8A95      		dec r24
 1196 02a2 02F4      		brpl 1b
 1197 02a4 CB01      		movw r24,r22
 1198 02a6 BA01      		movw r22,r20
 1199 02a8 6095      		com r22
 1200 02aa 7095      		com r23
 1201 02ac 8095      		com r24
 1202 02ae 9095      		com r25
 1203 02b0 00C0      		rjmp .L117
 1204               	.LVL109:
 1205               	.L151:
 302:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1206               		.loc 1 302 0
 1207 02b2 60E0      		ldi r22,0
 1208 02b4 70E0      		ldi r23,0
 1209 02b6 CB01      		movw r24,r22
 1210               	.LVL110:
 1211               	.L117:
 303:../../../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1212               		.loc 1 303 0 is_stmt 1 discriminator 4
 1213 02b8 272D      		mov r18,r7
 1214 02ba 2695      		lsr r18
 1215 02bc 2695      		lsr r18
 1216 02be 2370      		andi r18,lo8(3)
 1217 02c0 422F      		mov r20,r18
 1218 02c2 50E0      		ldi r21,0
 1219 02c4 4230      		cpi r20,2
 1220 02c6 5105      		cpc r21,__zero_reg__
 1221 02c8 01F0      		breq .L119
 1222 02ca 4330      		cpi r20,3
 1223 02cc 5105      		cpc r21,__zero_reg__
 1224 02ce 01F0      		breq .L120
 1225 02d0 6829      		or r22,r8
 1226 02d2 7929      		or r23,r9
 1227 02d4 8A29      		or r24,r10
 1228 02d6 9B29      		or r25,r11
 1229               	.LVL111:
 1230 02d8 4130      		cpi r20,1
 1231 02da 5105      		cpc r21,__zero_reg__
 1232 02dc 01F0      		breq .L182
 304:../../../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1233               		.loc 1 304 0 discriminator 4
 1234 02de 0E94 0000 		call layer_and
 1235               	.LVL112:
 1236 02e2 00C0      		rjmp .L69
 1237               	.LVL113:
 1238               	.L119:
 306:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1239               		.loc 1 306 0
 1240 02e4 6829      		or r22,r8
 1241 02e6 7929      		or r23,r9
 1242 02e8 8A29      		or r24,r10
 1243 02ea 9B29      		or r25,r11
 1244               	.LVL114:
 1245 02ec 0E94 0000 		call layer_xor
 1246               	.LVL115:
 1247 02f0 00C0      		rjmp .L69
 1248               	.LVL116:
 1249               	.L120:
 307:../../../../tmk_core/common/action.c ****                     }
 1250               		.loc 1 307 0
 1251 02f2 0E94 0000 		call layer_and
 1252               	.LVL117:
 1253 02f6 C501      		movw r24,r10
 1254 02f8 B401      		movw r22,r8
 1255               	.L182:
 1256 02fa 0E94 0000 		call layer_or
 1257               	.LVL118:
 1258 02fe 00C0      		rjmp .L69
 1259               	.LVL119:
 1260               	.L76:
 1261               	.LBE5:
 315:../../../../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1262               		.loc 1 315 0
 1263 0300 8C2D      		mov r24,r12
 1264 0302 90E0      		ldi r25,0
 1265 0304 FC01      		movw r30,r24
 1266 0306 E05E      		subi r30,-32
 1267 0308 F109      		sbc r31,__zero_reg__
 1268 030a E531      		cpi r30,21
 1269 030c F105      		cpc r31,__zero_reg__
 1270 030e 00F0      		brlo .+2
 1271 0310 00C0      		rjmp .L122
 1272 0312 E050      		subi r30,lo8(-(gs(.L124)))
 1273 0314 F040      		sbci r31,hi8(-(gs(.L124)))
 1274 0316 0C94 0000 		jmp __tablejump2__
 1275               		.section	.progmem.gcc_sw_table.process_action
 1276               		.p2align	1
 1277               	.L124:
 1278 0020 0000      		.word gs(.L123)
 1279 0022 0000      		.word gs(.L123)
 1280 0024 0000      		.word gs(.L123)
 1281 0026 0000      		.word gs(.L123)
 1282 0028 0000      		.word gs(.L123)
 1283 002a 0000      		.word gs(.L123)
 1284 002c 0000      		.word gs(.L123)
 1285 002e 0000      		.word gs(.L123)
 1286 0030 0000      		.word gs(.L123)
 1287 0032 0000      		.word gs(.L123)
 1288 0034 0000      		.word gs(.L123)
 1289 0036 0000      		.word gs(.L123)
 1290 0038 0000      		.word gs(.L123)
 1291 003a 0000      		.word gs(.L123)
 1292 003c 0000      		.word gs(.L123)
 1293 003e 0000      		.word gs(.L123)
 1294 0040 0000      		.word gs(.L125)
 1295 0042 0000      		.word gs(.L126)
 1296 0044 0000      		.word gs(.L127)
 1297 0046 0000      		.word gs(.L128)
 1298 0048 0000      		.word gs(.L129)
 1299               		.section	.text.process_action
 1300               	.L123:
 1301 031a 0C2D      		mov r16,r12
 1302               	.LVL120:
 1303 031c 0F70      		andi r16,lo8(15)
 1304 031e 872D      		mov r24,r7
 1305 0320 8F71      		andi r24,lo8(31)
 318:../../../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1306               		.loc 1 318 0
 1307 0322 1123      		tst r17
 1308 0324 01F0      		breq .L130
 319:../../../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1309               		.loc 1 319 0
 1310 0326 0E94 0000 		call layer_on
 1311               	.LVL121:
 320:../../../../tmk_core/common/action.c ****                     } else {
 1312               		.loc 1 320 0
 1313 032a 802F      		mov r24,r16
 1314 032c 00C0      		rjmp .L177
 1315               	.L130:
 322:../../../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1316               		.loc 1 322 0
 1317 032e 0E94 0000 		call layer_off
 1318               	.LVL122:
 323:../../../../tmk_core/common/action.c ****                     }
 1319               		.loc 1 323 0
 1320 0332 802F      		mov r24,r16
 1321               	.L179:
 1322 0334 0E94 0000 		call unregister_mods
 1323               	.LVL123:
 1324 0338 00C0      		rjmp .L69
 1325               	.LVL124:
 1326               	.L125:
 328:../../../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1327               		.loc 1 328 0
 1328 033a 1123      		tst r17
 1329 033c 01F0      		breq .L131
 329:../../../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1330               		.loc 1 329 0
 1331 033e 0530      		cpi r16,lo8(5)
 1332 0340 00F0      		brlo .+2
 1333 0342 00C0      		rjmp .L69
 1334               	.L132:
 330:../../../../tmk_core/common/action.c ****                         }
 1335               		.loc 1 330 0
 1336 0344 872D      		mov r24,r7
 1337 0346 8F71      		andi r24,lo8(31)
 1338 0348 0E94 0000 		call layer_invert
 1339               	.LVL125:
 1340 034c 00C0      		rjmp .L69
 1341               	.L131:
 333:../../../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1342               		.loc 1 333 0
 1343 034e 0630      		cpi r16,lo8(6)
 1344 0350 00F0      		brlo .+2
 1345 0352 00C0      		rjmp .L69
 1346 0354 00C0      		rjmp .L132
 1347               	.L126:
 339:../../../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1348               		.loc 1 339 0
 1349 0356 1123      		tst r17
 1350 0358 01F0      		breq .L133
 1351               	.L134:
 339:../../../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1352               		.loc 1 339 0 is_stmt 0 discriminator 1
 1353 035a 872D      		mov r24,r7
 1354 035c 8F71      		andi r24,lo8(31)
 1355 035e 0E94 0000 		call layer_on
 1356               	.LVL126:
 1357 0362 00C0      		rjmp .L69
 1358               	.L127:
 343:../../../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1359               		.loc 1 343 0 is_stmt 1
 1360 0364 1123      		tst r17
 1361 0366 01F0      		breq .L134
 1362               	.L133:
 340:../../../../tmk_core/common/action.c ****                     break;
 1363               		.loc 1 340 0
 1364 0368 872D      		mov r24,r7
 1365 036a 8F71      		andi r24,lo8(31)
 1366 036c 0E94 0000 		call layer_off
 1367               	.LVL127:
 1368 0370 00C0      		rjmp .L69
 1369               	.L128:
 347:../../../../tmk_core/common/action.c ****                                     layer_clear();
 1370               		.loc 1 347 0
 1371 0372 1123      		tst r17
 1372 0374 01F0      		breq .L135
 347:../../../../tmk_core/common/action.c ****                                     layer_clear();
 1373               		.loc 1 347 0 is_stmt 0 discriminator 1
 1374 0376 872D      		mov r24,r7
 1375 0378 8F71      		andi r24,lo8(31)
 1376 037a 0E94 0000 		call layer_move
 1377               	.LVL128:
 1378 037e 00C0      		rjmp .L69
 1379               	.L135:
 348:../../../../tmk_core/common/action.c ****                     break;
 1380               		.loc 1 348 0 is_stmt 1
 1381 0380 0E94 0000 		call layer_clear
 1382               	.LVL129:
 1383 0384 00C0      		rjmp .L69
 1384               	.L129:
 376:../../../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1385               		.loc 1 376 0
 1386 0386 1123      		tst r17
 1387 0388 01F0      		breq .L136
 377:../../../../tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1388               		.loc 1 377 0
 1389 038a 172D      		mov r17,r7
 1390               	.LVL130:
 1391 038c 1F71      		andi r17,lo8(31)
 1392 038e 812F      		mov r24,r17
 1393 0390 0E94 0000 		call layer_on
 1394               	.LVL131:
 378:../../../../tmk_core/common/action.c ****                     } else {
 1395               		.loc 1 378 0
 1396 0394 63E0      		ldi r22,lo8(3)
 1397 0396 812F      		mov r24,r17
 1398 0398 0E94 0000 		call set_oneshot_layer
 1399               	.LVL132:
 1400 039c 00C0      		rjmp .L69
 1401               	.LVL133:
 1402               	.L136:
 380:../../../../tmk_core/common/action.c ****                         if (tap_count > 1) {
 1403               		.loc 1 380 0
 1404 039e 81E0      		ldi r24,lo8(1)
 1405 03a0 0E94 0000 		call clear_oneshot_layer_state
 1406               	.LVL134:
 381:../../../../tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1407               		.loc 1 381 0
 1408 03a4 0230      		cpi r16,lo8(2)
 1409 03a6 00F4      		brsh .+2
 1410 03a8 00C0      		rjmp .L69
 382:../../../../tmk_core/common/action.c ****                         }
 1411               		.loc 1 382 0
 1412 03aa 82E0      		ldi r24,lo8(2)
 1413 03ac 0E94 0000 		call clear_oneshot_layer_state
 1414               	.LVL135:
 1415 03b0 00C0      		rjmp .L69
 1416               	.L122:
 390:../../../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1417               		.loc 1 390 0
 1418 03b2 1123      		tst r17
 1419 03b4 01F0      		breq .L137
 391:../../../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1420               		.loc 1 391 0
 1421 03b6 0023      		tst r16
 1422 03b8 01F0      		breq .L134
 1423               	.LVL136:
 1424               	.L176:
 393:../../../../tmk_core/common/action.c ****                         } else {
 1425               		.loc 1 393 0
 1426 03ba 8C2D      		mov r24,r12
 1427 03bc 0E94 0000 		call register_code
 1428               	.LVL137:
 1429 03c0 00C0      		rjmp .L69
 1430               	.LVL138:
 1431               	.L137:
 399:../../../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1432               		.loc 1 399 0
 1433 03c2 0023      		tst r16
 1434 03c4 01F0      		breq .L133
 1435               	.L178:
 401:../../../../tmk_core/common/action.c ****                         } else {
 1436               		.loc 1 401 0
 1437 03c6 8C2D      		mov r24,r12
 1438 03c8 0E94 0000 		call unregister_code
 1439               	.LVL139:
 1440 03cc 00C0      		rjmp .L69
 1441               	.L77:
 415:../../../../tmk_core/common/action.c ****             break;
 1442               		.loc 1 415 0
 1443 03ce 472D      		mov r20,r7
 1444 03d0 4F70      		andi r20,lo8(15)
 1445 03d2 6C2D      		mov r22,r12
 1446 03d4 C701      		movw r24,r14
 1447 03d6 0E94 0000 		call action_get_macro
 1448               	.LVL140:
 1449 03da 0E94 0000 		call action_macro_play
 1450               	.LVL141:
 416:../../../../tmk_core/common/action.c **** #endif
 1451               		.loc 1 416 0
 1452 03de 00C0      		rjmp .L69
 1453               	.L78:
 420:../../../../tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 1454               		.loc 1 420 0
 1455 03e0 1111      		cpse r17,__zero_reg__
 1456 03e2 00C0      		rjmp .L69
 421:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 1457               		.loc 1 421 0
 1458 03e4 472D      		mov r20,r7
 1459 03e6 4F70      		andi r20,lo8(15)
 1460 03e8 50E0      		ldi r21,0
 1461 03ea 4230      		cpi r20,2
 1462 03ec 5105      		cpc r21,__zero_reg__
 1463 03ee 01F0      		breq .L138
 1464 03f0 04F4      		brge .L139
 1465 03f2 4115      		cp r20,__zero_reg__
 1466 03f4 5105      		cpc r21,__zero_reg__
 1467 03f6 01F0      		breq .L140
 1468 03f8 4130      		cpi r20,1
 1469 03fa 5105      		cpc r21,__zero_reg__
 1470 03fc 01F4      		brne .L69
 426:../../../../tmk_core/common/action.c ****                         break;
 1471               		.loc 1 426 0
 1472 03fe 0E94 0000 		call backlight_decrease
 1473               	.LVL142:
 427:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 1474               		.loc 1 427 0
 1475 0402 00C0      		rjmp .L69
 1476               	.L139:
 421:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 1477               		.loc 1 421 0
 1478 0404 4330      		cpi r20,3
 1479 0406 5105      		cpc r21,__zero_reg__
 1480 0408 01F0      		breq .L142
 1481 040a 4430      		cpi r20,4
 1482 040c 5105      		cpc r21,__zero_reg__
 1483 040e 01F4      		brne .L69
 435:../../../../tmk_core/common/action.c ****                         break;
 1484               		.loc 1 435 0
 1485 0410 8C2D      		mov r24,r12
 1486 0412 0E94 0000 		call backlight_level
 1487               	.LVL143:
 436:../../../../tmk_core/common/action.c ****                 }
 1488               		.loc 1 436 0
 1489 0416 00C0      		rjmp .L69
 1490               	.L140:
 423:../../../../tmk_core/common/action.c ****                         break;
 1491               		.loc 1 423 0
 1492 0418 0E94 0000 		call backlight_increase
 1493               	.LVL144:
 424:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 1494               		.loc 1 424 0
 1495 041c 00C0      		rjmp .L69
 1496               	.L138:
 429:../../../../tmk_core/common/action.c ****                         break;
 1497               		.loc 1 429 0
 1498 041e 0E94 0000 		call backlight_toggle
 1499               	.LVL145:
 430:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 1500               		.loc 1 430 0
 1501 0422 00C0      		rjmp .L69
 1502               	.L142:
 432:../../../../tmk_core/common/action.c ****                         break;
 1503               		.loc 1 432 0
 1504 0424 0E94 0000 		call backlight_step
 1505               	.LVL146:
 433:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 1506               		.loc 1 433 0
 1507 0428 00C0      		rjmp .L69
 1508               	.L79:
 445:../../../../tmk_core/common/action.c ****             break;
 1509               		.loc 1 445 0
 1510 042a 472D      		mov r20,r7
 1511 042c 4F70      		andi r20,lo8(15)
 1512 042e 6C2D      		mov r22,r12
 1513 0430 C701      		movw r24,r14
 1514 0432 0E94 0000 		call action_function
 1515               	.LVL147:
 1516               	.L69:
 456:../../../../tmk_core/common/action.c ****         record->event.pressed = false;
 1517               		.loc 1 456 0
 1518 0436 DD20      		tst r13
 1519 0438 01F0      		breq .L66
 456:../../../../tmk_core/common/action.c ****         record->event.pressed = false;
 1520               		.loc 1 456 0 is_stmt 0 discriminator 1
 1521 043a 0E94 0000 		call get_oneshot_layer_state
 1522               	.LVL148:
 1523 043e 80FD      		sbrc r24,0
 1524 0440 00C0      		rjmp .L66
 457:../../../../tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1525               		.loc 1 457 0 is_stmt 1
 1526 0442 F701      		movw r30,r14
 1527 0444 1282      		std Z+2,__zero_reg__
 458:../../../../tmk_core/common/action.c ****         process_record(record);
 1528               		.loc 1 458 0
 1529 0446 0E94 0000 		call get_oneshot_layer
 1530               	.LVL149:
 1531 044a 0E94 0000 		call layer_on
 1532               	.LVL150:
 459:../../../../tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 1533               		.loc 1 459 0
 1534 044e C701      		movw r24,r14
 1535 0450 0E94 0000 		call process_record
 1536               	.LVL151:
 460:../../../../tmk_core/common/action.c ****     }
 1537               		.loc 1 460 0
 1538 0454 0E94 0000 		call get_oneshot_layer
 1539               	.LVL152:
 1540               	/* epilogue start */
 463:../../../../tmk_core/common/action.c **** 
 1541               		.loc 1 463 0
 1542 0458 0F90      		pop __tmp_reg__
 1543 045a DF91      		pop r29
 1544 045c CF91      		pop r28
 1545 045e 1F91      		pop r17
 1546 0460 0F91      		pop r16
 1547 0462 FF90      		pop r15
 1548 0464 EF90      		pop r14
 1549               	.LVL153:
 1550 0466 DF90      		pop r13
 1551               	.LVL154:
 1552 0468 CF90      		pop r12
 1553               	.LVL155:
 1554 046a BF90      		pop r11
 1555 046c AF90      		pop r10
 1556 046e 9F90      		pop r9
 1557 0470 8F90      		pop r8
 1558 0472 7F90      		pop r7
 460:../../../../tmk_core/common/action.c ****     }
 1559               		.loc 1 460 0
 1560 0474 0C94 0000 		jmp layer_off
 1561               	.LVL156:
 1562               	.L66:
 1563               	/* epilogue start */
 463:../../../../tmk_core/common/action.c **** 
 1564               		.loc 1 463 0
 1565 0478 0F90      		pop __tmp_reg__
 1566 047a DF91      		pop r29
 1567 047c CF91      		pop r28
 1568 047e 1F91      		pop r17
 1569 0480 0F91      		pop r16
 1570 0482 FF90      		pop r15
 1571 0484 EF90      		pop r14
 1572               	.LVL157:
 1573 0486 DF90      		pop r13
 1574               	.LVL158:
 1575 0488 CF90      		pop r12
 1576               	.LVL159:
 1577 048a BF90      		pop r11
 1578 048c AF90      		pop r10
 1579 048e 9F90      		pop r9
 1580 0490 8F90      		pop r8
 1581 0492 7F90      		pop r7
 1582 0494 0895      		ret
 1583               		.cfi_endproc
 1584               	.LFE107:
 1586               		.section	.text.process_record,"ax",@progbits
 1587               	.global	process_record
 1589               	process_record:
 1590               	.LFB106:
  78:../../../../tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1591               		.loc 1 78 0
 1592               		.cfi_startproc
 1593               	.LVL160:
 1594 0000 0F93      		push r16
 1595               	.LCFI20:
 1596               		.cfi_def_cfa_offset 3
 1597               		.cfi_offset 16, -2
 1598 0002 1F93      		push r17
 1599               	.LCFI21:
 1600               		.cfi_def_cfa_offset 4
 1601               		.cfi_offset 17, -3
 1602 0004 CF93      		push r28
 1603               	.LCFI22:
 1604               		.cfi_def_cfa_offset 5
 1605               		.cfi_offset 28, -4
 1606 0006 DF93      		push r29
 1607               	.LCFI23:
 1608               		.cfi_def_cfa_offset 6
 1609               		.cfi_offset 29, -5
 1610               	/* prologue: function */
 1611               	/* frame size = 0 */
 1612               	/* stack size = 4 */
 1613               	.L__stack_usage = 4
 1614 0008 EC01      		movw r28,r24
 1615 000a 8881      		ld r24,Y
 1616               	.LVL161:
 1617 000c 9981      		ldd r25,Y+1
 1618               	.LBB8:
 1619               	.LBB9:
 1620               		.file 2 "../../../../tmk_core/common/keyboard.h"
   1:../../../../tmk_core/common/keyboard.h **** /*
   2:../../../../tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../../../tmk_core/common/keyboard.h **** 
   4:../../../../tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../../../tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../../../tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../../../tmk_core/common/keyboard.h **** (at your option) any later version.
   8:../../../../tmk_core/common/keyboard.h **** 
   9:../../../../tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../../../tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../../../tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../../../tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:../../../../tmk_core/common/keyboard.h **** 
  14:../../../../tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../../../tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../../../tmk_core/common/keyboard.h **** */
  17:../../../../tmk_core/common/keyboard.h **** 
  18:../../../../tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../../../tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:../../../../tmk_core/common/keyboard.h **** 
  21:../../../../tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:../../../../tmk_core/common/keyboard.h **** #include <stdint.h>
  23:../../../../tmk_core/common/keyboard.h **** 
  24:../../../../tmk_core/common/keyboard.h **** 
  25:../../../../tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:../../../../tmk_core/common/keyboard.h **** extern "C" {
  27:../../../../tmk_core/common/keyboard.h **** #endif
  28:../../../../tmk_core/common/keyboard.h **** 
  29:../../../../tmk_core/common/keyboard.h **** /* key matrix position */
  30:../../../../tmk_core/common/keyboard.h **** typedef struct {
  31:../../../../tmk_core/common/keyboard.h ****     uint8_t col;
  32:../../../../tmk_core/common/keyboard.h ****     uint8_t row;
  33:../../../../tmk_core/common/keyboard.h **** } keypos_t;
  34:../../../../tmk_core/common/keyboard.h **** 
  35:../../../../tmk_core/common/keyboard.h **** /* key event */
  36:../../../../tmk_core/common/keyboard.h **** typedef struct {
  37:../../../../tmk_core/common/keyboard.h ****     keypos_t key;
  38:../../../../tmk_core/common/keyboard.h ****     bool     pressed;
  39:../../../../tmk_core/common/keyboard.h ****     uint16_t time;
  40:../../../../tmk_core/common/keyboard.h **** } keyevent_t;
  41:../../../../tmk_core/common/keyboard.h **** 
  42:../../../../tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../../../tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../../../tmk_core/common/keyboard.h **** 
  45:../../../../tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:../../../../tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../../../tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../../../tmk_core/common/keyboard.h ****  */
  49:../../../../tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 1621               		.loc 2 49 0
 1622 000e 2B81      		ldd r18,Y+3
 1623 0010 3C81      		ldd r19,Y+4
 1624 0012 232B      		or r18,r19
 1625 0014 01F0      		breq .L185
 1626 0016 9F3F      		cpi r25,lo8(-1)
 1627 0018 01F4      		brne .L187
 1628 001a 8F3F      		cpi r24,lo8(-1)
 1629 001c 01F0      		breq .L185
 1630               	.L187:
 1631               	.LBE9:
 1632               	.LBE8:
  81:../../../../tmk_core/common/action.c ****         return;
 1633               		.loc 1 81 0
 1634 001e CE01      		movw r24,r28
 1635 0020 0E94 0000 		call process_record_quantum
 1636               	.LVL162:
 1637 0024 8823      		tst r24
 1638 0026 01F0      		breq .L185
  84:../../../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1639               		.loc 1 84 0
 1640 0028 6881      		ld r22,Y
 1641 002a 7981      		ldd r23,Y+1
 1642 002c 8A81      		ldd r24,Y+2
 1643 002e 0E94 0000 		call store_or_get_action
 1644               	.LVL163:
 1645 0032 8C01      		movw r16,r24
 1646               	.LVL164:
  87:../../../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1647               		.loc 1 87 0
 1648 0034 0E94 0000 		call layer_debug
 1649               	.LVL165:
  88:../../../../tmk_core/common/action.c **** #endif
 1650               		.loc 1 88 0
 1651 0038 0E94 0000 		call default_layer_debug
 1652               	.LVL166:
  92:../../../../tmk_core/common/action.c **** }
 1653               		.loc 1 92 0
 1654 003c B801      		movw r22,r16
 1655 003e CE01      		movw r24,r28
 1656 0040 0E94 0000 		call process_action
 1657               	.LVL167:
 1658               	.L185:
 1659               	/* epilogue start */
  93:../../../../tmk_core/common/action.c **** 
 1660               		.loc 1 93 0
 1661 0044 DF91      		pop r29
 1662 0046 CF91      		pop r28
 1663               	.LVL168:
 1664 0048 1F91      		pop r17
 1665 004a 0F91      		pop r16
 1666               	.LVL169:
 1667 004c 0895      		ret
 1668               		.cfi_endproc
 1669               	.LFE106:
 1671               		.section	.text.process_record_nocache,"ax",@progbits
 1672               	.global	process_record_nocache
 1674               	process_record_nocache:
 1675               	.LFB104:
  67:../../../../tmk_core/common/action.c ****     process_record(record);
 1676               		.loc 1 67 0
 1677               		.cfi_startproc
 1678               	.LVL170:
 1679               	/* prologue: function */
 1680               	/* frame size = 0 */
 1681               	/* stack size = 0 */
 1682               	.L__stack_usage = 0
  68:../../../../tmk_core/common/action.c **** }
 1683               		.loc 1 68 0
 1684 0000 0C94 0000 		jmp process_record
 1685               	.LVL171:
 1686               		.cfi_endproc
 1687               	.LFE104:
 1689               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1690               	.global	clear_keyboard_but_mods
 1692               	clear_keyboard_but_mods:
 1693               	.LFB113:
 614:../../../../tmk_core/common/action.c ****     }
 615:../../../../tmk_core/common/action.c **** }
 616:../../../../tmk_core/common/action.c **** 
 617:../../../../tmk_core/common/action.c **** void clear_keyboard(void)
 618:../../../../tmk_core/common/action.c **** {
 619:../../../../tmk_core/common/action.c ****     clear_mods();
 620:../../../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 621:../../../../tmk_core/common/action.c **** }
 622:../../../../tmk_core/common/action.c **** 
 623:../../../../tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 624:../../../../tmk_core/common/action.c **** {
 1694               		.loc 1 624 0
 1695               		.cfi_startproc
 1696               	/* prologue: function */
 1697               	/* frame size = 0 */
 1698               	/* stack size = 0 */
 1699               	.L__stack_usage = 0
 625:../../../../tmk_core/common/action.c ****     clear_weak_mods();
 1700               		.loc 1 625 0
 1701 0000 0E94 0000 		call clear_weak_mods
 1702               	.LVL172:
 626:../../../../tmk_core/common/action.c ****     clear_macro_mods();
 1703               		.loc 1 626 0
 1704 0004 0E94 0000 		call clear_macro_mods
 1705               	.LVL173:
 627:../../../../tmk_core/common/action.c ****     clear_keys();
 1706               		.loc 1 627 0
 1707 0008 0E94 0000 		call clear_keys
 1708               	.LVL174:
 628:../../../../tmk_core/common/action.c ****     send_keyboard_report();
 1709               		.loc 1 628 0
 1710 000c 0E94 0000 		call send_keyboard_report
 1711               	.LVL175:
 629:../../../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 630:../../../../tmk_core/common/action.c ****     mousekey_clear();
 1712               		.loc 1 630 0
 1713 0010 0E94 0000 		call mousekey_clear
 1714               	.LVL176:
 631:../../../../tmk_core/common/action.c ****     mousekey_send();
 1715               		.loc 1 631 0
 1716 0014 0E94 0000 		call mousekey_send
 1717               	.LVL177:
 632:../../../../tmk_core/common/action.c **** #endif
 633:../../../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 634:../../../../tmk_core/common/action.c ****     host_system_send(0);
 1718               		.loc 1 634 0
 1719 0018 80E0      		ldi r24,0
 1720 001a 90E0      		ldi r25,0
 1721 001c 0E94 0000 		call host_system_send
 1722               	.LVL178:
 635:../../../../tmk_core/common/action.c ****     host_consumer_send(0);
 1723               		.loc 1 635 0
 1724 0020 80E0      		ldi r24,0
 1725 0022 90E0      		ldi r25,0
 1726 0024 0C94 0000 		jmp host_consumer_send
 1727               	.LVL179:
 1728               		.cfi_endproc
 1729               	.LFE113:
 1731               		.section	.text.clear_keyboard,"ax",@progbits
 1732               	.global	clear_keyboard
 1734               	clear_keyboard:
 1735               	.LFB112:
 618:../../../../tmk_core/common/action.c ****     clear_mods();
 1736               		.loc 1 618 0
 1737               		.cfi_startproc
 1738               	/* prologue: function */
 1739               	/* frame size = 0 */
 1740               	/* stack size = 0 */
 1741               	.L__stack_usage = 0
 619:../../../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1742               		.loc 1 619 0
 1743 0000 0E94 0000 		call clear_mods
 1744               	.LVL180:
 620:../../../../tmk_core/common/action.c **** }
 1745               		.loc 1 620 0
 1746 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1747               	.LVL181:
 1748               		.cfi_endproc
 1749               	.LFE112:
 1751               		.section	.text.is_tap_key,"ax",@progbits
 1752               	.global	is_tap_key
 1754               	is_tap_key:
 1755               	.LFB114:
 636:../../../../tmk_core/common/action.c **** #endif
 637:../../../../tmk_core/common/action.c **** }
 638:../../../../tmk_core/common/action.c **** 
 639:../../../../tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 640:../../../../tmk_core/common/action.c **** {
 1756               		.loc 1 640 0
 1757               		.cfi_startproc
 1758               	.LVL182:
 1759               	/* prologue: function */
 1760               	/* frame size = 0 */
 1761               	/* stack size = 0 */
 1762               	.L__stack_usage = 0
 641:../../../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1763               		.loc 1 641 0
 1764 0000 0E94 0000 		call layer_switch_get_action
 1765               	.LVL183:
 642:../../../../tmk_core/common/action.c **** 
 643:../../../../tmk_core/common/action.c ****     switch (action.kind.id) {
 1766               		.loc 1 643 0
 1767 0004 292F      		mov r18,r25
 1768 0006 2295      		swap r18
 1769 0008 2F70      		andi r18,lo8(15)
 1770 000a 30E0      		ldi r19,0
 1771 000c 2C30      		cpi r18,12
 1772 000e 3105      		cpc r19,__zero_reg__
 1773 0010 04F4      		brge .L201
 1774 0012 2A30      		cpi r18,10
 1775 0014 3105      		cpc r19,__zero_reg__
 1776 0016 04F4      		brge .L202
 1777 0018 2250      		subi r18,2
 1778 001a 3109      		sbc r19,__zero_reg__
 1779 001c 2230      		cpi r18,2
 1780 001e 3105      		cpc r19,__zero_reg__
 1781 0020 00F4      		brsh .L206
 1782 0022 00C0      		rjmp .L202
 1783               	.L201:
 1784 0024 2C30      		cpi r18,12
 1785 0026 3105      		cpc r19,__zero_reg__
 1786 0028 01F0      		breq .L203
 1787 002a 2F30      		cpi r18,15
 1788 002c 3105      		cpc r19,__zero_reg__
 1789 002e 01F0      		breq .L203
 1790 0030 00C0      		rjmp .L206
 1791               	.L202:
 1792               	.LVL184:
 644:../../../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 645:../../../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 646:../../../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 647:../../../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 648:../../../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1793               		.loc 1 648 0
 1794 0032 803F      		cpi r24,lo8(-16)
 1795 0034 01F0      		breq .L207
 1796 0036 00F4      		brsh .L205
 1797 0038 803E      		cpi r24,lo8(-32)
 1798 003a 00F4      		brsh .L206
 1799 003c 00C0      		rjmp .L207
 1800               	.L205:
 1801 003e 843F      		cpi r24,lo8(-12)
 1802 0040 01F4      		brne .L206
 1803 0042 00C0      		rjmp .L207
 1804               	.LVL185:
 1805               	.L203:
 649:../../../../tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 650:../../../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 651:../../../../tmk_core/common/action.c ****                 case OP_ONESHOT:
 652:../../../../tmk_core/common/action.c ****                     return true;
 653:../../../../tmk_core/common/action.c ****             }
 654:../../../../tmk_core/common/action.c ****             return false;
 655:../../../../tmk_core/common/action.c ****         case ACT_MACRO:
 656:../../../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 657:../../../../tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1806               		.loc 1 657 0
 1807 0044 93FB      		bst r25,3
 1808 0046 8827      		clr r24
 1809 0048 80F9      		bld r24,0
 1810 004a 0895      		ret
 1811               	.LVL186:
 1812               	.L206:
 658:../../../../tmk_core/common/action.c ****             return false;
 659:../../../../tmk_core/common/action.c ****     }
 660:../../../../tmk_core/common/action.c ****     return false;
 1813               		.loc 1 660 0
 1814 004c 80E0      		ldi r24,0
 1815               	.LVL187:
 1816 004e 0895      		ret
 1817               	.LVL188:
 1818               	.L207:
 652:../../../../tmk_core/common/action.c ****             }
 1819               		.loc 1 652 0
 1820 0050 81E0      		ldi r24,lo8(1)
 1821               	.LVL189:
 661:../../../../tmk_core/common/action.c **** }
 1822               		.loc 1 661 0
 1823 0052 0895      		ret
 1824               		.cfi_endproc
 1825               	.LFE114:
 1827               		.section	.text.debug_event,"ax",@progbits
 1828               	.global	debug_event
 1830               	debug_event:
 1831               	.LFB115:
 662:../../../../tmk_core/common/action.c **** 
 663:../../../../tmk_core/common/action.c **** 
 664:../../../../tmk_core/common/action.c **** /*
 665:../../../../tmk_core/common/action.c ****  * debug print
 666:../../../../tmk_core/common/action.c ****  */
 667:../../../../tmk_core/common/action.c **** void debug_event(keyevent_t event)
 668:../../../../tmk_core/common/action.c **** {
 1832               		.loc 1 668 0
 1833               		.cfi_startproc
 1834 0000 CF93      		push r28
 1835               	.LCFI24:
 1836               		.cfi_def_cfa_offset 3
 1837               		.cfi_offset 28, -2
 1838 0002 DF93      		push r29
 1839               	.LCFI25:
 1840               		.cfi_def_cfa_offset 4
 1841               		.cfi_offset 29, -3
 1842 0004 00D0      		rcall .
 1843 0006 00D0      		rcall .
 1844 0008 1F92      		push __zero_reg__
 1845               	.LCFI26:
 1846               		.cfi_def_cfa_offset 9
 1847 000a CDB7      		in r28,__SP_L__
 1848 000c DEB7      		in r29,__SP_H__
 1849               	.LCFI27:
 1850               		.cfi_def_cfa_register 28
 1851               	/* prologue: function */
 1852               	/* frame size = 5 */
 1853               	/* stack size = 7 */
 1854               	.L__stack_usage = 7
 1855               	/* epilogue start */
 669:../../../../tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 670:../../../../tmk_core/common/action.c **** }
 1856               		.loc 1 670 0
 1857 000e 0F90      		pop __tmp_reg__
 1858 0010 0F90      		pop __tmp_reg__
 1859 0012 0F90      		pop __tmp_reg__
 1860 0014 0F90      		pop __tmp_reg__
 1861 0016 0F90      		pop __tmp_reg__
 1862 0018 DF91      		pop r29
 1863 001a CF91      		pop r28
 1864 001c 0895      		ret
 1865               		.cfi_endproc
 1866               	.LFE115:
 1868               		.section	.text.debug_record,"ax",@progbits
 1869               	.global	debug_record
 1871               	debug_record:
 1872               	.LFB116:
 671:../../../../tmk_core/common/action.c **** 
 672:../../../../tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 673:../../../../tmk_core/common/action.c **** {
 1873               		.loc 1 673 0
 1874               		.cfi_startproc
 1875 0000 CF93      		push r28
 1876               	.LCFI28:
 1877               		.cfi_def_cfa_offset 3
 1878               		.cfi_offset 28, -2
 1879 0002 DF93      		push r29
 1880               	.LCFI29:
 1881               		.cfi_def_cfa_offset 4
 1882               		.cfi_offset 29, -3
 1883 0004 00D0      		rcall .
 1884 0006 00D0      		rcall .
 1885 0008 00D0      		rcall .
 1886               	.LCFI30:
 1887               		.cfi_def_cfa_offset 10
 1888 000a CDB7      		in r28,__SP_L__
 1889 000c DEB7      		in r29,__SP_H__
 1890               	.LCFI31:
 1891               		.cfi_def_cfa_register 28
 1892               	/* prologue: function */
 1893               	/* frame size = 6 */
 1894               	/* stack size = 8 */
 1895               	.L__stack_usage = 8
 1896               	/* epilogue start */
 674:../../../../tmk_core/common/action.c ****     debug_event(record.event);
 675:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 676:../../../../tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 677:../../../../tmk_core/common/action.c **** #endif
 678:../../../../tmk_core/common/action.c **** }
 1897               		.loc 1 678 0
 1898 000e 2696      		adiw r28,6
 1899 0010 0FB6      		in __tmp_reg__,__SREG__
 1900 0012 F894      		cli
 1901 0014 DEBF      		out __SP_H__,r29
 1902 0016 0FBE      		out __SREG__,__tmp_reg__
 1903 0018 CDBF      		out __SP_L__,r28
 1904 001a DF91      		pop r29
 1905 001c CF91      		pop r28
 1906 001e 0895      		ret
 1907               		.cfi_endproc
 1908               	.LFE116:
 1910               		.section	.text.debug_action,"ax",@progbits
 1911               	.global	debug_action
 1913               	debug_action:
 1914               	.LFB117:
 679:../../../../tmk_core/common/action.c **** 
 680:../../../../tmk_core/common/action.c **** void debug_action(action_t action)
 681:../../../../tmk_core/common/action.c **** {
 1915               		.loc 1 681 0
 1916               		.cfi_startproc
 1917               	.LVL190:
 1918               	/* prologue: function */
 1919               	/* frame size = 0 */
 1920               	/* stack size = 0 */
 1921               	.L__stack_usage = 0
 1922 0000 0895      		ret
 1923               		.cfi_endproc
 1924               	.LFE117:
 1926               		.text
 1927               	.Letext0:
 1928               		.file 3 "/usr/local/Cellar/avr-gcc/4.9.3/avr/include/stdint.h"
 1929               		.file 4 "../../../../tmk_core/common/keycode.h"
 1930               		.file 5 "../../../../tmk_core/common/action_code.h"
 1931               		.file 6 "../../../../tmk_core/common/action_macro.h"
 1932               		.file 7 "../../../../tmk_core/common/action.h"
 1933               		.file 8 "../../../../tmk_core/common/action_util.h"
 1934               		.file 9 "../../../../tmk_core/common/action_tapping.h"
 1935               		.file 10 "../../../../tmk_core/common/host.h"
 1936               		.file 11 "../../../../tmk_core/common/action_layer.h"
 1937               		.file 12 "../../../../tmk_core/common/mousekey.h"
 1938               		.file 13 "../../../../tmk_core/common/command.h"
 1939               		.file 14 "../../../../tmk_core/common/backlight.h"
 1940               		.file 15 "../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:4      *ABS*:000000000000003f __SREG__
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:13     .text.action_exec:0000000000000000 action_exec
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:93     .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:112    .text.register_code:0000000000000000 register_code
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:443    .text.unregister_code:0000000000000000 unregister_code
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:578    .text.register_mods:0000000000000000 register_mods
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:604    .text.unregister_mods:0000000000000000 unregister_mods
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:630    .text.process_action:0000000000000000 process_action
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:1589   .text.process_record:0000000000000000 process_record
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:1674   .text.process_record_nocache:0000000000000000 process_record_nocache
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:1692   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:1734   .text.clear_keyboard:0000000000000000 clear_keyboard
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:1754   .text.is_tap_key:0000000000000000 is_tap_key
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:1830   .text.debug_event:0000000000000000 debug_event
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:1871   .text.debug_record:0000000000000000 debug_record
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccriiSJW.s:1913   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
command_proc
add_mods
host_system_send
host_consumer_send
del_mods
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_off
mousekey_send
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
set_oneshot_layer
action_get_macro
action_macro_play
backlight_decrease
backlight_level
backlight_increase
backlight_toggle
backlight_step
action_function
get_oneshot_layer_state
get_oneshot_layer
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
mousekey_clear
clear_mods
layer_switch_get_action
