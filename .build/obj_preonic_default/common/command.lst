   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_param_inc,"ax",@progbits
  12               	mousekey_param_inc:
  13               	.LFB117:
  14               		.file 1 "../../tmk_core/common/command.c"
   1:../../tmk_core/common/command.c **** /*
   2:../../tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/command.c **** 
   4:../../tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/command.c **** (at your option) any later version.
   8:../../tmk_core/common/command.c **** 
   9:../../tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/command.c **** GNU General Public License for more details.
  13:../../tmk_core/common/command.c **** 
  14:../../tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/command.c **** */
  17:../../tmk_core/common/command.c **** #include <stdint.h>
  18:../../tmk_core/common/command.c **** #include <stdbool.h>
  19:../../tmk_core/common/command.c **** #include "wait.h"
  20:../../tmk_core/common/command.c **** #include "keycode.h"
  21:../../tmk_core/common/command.c **** #include "host.h"
  22:../../tmk_core/common/command.c **** #include "keymap.h"
  23:../../tmk_core/common/command.c **** #include "print.h"
  24:../../tmk_core/common/command.c **** #include "debug.h"
  25:../../tmk_core/common/command.c **** #include "util.h"
  26:../../tmk_core/common/command.c **** #include "timer.h"
  27:../../tmk_core/common/command.c **** #include "keyboard.h"
  28:../../tmk_core/common/command.c **** #include "bootloader.h"
  29:../../tmk_core/common/command.c **** #include "action_layer.h"
  30:../../tmk_core/common/command.c **** #include "action_util.h"
  31:../../tmk_core/common/command.c **** #include "eeconfig.h"
  32:../../tmk_core/common/command.c **** #include "sleep_led.h"
  33:../../tmk_core/common/command.c **** #include "led.h"
  34:../../tmk_core/common/command.c **** #include "command.h"
  35:../../tmk_core/common/command.c **** #include "backlight.h"
  36:../../tmk_core/common/command.c **** #include "quantum.h"
  37:../../tmk_core/common/command.c **** 
  38:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  39:../../tmk_core/common/command.c **** #include "mousekey.h"
  40:../../tmk_core/common/command.c **** #endif
  41:../../tmk_core/common/command.c **** 
  42:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  43:../../tmk_core/common/command.c **** 	#include "usb_keyboard.h"
  44:../../tmk_core/common/command.c **** 		#ifdef EXTRAKEY_ENABLE
  45:../../tmk_core/common/command.c **** 		#include "usb_extra.h"
  46:../../tmk_core/common/command.c **** 	#endif
  47:../../tmk_core/common/command.c **** #endif
  48:../../tmk_core/common/command.c **** 
  49:../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  50:../../tmk_core/common/command.c **** 	#include "usbdrv.h"
  51:../../tmk_core/common/command.c **** #endif
  52:../../tmk_core/common/command.c **** 
  53:../../tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
  54:../../tmk_core/common/command.c ****     #include "audio.h"
  55:../../tmk_core/common/command.c **** #endif /* AUDIO_ENABLE */
  56:../../tmk_core/common/command.c **** 
  57:../../tmk_core/common/command.c **** 
  58:../../tmk_core/common/command.c **** static bool command_common(uint8_t code);
  59:../../tmk_core/common/command.c **** static void command_common_help(void);
  60:../../tmk_core/common/command.c **** static void print_version(void);
  61:../../tmk_core/common/command.c **** static void print_status(void);
  62:../../tmk_core/common/command.c **** static bool command_console(uint8_t code);
  63:../../tmk_core/common/command.c **** static void command_console_help(void);
  64:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  65:../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  66:../../tmk_core/common/command.c **** static void mousekey_console_help(void);
  67:../../tmk_core/common/command.c **** #endif
  68:../../tmk_core/common/command.c **** 
  69:../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  70:../../tmk_core/common/command.c **** 
  71:../../tmk_core/common/command.c **** 
  72:../../tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  73:../../tmk_core/common/command.c **** 
  74:../../tmk_core/common/command.c **** 
  75:../../tmk_core/common/command.c **** bool command_proc(uint8_t code)
  76:../../tmk_core/common/command.c **** {
  77:../../tmk_core/common/command.c ****     switch (command_state) {
  78:../../tmk_core/common/command.c ****         case ONESHOT:
  79:../../tmk_core/common/command.c ****             if (!IS_COMMAND())
  80:../../tmk_core/common/command.c ****                 return false;
  81:../../tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  82:../../tmk_core/common/command.c ****             break;
  83:../../tmk_core/common/command.c ****         case CONSOLE:
  84:../../tmk_core/common/command.c ****             if (IS_COMMAND())
  85:../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  86:../../tmk_core/common/command.c ****             else
  87:../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  88:../../tmk_core/common/command.c ****             break;
  89:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  90:../../tmk_core/common/command.c ****         case MOUSEKEY:
  91:../../tmk_core/common/command.c ****             mousekey_console(code);
  92:../../tmk_core/common/command.c ****             break;
  93:../../tmk_core/common/command.c **** #endif
  94:../../tmk_core/common/command.c ****         default:
  95:../../tmk_core/common/command.c ****             command_state = ONESHOT;
  96:../../tmk_core/common/command.c ****             return false;
  97:../../tmk_core/common/command.c ****     }
  98:../../tmk_core/common/command.c ****     return true;
  99:../../tmk_core/common/command.c **** }
 100:../../tmk_core/common/command.c **** 
 101:../../tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
 102:../../tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
 103:../../tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
 104:../../tmk_core/common/command.c **** bool command_extra(uint8_t code)
 105:../../tmk_core/common/command.c **** {
 106:../../tmk_core/common/command.c ****     (void)code;
 107:../../tmk_core/common/command.c ****     return false;
 108:../../tmk_core/common/command.c **** }
 109:../../tmk_core/common/command.c **** 
 110:../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 111:../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 112:../../tmk_core/common/command.c **** {
 113:../../tmk_core/common/command.c ****     (void)code;
 114:../../tmk_core/common/command.c ****     return false;
 115:../../tmk_core/common/command.c **** }
 116:../../tmk_core/common/command.c **** 
 117:../../tmk_core/common/command.c **** 
 118:../../tmk_core/common/command.c **** /***********************************************************
 119:../../tmk_core/common/command.c ****  * Command common
 120:../../tmk_core/common/command.c ****  ***********************************************************/
 121:../../tmk_core/common/command.c **** static void command_common_help(void)
 122:../../tmk_core/common/command.c **** {
 123:../../tmk_core/common/command.c **** 	print(                            "\n\t- Magic -\n"
 124:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG       ) ":	Debug Message Toggle\n"
 125:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MATRIX) ":	Matrix Debug Mode Toggle - Show keypresses in matrix grid\n"
 126:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_KBD   ) ":	Keyboard Debug Toggle - Show keypress report\n"
 127:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MOUSE ) ":	Debug Mouse Toggle\n"
 128:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_VERSION     ) ":	Version\n"
 129:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_STATUS      ) ":	Status\n"
 130:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_CONSOLE     ) ":	Activate Console Mode\n"
 131:../../tmk_core/common/command.c **** 
 132:../../tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 133:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0      ) ":	Switch to Layer 0\n"
 134:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER1      ) ":	Switch to Layer 1\n"
 135:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER2      ) ":	Switch to Layer 2\n"
 136:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER3      ) ":	Switch to Layer 3\n"
 137:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER4      ) ":	Switch to Layer 4\n"
 138:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER5      ) ":	Switch to Layer 5\n"
 139:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER6      ) ":	Switch to Layer 6\n"
 140:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER7      ) ":	Switch to Layer 7\n"
 141:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER8      ) ":	Switch to Layer 8\n"
 142:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER9      ) ":	Switch to Layer 9\n"
 143:../../tmk_core/common/command.c **** #endif
 144:../../tmk_core/common/command.c **** 
 145:../../tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 146:../../tmk_core/common/command.c **** 		                            "F1-F10:	Switch to Layer 0-9 (F10 = L0)\n"
 147:../../tmk_core/common/command.c **** #endif
 148:../../tmk_core/common/command.c **** 
 149:../../tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 150:../../tmk_core/common/command.c **** 		                            "0-9:	Switch to Layer 0-9\n"
 151:../../tmk_core/common/command.c **** #endif
 152:../../tmk_core/common/command.c **** 
 153:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT1 ) ":	Switch to Layer 0 (alternate key 1)\n"
 154:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT2 ) ":	Switch to Layer 0 (alternate key 2)\n"
 155:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_BOOTLOADER  ) ":	Jump to Bootloader (Reset)\n"
 156:../../tmk_core/common/command.c **** 
 157:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 158:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_LOCK        ) ":	Lock\n"
 159:../../tmk_core/common/command.c **** #endif
 160:../../tmk_core/common/command.c **** 
 161:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 162:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_EEPROM      ) ":	Print EEPROM Settings\n"
 163:../../tmk_core/common/command.c **** #endif
 164:../../tmk_core/common/command.c **** 
 165:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 166:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_NKRO        ) ":	NKRO Toggle\n"
 167:../../tmk_core/common/command.c **** #endif
 168:../../tmk_core/common/command.c **** 
 169:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 170:../../tmk_core/common/command.c **** 		STR(MAGIC_KEY_SLEEP_LED   ) ":	Sleep LED Test\n"
 171:../../tmk_core/common/command.c **** #endif
 172:../../tmk_core/common/command.c ****     );
 173:../../tmk_core/common/command.c **** }
 174:../../tmk_core/common/command.c **** 
 175:../../tmk_core/common/command.c **** static void print_version(void)
 176:../../tmk_core/common/command.c **** {
 177:../../tmk_core/common/command.c **** 	// print version & information
 178:../../tmk_core/common/command.c ****     print("\n\t- Version -\n");
 179:../../tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 180:../../tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 181:../../tmk_core/common/command.c ****           "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 182:../../tmk_core/common/command.c ****           "VER: " STR(DEVICE_VER) "\n");
 183:../../tmk_core/common/command.c ****     print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 184:../../tmk_core/common/command.c **** 
 185:../../tmk_core/common/command.c ****     /* build options */
 186:../../tmk_core/common/command.c ****     print("OPTIONS:"
 187:../../tmk_core/common/command.c **** 
 188:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 189:../../tmk_core/common/command.c **** 	    " PJRC"
 190:../../tmk_core/common/command.c **** #endif
 191:../../tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 192:../../tmk_core/common/command.c **** 	    " LUFA"
 193:../../tmk_core/common/command.c **** #endif
 194:../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 195:../../tmk_core/common/command.c **** 	    " VUSB"
 196:../../tmk_core/common/command.c **** #endif
 197:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 198:../../tmk_core/common/command.c **** 	    " BOOTMAGIC"
 199:../../tmk_core/common/command.c **** #endif
 200:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 201:../../tmk_core/common/command.c **** 	    " MOUSEKEY"
 202:../../tmk_core/common/command.c **** #endif
 203:../../tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 204:../../tmk_core/common/command.c **** 	    " EXTRAKEY"
 205:../../tmk_core/common/command.c **** #endif
 206:../../tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 207:../../tmk_core/common/command.c **** 	    " CONSOLE"
 208:../../tmk_core/common/command.c **** #endif
 209:../../tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 210:../../tmk_core/common/command.c **** 	    " COMMAND"
 211:../../tmk_core/common/command.c **** #endif
 212:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 213:../../tmk_core/common/command.c **** 	    " NKRO"
 214:../../tmk_core/common/command.c **** #endif
 215:../../tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 216:../../tmk_core/common/command.c **** 	    " KEYMAP_SECTION"
 217:../../tmk_core/common/command.c **** #endif
 218:../../tmk_core/common/command.c **** 
 219:../../tmk_core/common/command.c **** 	    " " STR(BOOTLOADER_SIZE) "\n");
 220:../../tmk_core/common/command.c **** 
 221:../../tmk_core/common/command.c ****     print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 222:../../tmk_core/common/command.c **** #if defined(__AVR__)
 223:../../tmk_core/common/command.c ****           " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 224:../../tmk_core/common/command.c ****           " AVR_ARCH: avr" STR(__AVR_ARCH__)
 225:../../tmk_core/common/command.c **** #endif
 226:../../tmk_core/common/command.c **** 		  "\n");
 227:../../tmk_core/common/command.c **** 
 228:../../tmk_core/common/command.c **** 	return;
 229:../../tmk_core/common/command.c **** }
 230:../../tmk_core/common/command.c **** 
 231:../../tmk_core/common/command.c **** static void print_status(void)
 232:../../tmk_core/common/command.c **** {
 233:../../tmk_core/common/command.c **** 
 234:../../tmk_core/common/command.c ****     print("\n\t- Status -\n");
 235:../../tmk_core/common/command.c **** 
 236:../../tmk_core/common/command.c ****     print_val_hex8(host_keyboard_leds());
 237:../../tmk_core/common/command.c ****     print_val_hex8(keyboard_protocol);
 238:../../tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 239:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 240:../../tmk_core/common/command.c ****     print_val_hex8(keyboard_nkro);
 241:../../tmk_core/common/command.c **** #endif
 242:../../tmk_core/common/command.c ****     print_val_hex32(timer_read32());
 243:../../tmk_core/common/command.c **** 
 244:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 245:../../tmk_core/common/command.c ****     print_val_hex8(UDCON);
 246:../../tmk_core/common/command.c ****     print_val_hex8(UDIEN);
 247:../../tmk_core/common/command.c ****     print_val_hex8(UDINT);
 248:../../tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_leds);
 249:../../tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_idle_count);
 250:../../tmk_core/common/command.c **** #endif
 251:../../tmk_core/common/command.c **** 
 252:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 253:../../tmk_core/common/command.c **** #   if USB_COUNT_SOF
 254:../../tmk_core/common/command.c ****     print_val_hex8(usbSofCount);
 255:../../tmk_core/common/command.c **** #   endif
 256:../../tmk_core/common/command.c **** #endif
 257:../../tmk_core/common/command.c **** 	return;
 258:../../tmk_core/common/command.c **** }
 259:../../tmk_core/common/command.c **** 
 260:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 261:../../tmk_core/common/command.c **** static void print_eeconfig(void)
 262:../../tmk_core/common/command.c **** {
 263:../../tmk_core/common/command.c **** #ifndef NO_PRINT
 264:../../tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 265:../../tmk_core/common/command.c **** 
 266:../../tmk_core/common/command.c ****     debug_config_t dc;
 267:../../tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 268:../../tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 269:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 270:../../tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 271:../../tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 272:../../tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 273:../../tmk_core/common/command.c **** 
 274:../../tmk_core/common/command.c ****     keymap_config_t kc;
 275:../../tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 276:../../tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 277:../../tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 278:../../tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 279:../../tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 280:../../tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 281:../../tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 282:../../tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 283:../../tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 284:../../tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 285:../../tmk_core/common/command.c **** 
 286:../../tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 287:../../tmk_core/common/command.c ****     backlight_config_t bc;
 288:../../tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 289:../../tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 290:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 291:../../tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 292:../../tmk_core/common/command.c **** #endif /* BACKLIGHT_ENABLE */
 293:../../tmk_core/common/command.c **** 
 294:../../tmk_core/common/command.c **** #endif /* !NO_PRINT */
 295:../../tmk_core/common/command.c **** 
 296:../../tmk_core/common/command.c **** }
 297:../../tmk_core/common/command.c **** #endif /* BOOTMAGIC_ENABLE */
 298:../../tmk_core/common/command.c **** 
 299:../../tmk_core/common/command.c **** static bool command_common(uint8_t code)
 300:../../tmk_core/common/command.c **** {
 301:../../tmk_core/common/command.c **** 
 302:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 303:../../tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 304:../../tmk_core/common/command.c **** #endif
 305:../../tmk_core/common/command.c **** 
 306:../../tmk_core/common/command.c ****     switch (code) {
 307:../../tmk_core/common/command.c **** 
 308:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 309:../../tmk_core/common/command.c **** 
 310:../../tmk_core/common/command.c **** 		// test breathing sleep LED
 311:../../tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 312:../../tmk_core/common/command.c ****             print("Sleep LED Test\n");
 313:../../tmk_core/common/command.c ****             sleep_led_toggle();
 314:../../tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 315:../../tmk_core/common/command.c ****             break;
 316:../../tmk_core/common/command.c **** #endif
 317:../../tmk_core/common/command.c **** 
 318:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 319:../../tmk_core/common/command.c **** 
 320:../../tmk_core/common/command.c **** 		// print stored eeprom config
 321:../../tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 322:../../tmk_core/common/command.c ****             print("eeconfig:\n");
 323:../../tmk_core/common/command.c ****             print_eeconfig();
 324:../../tmk_core/common/command.c ****             break;
 325:../../tmk_core/common/command.c **** #endif
 326:../../tmk_core/common/command.c **** 
 327:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 328:../../tmk_core/common/command.c **** 
 329:../../tmk_core/common/command.c **** 		// lock/unlock keyboard
 330:../../tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 331:../../tmk_core/common/command.c ****             if (host_get_driver()) {
 332:../../tmk_core/common/command.c ****                 host_driver = host_get_driver();
 333:../../tmk_core/common/command.c ****                 clear_keyboard();
 334:../../tmk_core/common/command.c ****                 host_set_driver(0);
 335:../../tmk_core/common/command.c ****                 print("Locked.\n");
 336:../../tmk_core/common/command.c ****             } else {
 337:../../tmk_core/common/command.c ****                 host_set_driver(host_driver);
 338:../../tmk_core/common/command.c ****                 print("Unlocked.\n");
 339:../../tmk_core/common/command.c ****             }
 340:../../tmk_core/common/command.c ****             break;
 341:../../tmk_core/common/command.c **** #endif
 342:../../tmk_core/common/command.c **** 
 343:../../tmk_core/common/command.c **** 		// print help
 344:../../tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP1):
 345:../../tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP2):
 346:../../tmk_core/common/command.c ****             command_common_help();
 347:../../tmk_core/common/command.c ****             break;
 348:../../tmk_core/common/command.c **** 
 349:../../tmk_core/common/command.c **** 		// activate console
 350:../../tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 351:../../tmk_core/common/command.c ****             debug_matrix   = false;
 352:../../tmk_core/common/command.c ****             debug_keyboard = false;
 353:../../tmk_core/common/command.c ****             debug_mouse    = false;
 354:../../tmk_core/common/command.c ****             debug_enable   = false;
 355:../../tmk_core/common/command.c ****             command_console_help();
 356:../../tmk_core/common/command.c ****             print("C> ");
 357:../../tmk_core/common/command.c ****             command_state = CONSOLE;
 358:../../tmk_core/common/command.c ****             break;
 359:../../tmk_core/common/command.c **** 
 360:../../tmk_core/common/command.c ****         // jump to bootloader
 361:../../tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 362:../../tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 363:../../tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 364:../../tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 365:../../tmk_core/common/command.c **** 	            stop_all_notes();
 366:../../tmk_core/common/command.c ****                 shutdown_user();
 367:../../tmk_core/common/command.c ****             #else
 368:../../tmk_core/common/command.c **** 	            wait_ms(1000);
 369:../../tmk_core/common/command.c ****             #endif
 370:../../tmk_core/common/command.c ****             bootloader_jump(); // not return
 371:../../tmk_core/common/command.c ****             break;
 372:../../tmk_core/common/command.c **** 
 373:../../tmk_core/common/command.c ****         // debug toggle
 374:../../tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 375:../../tmk_core/common/command.c ****             debug_enable = !debug_enable;
 376:../../tmk_core/common/command.c ****             if (debug_enable) {
 377:../../tmk_core/common/command.c ****                 print("\ndebug: on\n");
 378:../../tmk_core/common/command.c ****                 debug_matrix   = true;
 379:../../tmk_core/common/command.c ****                 debug_keyboard = true;
 380:../../tmk_core/common/command.c ****                 debug_mouse    = true;
 381:../../tmk_core/common/command.c ****             } else {
 382:../../tmk_core/common/command.c ****                 print("\ndebug: off\n");
 383:../../tmk_core/common/command.c ****                 debug_matrix   = false;
 384:../../tmk_core/common/command.c ****                 debug_keyboard = false;
 385:../../tmk_core/common/command.c ****                 debug_mouse    = false;
 386:../../tmk_core/common/command.c ****             }
 387:../../tmk_core/common/command.c ****             break;
 388:../../tmk_core/common/command.c **** 
 389:../../tmk_core/common/command.c ****         // debug matrix toggle
 390:../../tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 391:../../tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 392:../../tmk_core/common/command.c ****             if (debug_matrix) {
 393:../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 394:../../tmk_core/common/command.c ****                 debug_enable = true;
 395:../../tmk_core/common/command.c ****             } else {
 396:../../tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 397:../../tmk_core/common/command.c ****             }
 398:../../tmk_core/common/command.c ****             break;
 399:../../tmk_core/common/command.c **** 
 400:../../tmk_core/common/command.c ****         // debug keyboard toggle
 401:../../tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 402:../../tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 403:../../tmk_core/common/command.c ****             if (debug_keyboard) {
 404:../../tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 405:../../tmk_core/common/command.c ****                 debug_enable = true;
 406:../../tmk_core/common/command.c ****             } else {
 407:../../tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 408:../../tmk_core/common/command.c ****             }
 409:../../tmk_core/common/command.c ****             break;
 410:../../tmk_core/common/command.c **** 
 411:../../tmk_core/common/command.c ****         // debug mouse toggle
 412:../../tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 413:../../tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 414:../../tmk_core/common/command.c ****             if (debug_mouse) {
 415:../../tmk_core/common/command.c ****                 print("\nmouse: on\n");
 416:../../tmk_core/common/command.c ****                 debug_enable = true;
 417:../../tmk_core/common/command.c ****             } else {
 418:../../tmk_core/common/command.c **** 				print("\nmouse: off\n");
 419:../../tmk_core/common/command.c ****             }
 420:../../tmk_core/common/command.c ****             break;
 421:../../tmk_core/common/command.c **** 
 422:../../tmk_core/common/command.c **** 		// print version
 423:../../tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 424:../../tmk_core/common/command.c ****         	print_version();
 425:../../tmk_core/common/command.c **** 		    break;
 426:../../tmk_core/common/command.c **** 
 427:../../tmk_core/common/command.c **** 		// print status
 428:../../tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_STATUS):
 429:../../tmk_core/common/command.c **** 			print_status();
 430:../../tmk_core/common/command.c ****             break;
 431:../../tmk_core/common/command.c **** 
 432:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 433:../../tmk_core/common/command.c **** 
 434:../../tmk_core/common/command.c **** 		// NKRO toggle
 435:../../tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 436:../../tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 437:../../tmk_core/common/command.c ****             keyboard_nkro = !keyboard_nkro;
 438:../../tmk_core/common/command.c ****             if (keyboard_nkro) {
 439:../../tmk_core/common/command.c ****                 print("NKRO: on\n");
 440:../../tmk_core/common/command.c ****             } else {
 441:../../tmk_core/common/command.c ****                 print("NKRO: off\n");
 442:../../tmk_core/common/command.c ****             }
 443:../../tmk_core/common/command.c ****             break;
 444:../../tmk_core/common/command.c **** #endif
 445:../../tmk_core/common/command.c **** 
 446:../../tmk_core/common/command.c **** 		// switch layers
 447:../../tmk_core/common/command.c **** 
 448:../../tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT1):
 449:../../tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT2):
 450:../../tmk_core/common/command.c ****             switch_default_layer(0);
 451:../../tmk_core/common/command.c ****             break;
 452:../../tmk_core/common/command.c **** 
 453:../../tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 454:../../tmk_core/common/command.c **** 
 455:../../tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0):
 456:../../tmk_core/common/command.c ****             switch_default_layer(0);
 457:../../tmk_core/common/command.c ****             break;
 458:../../tmk_core/common/command.c **** 
 459:../../tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER1):
 460:../../tmk_core/common/command.c ****             switch_default_layer(1);
 461:../../tmk_core/common/command.c ****             break;
 462:../../tmk_core/common/command.c **** 
 463:../../tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER2):
 464:../../tmk_core/common/command.c ****             switch_default_layer(2);
 465:../../tmk_core/common/command.c ****             break;
 466:../../tmk_core/common/command.c **** 
 467:../../tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER3):
 468:../../tmk_core/common/command.c ****             switch_default_layer(3);
 469:../../tmk_core/common/command.c ****             break;
 470:../../tmk_core/common/command.c **** 
 471:../../tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER4):
 472:../../tmk_core/common/command.c ****             switch_default_layer(4);
 473:../../tmk_core/common/command.c ****             break;
 474:../../tmk_core/common/command.c **** 
 475:../../tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER5):
 476:../../tmk_core/common/command.c ****             switch_default_layer(5);
 477:../../tmk_core/common/command.c ****             break;
 478:../../tmk_core/common/command.c **** 
 479:../../tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER6):
 480:../../tmk_core/common/command.c ****             switch_default_layer(6);
 481:../../tmk_core/common/command.c ****             break;
 482:../../tmk_core/common/command.c **** 
 483:../../tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER7):
 484:../../tmk_core/common/command.c ****             switch_default_layer(7);
 485:../../tmk_core/common/command.c ****             break;
 486:../../tmk_core/common/command.c **** 
 487:../../tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER8):
 488:../../tmk_core/common/command.c ****             switch_default_layer(8);
 489:../../tmk_core/common/command.c ****             break;
 490:../../tmk_core/common/command.c **** 
 491:../../tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER9):
 492:../../tmk_core/common/command.c ****             switch_default_layer(9);
 493:../../tmk_core/common/command.c ****             break;
 494:../../tmk_core/common/command.c **** #endif
 495:../../tmk_core/common/command.c **** 
 496:../../tmk_core/common/command.c **** 
 497:../../tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 498:../../tmk_core/common/command.c **** 
 499:../../tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 500:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 501:../../tmk_core/common/command.c ****             break;
 502:../../tmk_core/common/command.c ****         case KC_F10:
 503:../../tmk_core/common/command.c ****             switch_default_layer(0);
 504:../../tmk_core/common/command.c ****             break;
 505:../../tmk_core/common/command.c **** #endif
 506:../../tmk_core/common/command.c **** 
 507:../../tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 508:../../tmk_core/common/command.c **** 
 509:../../tmk_core/common/command.c ****         case KC_1 ... KC_9:
 510:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 511:../../tmk_core/common/command.c ****             break;
 512:../../tmk_core/common/command.c ****         case KC_0:
 513:../../tmk_core/common/command.c ****             switch_default_layer(0);
 514:../../tmk_core/common/command.c ****             break;
 515:../../tmk_core/common/command.c **** #endif
 516:../../tmk_core/common/command.c **** 
 517:../../tmk_core/common/command.c ****         default:
 518:../../tmk_core/common/command.c ****             print("?");
 519:../../tmk_core/common/command.c ****             return false;
 520:../../tmk_core/common/command.c ****     }
 521:../../tmk_core/common/command.c ****     return true;
 522:../../tmk_core/common/command.c **** }
 523:../../tmk_core/common/command.c **** 
 524:../../tmk_core/common/command.c **** 
 525:../../tmk_core/common/command.c **** /***********************************************************
 526:../../tmk_core/common/command.c ****  * Command console
 527:../../tmk_core/common/command.c ****  ***********************************************************/
 528:../../tmk_core/common/command.c **** static void command_console_help(void)
 529:../../tmk_core/common/command.c **** {
 530:../../tmk_core/common/command.c ****     print("\n\t- Console -\n"
 531:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 532:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 533:../../tmk_core/common/command.c ****           "m:	mousekey\n"
 534:../../tmk_core/common/command.c **** #endif
 535:../../tmk_core/common/command.c ****     );
 536:../../tmk_core/common/command.c **** }
 537:../../tmk_core/common/command.c **** 
 538:../../tmk_core/common/command.c **** static bool command_console(uint8_t code)
 539:../../tmk_core/common/command.c **** {
 540:../../tmk_core/common/command.c ****     switch (code) {
 541:../../tmk_core/common/command.c ****         case KC_H:
 542:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 543:../../tmk_core/common/command.c ****             command_console_help();
 544:../../tmk_core/common/command.c ****             break;
 545:../../tmk_core/common/command.c ****         case KC_Q:
 546:../../tmk_core/common/command.c ****         case KC_ESC:
 547:../../tmk_core/common/command.c ****             command_state = ONESHOT;
 548:../../tmk_core/common/command.c ****             return false;
 549:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 550:../../tmk_core/common/command.c ****         case KC_M:
 551:../../tmk_core/common/command.c ****             mousekey_console_help();
 552:../../tmk_core/common/command.c ****             print("M> ");
 553:../../tmk_core/common/command.c ****             command_state = MOUSEKEY;
 554:../../tmk_core/common/command.c ****             return true;
 555:../../tmk_core/common/command.c **** #endif
 556:../../tmk_core/common/command.c ****         default:
 557:../../tmk_core/common/command.c ****             print("?");
 558:../../tmk_core/common/command.c ****             return false;
 559:../../tmk_core/common/command.c ****     }
 560:../../tmk_core/common/command.c ****     print("C> ");
 561:../../tmk_core/common/command.c ****     return true;
 562:../../tmk_core/common/command.c **** }
 563:../../tmk_core/common/command.c **** 
 564:../../tmk_core/common/command.c **** 
 565:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 566:../../tmk_core/common/command.c **** /***********************************************************
 567:../../tmk_core/common/command.c ****  * Mousekey console
 568:../../tmk_core/common/command.c ****  ***********************************************************/
 569:../../tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 570:../../tmk_core/common/command.c **** 
 571:../../tmk_core/common/command.c **** static void mousekey_param_print(void)
 572:../../tmk_core/common/command.c **** {
 573:../../tmk_core/common/command.c **** #ifndef NO_PRINT
 574:../../tmk_core/common/command.c ****     print("\n\t- Values -\n");
 575:../../tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 576:../../tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 577:../../tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 578:../../tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 579:../../tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 580:../../tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 581:../../tmk_core/common/command.c **** #endif /* !NO_PRINT */
 582:../../tmk_core/common/command.c **** 
 583:../../tmk_core/common/command.c **** }
 584:../../tmk_core/common/command.c **** 
 585:../../tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 586:../../tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 587:../../tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 588:../../tmk_core/common/command.c **** {
  15               		.loc 1 588 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 589:../../tmk_core/common/command.c ****     switch (param) {
  22               		.loc 1 589 0
  23 0000 8330      		cpi r24,lo8(3)
  24 0002 01F0      		breq .L3
  25 0004 00F4      		brsh .L4
  26 0006 8130      		cpi r24,lo8(1)
  27 0008 01F0      		breq .L5
  28 000a 8230      		cpi r24,lo8(2)
  29 000c 01F0      		breq .L6
  30 000e 0895      		ret
  31               	.L4:
  32 0010 8530      		cpi r24,lo8(5)
  33 0012 01F4      		brne .+2
  34 0014 00C0      		rjmp .L7
  35 0016 00F0      		brlo .L8
  36 0018 8630      		cpi r24,lo8(6)
  37 001a 01F4      		brne .+2
  38 001c 00C0      		rjmp .L9
  39 001e 0895      		ret
  40               	.L5:
 590:../../tmk_core/common/command.c ****         case 1:
 591:../../tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
  41               		.loc 1 591 0
  42 0020 8091 0000 		lds r24,mk_delay
  43               	.LVL1:
  44 0024 262F      		mov r18,r22
  45 0026 30E0      		ldi r19,0
  46 0028 280F      		add r18,r24
  47 002a 311D      		adc r19,__zero_reg__
  48 002c 2F3F      		cpi r18,-1
  49 002e 3105      		cpc r19,__zero_reg__
  50 0030 04F4      		brge .L10
 592:../../tmk_core/common/command.c ****                 mk_delay += inc;
  51               		.loc 1 592 0
  52 0032 680F      		add r22,r24
  53               	.LVL2:
  54 0034 6093 0000 		sts mk_delay,r22
  55 0038 0895      		ret
  56               	.LVL3:
  57               	.L10:
 593:../../tmk_core/common/command.c ****             else
 594:../../tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
  58               		.loc 1 594 0
  59 003a 8FEF      		ldi r24,lo8(-1)
  60 003c 8093 0000 		sts mk_delay,r24
  61 0040 0895      		ret
  62               	.LVL4:
  63               	.L6:
 595:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 596:../../tmk_core/common/command.c ****             break;
 597:../../tmk_core/common/command.c ****         case 2:
 598:../../tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
  64               		.loc 1 598 0
  65 0042 8091 0000 		lds r24,mk_interval
  66               	.LVL5:
  67 0046 262F      		mov r18,r22
  68 0048 30E0      		ldi r19,0
  69 004a 280F      		add r18,r24
  70 004c 311D      		adc r19,__zero_reg__
  71 004e 2F3F      		cpi r18,-1
  72 0050 3105      		cpc r19,__zero_reg__
  73 0052 04F4      		brge .L11
 599:../../tmk_core/common/command.c ****                 mk_interval += inc;
  74               		.loc 1 599 0
  75 0054 680F      		add r22,r24
  76               	.LVL6:
  77 0056 6093 0000 		sts mk_interval,r22
  78 005a 0895      		ret
  79               	.LVL7:
  80               	.L11:
 600:../../tmk_core/common/command.c ****             else
 601:../../tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
  81               		.loc 1 601 0
  82 005c 8FEF      		ldi r24,lo8(-1)
  83 005e 8093 0000 		sts mk_interval,r24
  84 0062 0895      		ret
  85               	.LVL8:
  86               	.L3:
 602:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 603:../../tmk_core/common/command.c ****             break;
 604:../../tmk_core/common/command.c ****         case 3:
 605:../../tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
  87               		.loc 1 605 0
  88 0064 8091 0000 		lds r24,mk_max_speed
  89               	.LVL9:
  90 0068 262F      		mov r18,r22
  91 006a 30E0      		ldi r19,0
  92 006c 280F      		add r18,r24
  93 006e 311D      		adc r19,__zero_reg__
  94 0070 2F3F      		cpi r18,-1
  95 0072 3105      		cpc r19,__zero_reg__
  96 0074 04F4      		brge .L12
 606:../../tmk_core/common/command.c ****                 mk_max_speed += inc;
  97               		.loc 1 606 0
  98 0076 680F      		add r22,r24
  99               	.LVL10:
 100 0078 6093 0000 		sts mk_max_speed,r22
 101 007c 0895      		ret
 102               	.LVL11:
 103               	.L12:
 607:../../tmk_core/common/command.c ****             else
 608:../../tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 104               		.loc 1 608 0
 105 007e 8FEF      		ldi r24,lo8(-1)
 106 0080 8093 0000 		sts mk_max_speed,r24
 107 0084 0895      		ret
 108               	.LVL12:
 109               	.L8:
 609:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 610:../../tmk_core/common/command.c ****             break;
 611:../../tmk_core/common/command.c ****         case 4:
 612:../../tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 110               		.loc 1 612 0
 111 0086 8091 0000 		lds r24,mk_time_to_max
 112               	.LVL13:
 113 008a 262F      		mov r18,r22
 114 008c 30E0      		ldi r19,0
 115 008e 280F      		add r18,r24
 116 0090 311D      		adc r19,__zero_reg__
 117 0092 2F3F      		cpi r18,-1
 118 0094 3105      		cpc r19,__zero_reg__
 119 0096 04F4      		brge .L13
 613:../../tmk_core/common/command.c ****                 mk_time_to_max += inc;
 120               		.loc 1 613 0
 121 0098 680F      		add r22,r24
 122               	.LVL14:
 123 009a 6093 0000 		sts mk_time_to_max,r22
 124 009e 0895      		ret
 125               	.LVL15:
 126               	.L13:
 614:../../tmk_core/common/command.c ****             else
 615:../../tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 127               		.loc 1 615 0
 128 00a0 8FEF      		ldi r24,lo8(-1)
 129 00a2 8093 0000 		sts mk_time_to_max,r24
 130 00a6 0895      		ret
 131               	.LVL16:
 132               	.L7:
 616:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 617:../../tmk_core/common/command.c ****             break;
 618:../../tmk_core/common/command.c ****         case 5:
 619:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 133               		.loc 1 619 0
 134 00a8 8091 0000 		lds r24,mk_wheel_max_speed
 135               	.LVL17:
 136 00ac 262F      		mov r18,r22
 137 00ae 30E0      		ldi r19,0
 138 00b0 280F      		add r18,r24
 139 00b2 311D      		adc r19,__zero_reg__
 140 00b4 2F3F      		cpi r18,-1
 141 00b6 3105      		cpc r19,__zero_reg__
 142 00b8 04F4      		brge .L14
 620:../../tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 143               		.loc 1 620 0
 144 00ba 680F      		add r22,r24
 145               	.LVL18:
 146 00bc 6093 0000 		sts mk_wheel_max_speed,r22
 147 00c0 0895      		ret
 148               	.LVL19:
 149               	.L14:
 621:../../tmk_core/common/command.c ****             else
 622:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 150               		.loc 1 622 0
 151 00c2 8FEF      		ldi r24,lo8(-1)
 152 00c4 8093 0000 		sts mk_wheel_max_speed,r24
 153 00c8 0895      		ret
 154               	.LVL20:
 155               	.L9:
 623:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 624:../../tmk_core/common/command.c ****             break;
 625:../../tmk_core/common/command.c ****         case 6:
 626:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 156               		.loc 1 626 0
 157 00ca 8091 0000 		lds r24,mk_wheel_time_to_max
 158               	.LVL21:
 159 00ce 262F      		mov r18,r22
 160 00d0 30E0      		ldi r19,0
 161 00d2 280F      		add r18,r24
 162 00d4 311D      		adc r19,__zero_reg__
 163 00d6 2F3F      		cpi r18,-1
 164 00d8 3105      		cpc r19,__zero_reg__
 165 00da 04F4      		brge .L15
 627:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 166               		.loc 1 627 0
 167 00dc 680F      		add r22,r24
 168               	.LVL22:
 169 00de 6093 0000 		sts mk_wheel_time_to_max,r22
 170 00e2 0895      		ret
 171               	.LVL23:
 172               	.L15:
 628:../../tmk_core/common/command.c ****             else
 629:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 173               		.loc 1 629 0
 174 00e4 8FEF      		ldi r24,lo8(-1)
 175 00e6 8093 0000 		sts mk_wheel_time_to_max,r24
 176 00ea 0895      		ret
 177               		.cfi_endproc
 178               	.LFE117:
 180               		.section	.text.mousekey_param_dec,"ax",@progbits
 182               	mousekey_param_dec:
 183               	.LFB118:
 630:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 631:../../tmk_core/common/command.c ****             break;
 632:../../tmk_core/common/command.c ****     }
 633:../../tmk_core/common/command.c **** }
 634:../../tmk_core/common/command.c **** 
 635:../../tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 636:../../tmk_core/common/command.c **** {
 184               		.loc 1 636 0
 185               		.cfi_startproc
 186               	.LVL24:
 187               	/* prologue: function */
 188               	/* frame size = 0 */
 189               	/* stack size = 0 */
 190               	.L__stack_usage = 0
 637:../../tmk_core/common/command.c ****     switch (param) {
 191               		.loc 1 637 0
 192 0000 8330      		cpi r24,lo8(3)
 193 0002 01F0      		breq .L19
 194 0004 00F4      		brsh .L20
 195 0006 8130      		cpi r24,lo8(1)
 196 0008 01F0      		breq .L21
 197 000a 8230      		cpi r24,lo8(2)
 198 000c 01F0      		breq .L22
 199 000e 0895      		ret
 200               	.L20:
 201 0010 8530      		cpi r24,lo8(5)
 202 0012 01F0      		breq .L23
 203 0014 00F0      		brlo .L24
 204 0016 8630      		cpi r24,lo8(6)
 205 0018 01F0      		breq .L25
 206 001a 0895      		ret
 207               	.L21:
 638:../../tmk_core/common/command.c ****         case 1:
 639:../../tmk_core/common/command.c ****             if (mk_delay > dec)
 208               		.loc 1 639 0
 209 001c 8091 0000 		lds r24,mk_delay
 210               	.LVL25:
 211 0020 6817      		cp r22,r24
 212 0022 00F4      		brsh .L26
 640:../../tmk_core/common/command.c ****                 mk_delay -= dec;
 213               		.loc 1 640 0
 214 0024 861B      		sub r24,r22
 215 0026 8093 0000 		sts mk_delay,r24
 216 002a 0895      		ret
 217               	.L26:
 641:../../tmk_core/common/command.c ****             else
 642:../../tmk_core/common/command.c ****                 mk_delay = 0;
 218               		.loc 1 642 0
 219 002c 1092 0000 		sts mk_delay,__zero_reg__
 220 0030 0895      		ret
 221               	.LVL26:
 222               	.L22:
 643:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 644:../../tmk_core/common/command.c ****             break;
 645:../../tmk_core/common/command.c ****         case 2:
 646:../../tmk_core/common/command.c ****             if (mk_interval > dec)
 223               		.loc 1 646 0
 224 0032 8091 0000 		lds r24,mk_interval
 225               	.LVL27:
 226 0036 6817      		cp r22,r24
 227 0038 00F4      		brsh .L27
 647:../../tmk_core/common/command.c ****                 mk_interval -= dec;
 228               		.loc 1 647 0
 229 003a 861B      		sub r24,r22
 230 003c 8093 0000 		sts mk_interval,r24
 231 0040 0895      		ret
 232               	.L27:
 648:../../tmk_core/common/command.c ****             else
 649:../../tmk_core/common/command.c ****                 mk_interval = 0;
 233               		.loc 1 649 0
 234 0042 1092 0000 		sts mk_interval,__zero_reg__
 235 0046 0895      		ret
 236               	.LVL28:
 237               	.L19:
 650:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 651:../../tmk_core/common/command.c ****             break;
 652:../../tmk_core/common/command.c ****         case 3:
 653:../../tmk_core/common/command.c ****             if (mk_max_speed > dec)
 238               		.loc 1 653 0
 239 0048 8091 0000 		lds r24,mk_max_speed
 240               	.LVL29:
 241 004c 6817      		cp r22,r24
 242 004e 00F4      		brsh .L28
 654:../../tmk_core/common/command.c ****                 mk_max_speed -= dec;
 243               		.loc 1 654 0
 244 0050 861B      		sub r24,r22
 245 0052 8093 0000 		sts mk_max_speed,r24
 246 0056 0895      		ret
 247               	.L28:
 655:../../tmk_core/common/command.c ****             else
 656:../../tmk_core/common/command.c ****                 mk_max_speed = 0;
 248               		.loc 1 656 0
 249 0058 1092 0000 		sts mk_max_speed,__zero_reg__
 250 005c 0895      		ret
 251               	.LVL30:
 252               	.L24:
 657:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 658:../../tmk_core/common/command.c ****             break;
 659:../../tmk_core/common/command.c ****         case 4:
 660:../../tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 253               		.loc 1 660 0
 254 005e 8091 0000 		lds r24,mk_time_to_max
 255               	.LVL31:
 256 0062 6817      		cp r22,r24
 257 0064 00F4      		brsh .L29
 661:../../tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 258               		.loc 1 661 0
 259 0066 861B      		sub r24,r22
 260 0068 8093 0000 		sts mk_time_to_max,r24
 261 006c 0895      		ret
 262               	.L29:
 662:../../tmk_core/common/command.c ****             else
 663:../../tmk_core/common/command.c ****                 mk_time_to_max = 0;
 263               		.loc 1 663 0
 264 006e 1092 0000 		sts mk_time_to_max,__zero_reg__
 265 0072 0895      		ret
 266               	.LVL32:
 267               	.L23:
 664:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 665:../../tmk_core/common/command.c ****             break;
 666:../../tmk_core/common/command.c ****         case 5:
 667:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 268               		.loc 1 667 0
 269 0074 8091 0000 		lds r24,mk_wheel_max_speed
 270               	.LVL33:
 271 0078 6817      		cp r22,r24
 272 007a 00F4      		brsh .L30
 668:../../tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 273               		.loc 1 668 0
 274 007c 861B      		sub r24,r22
 275 007e 8093 0000 		sts mk_wheel_max_speed,r24
 276 0082 0895      		ret
 277               	.L30:
 669:../../tmk_core/common/command.c ****             else
 670:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 278               		.loc 1 670 0
 279 0084 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 280 0088 0895      		ret
 281               	.LVL34:
 282               	.L25:
 671:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 672:../../tmk_core/common/command.c ****             break;
 673:../../tmk_core/common/command.c ****         case 6:
 674:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 283               		.loc 1 674 0
 284 008a 8091 0000 		lds r24,mk_wheel_time_to_max
 285               	.LVL35:
 286 008e 6817      		cp r22,r24
 287 0090 00F4      		brsh .L31
 675:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 288               		.loc 1 675 0
 289 0092 861B      		sub r24,r22
 290 0094 8093 0000 		sts mk_wheel_time_to_max,r24
 291 0098 0895      		ret
 292               	.L31:
 676:../../tmk_core/common/command.c ****             else
 677:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 293               		.loc 1 677 0
 294 009a 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 295 009e 0895      		ret
 296               		.cfi_endproc
 297               	.LFE118:
 299               		.section	.text.command_common,"ax",@progbits
 301               	command_common:
 302               	.LFB113:
 300:../../tmk_core/common/command.c **** 
 303               		.loc 1 300 0
 304               		.cfi_startproc
 305               	.LVL36:
 306 0000 0F93      		push r16
 307               	.LCFI0:
 308               		.cfi_def_cfa_offset 3
 309               		.cfi_offset 16, -2
 310 0002 1F93      		push r17
 311               	.LCFI1:
 312               		.cfi_def_cfa_offset 4
 313               		.cfi_offset 17, -3
 314               	/* prologue: function */
 315               	/* frame size = 0 */
 316               	/* stack size = 2 */
 317               	.L__stack_usage = 2
 306:../../tmk_core/common/command.c **** 
 318               		.loc 1 306 0
 319 0004 8732      		cpi r24,lo8(39)
 320 0006 00F0      		brlo .+2
 321 0008 00C0      		rjmp .L34
 322 000a 8E31      		cpi r24,lo8(30)
 323 000c 00F0      		brlo .+2
 324 000e 00C0      		rjmp .L35
 325 0010 8031      		cpi r24,lo8(16)
 326 0012 01F4      		brne .+2
 327 0014 00C0      		rjmp .L36
 328 0016 00F4      		brsh .L37
 329 0018 8730      		cpi r24,lo8(7)
 330 001a 01F4      		brne .+2
 331 001c 00C0      		rjmp .L38
 332 001e 00F4      		brsh .L39
 333 0020 8630      		cpi r24,lo8(6)
 334 0022 01F0      		breq .+2
 335 0024 00C0      		rjmp .L56
 351:../../tmk_core/common/command.c ****             debug_keyboard = false;
 336               		.loc 1 351 0
 337 0026 8091 0000 		lds r24,debug_config
 338               	.LVL37:
 354:../../tmk_core/common/command.c ****             command_console_help();
 339               		.loc 1 354 0
 340 002a 817F      		andi r24,lo8(-15)
 341 002c 8E7F      		andi r24,lo8(~(1<<0))
 342 002e 8093 0000 		sts debug_config,r24
 357:../../tmk_core/common/command.c ****             break;
 343               		.loc 1 357 0
 344 0032 81E0      		ldi r24,lo8(1)
 345 0034 8093 0000 		sts command_state,r24
 358:../../tmk_core/common/command.c **** 
 346               		.loc 1 358 0
 347 0038 00C0      		rjmp .L33
 348               	.LVL38:
 349               	.L39:
 306:../../tmk_core/common/command.c **** 
 350               		.loc 1 306 0
 351 003a 8B30      		cpi r24,lo8(11)
 352 003c 01F4      		brne .+2
 353 003e 00C0      		rjmp .L79
 354 0040 8E30      		cpi r24,lo8(14)
 355 0042 01F0      		breq .+2
 356 0044 00C0      		rjmp .L56
 402:../../tmk_core/common/command.c ****             if (debug_keyboard) {
 357               		.loc 1 402 0
 358 0046 8091 0000 		lds r24,debug_config
 359               	.LVL39:
 360 004a 82FB      		bst r24,2
 361 004c 2227      		clr r18
 362 004e 20F9      		bld r18,0
 363 0050 91E0      		ldi r25,lo8(1)
 364 0052 9227      		eor r25,r18
 365 0054 90FB      		bst r25,0
 366 0056 82F9      		bld r24,2
 367 0058 00C0      		rjmp .L77
 368               	.LVL40:
 369               	.L37:
 306:../../tmk_core/common/command.c **** 
 370               		.loc 1 306 0
 371 005a 8631      		cpi r24,lo8(22)
 372 005c 01F4      		brne .+2
 373 005e 00C0      		rjmp .L79
 374 0060 00F4      		brsh .L43
 375 0062 8131      		cpi r24,lo8(17)
 376 0064 01F0      		breq .+2
 377 0066 00C0      		rjmp .L56
 436:../../tmk_core/common/command.c ****             keyboard_nkro = !keyboard_nkro;
 378               		.loc 1 436 0
 379 0068 0E94 0000 		call clear_keyboard
 380               	.LVL41:
 437:../../tmk_core/common/command.c ****             if (keyboard_nkro) {
 381               		.loc 1 437 0
 382 006c 9091 0000 		lds r25,keyboard_nkro
 383 0070 81E0      		ldi r24,lo8(1)
 384 0072 8927      		eor r24,r25
 385 0074 8093 0000 		sts keyboard_nkro,r24
 386 0078 00C0      		rjmp .L79
 387               	.LVL42:
 388               	.L43:
 306:../../tmk_core/common/command.c **** 
 389               		.loc 1 306 0
 390 007a 8931      		cpi r24,lo8(25)
 391 007c 01F4      		brne .+2
 392 007e 00C0      		rjmp .L79
 393 0080 8B31      		cpi r24,lo8(27)
 394 0082 01F0      		breq .+2
 395 0084 00C0      		rjmp .L56
 391:../../tmk_core/common/command.c ****             if (debug_matrix) {
 396               		.loc 1 391 0
 397 0086 8091 0000 		lds r24,debug_config
 398               	.LVL43:
 399 008a 81FB      		bst r24,1
 400 008c 2227      		clr r18
 401 008e 20F9      		bld r18,0
 402 0090 91E0      		ldi r25,lo8(1)
 403 0092 9227      		eor r25,r18
 404 0094 90FB      		bst r25,0
 405 0096 81F9      		bld r24,1
 406 0098 00C0      		rjmp .L77
 407               	.LVL44:
 408               	.L34:
 306:../../tmk_core/common/command.c **** 
 409               		.loc 1 306 0
 410 009a 8833      		cpi r24,lo8(56)
 411 009c 01F4      		brne .+2
 412 009e 00C0      		rjmp .L79
 413 00a0 00F4      		brsh .L46
 414 00a2 8932      		cpi r24,lo8(41)
 415 00a4 01F4      		brne .+2
 416 00a6 00C0      		rjmp .L48
 417 00a8 8533      		cpi r24,lo8(53)
 418 00aa 01F4      		brne .+2
 419 00ac 00C0      		rjmp .L48
 420 00ae 8732      		cpi r24,lo8(39)
 421 00b0 01F4      		brne .+2
 422 00b2 00C0      		rjmp .L48
 423 00b4 00C0      		rjmp .L56
 424               	.L46:
 425 00b6 8334      		cpi r24,lo8(67)
 426 00b8 01F4      		brne .+2
 427 00ba 00C0      		rjmp .L48
 428 00bc 00F4      		brsh .L50
 429 00be 8A33      		cpi r24,lo8(58)
 430 00c0 00F4      		brsh .+2
 431 00c2 00C0      		rjmp .L56
 432               	.LVL45:
 500:../../tmk_core/common/command.c ****             break;
 433               		.loc 1 500 0
 434 00c4 8953      		subi r24,lo8(-(-57))
 435               	.LVL46:
 436 00c6 00C0      		rjmp .L81
 437               	.LVL47:
 438               	.L50:
 306:../../tmk_core/common/command.c **** 
 439               		.loc 1 306 0
 440 00c8 8834      		cpi r24,lo8(72)
 441 00ca 01F0      		breq .+2
 442 00cc 00C0      		rjmp .L56
 362:../../tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 443               		.loc 1 362 0
 444 00ce 0E94 0000 		call clear_keyboard
 445               	.LVL48:
 446               	.LBB16:
 447               	.LBB17:
 448               		.file 2 "/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 449               		.loc 2 187 0
 450 00d2 0FEF      		ldi r16,lo8(3199999)
 451 00d4 13ED      		ldi r17,hi8(3199999)
 452 00d6 20E3      		ldi r18,hlo8(3199999)
 453 00d8 0150      		1: subi r16,1
 454 00da 1040      		sbci r17,0
 455 00dc 2040      		sbci r18,0
 456 00de 01F4      		brne 1b
 457 00e0 00C0      		rjmp .
 458 00e2 0000      		nop
 459               	.LBE17:
 460               	.LBE16:
 370:../../tmk_core/common/command.c ****             break;
 461               		.loc 1 370 0
 462 00e4 0E94 0000 		call bootloader_jump
 463               	.LVL49:
 464 00e8 00C0      		rjmp .L79
 465               	.LVL50:
 466               	.L38:
 375:../../tmk_core/common/command.c ****             if (debug_enable) {
 467               		.loc 1 375 0
 468 00ea 9091 0000 		lds r25,debug_config
 469 00ee 892F      		mov r24,r25
 470               	.LVL51:
 471 00f0 8095      		com r24
 472 00f2 8170      		andi r24,lo8(1)
 473 00f4 80FB      		bst r24,0
 474 00f6 90F9      		bld r25,0
 376:../../tmk_core/common/command.c ****                 print("\ndebug: on\n");
 475               		.loc 1 376 0
 476 00f8 01F0      		breq .L53
 380:../../tmk_core/common/command.c ****             } else {
 477               		.loc 1 380 0
 478 00fa 9660      		ori r25,lo8(6)
 479 00fc 9860      		ori r25,lo8(1<<3)
 480 00fe 9093 0000 		sts debug_config,r25
 481 0102 00C0      		rjmp .L33
 482               	.L53:
 385:../../tmk_core/common/command.c ****             }
 483               		.loc 1 385 0
 484 0104 997F      		andi r25,lo8(-7)
 485 0106 977F      		andi r25,lo8(~(1<<3))
 486 0108 9093 0000 		sts debug_config,r25
 487 010c 00C0      		rjmp .L79
 488               	.LVL52:
 489               	.L36:
 413:../../tmk_core/common/command.c ****             if (debug_mouse) {
 490               		.loc 1 413 0
 491 010e 8091 0000 		lds r24,debug_config
 492               	.LVL53:
 493 0112 83FB      		bst r24,3
 494 0114 2227      		clr r18
 495 0116 20F9      		bld r18,0
 496 0118 91E0      		ldi r25,lo8(1)
 497 011a 9227      		eor r25,r18
 498 011c 90FB      		bst r25,0
 499 011e 83F9      		bld r24,3
 500               	.L77:
 391:../../tmk_core/common/command.c ****             if (debug_matrix) {
 501               		.loc 1 391 0
 502 0120 8093 0000 		sts debug_config,r24
 392:../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 503               		.loc 1 392 0
 504 0124 9923      		tst r25
 505 0126 01F0      		breq .L79
 394:../../tmk_core/common/command.c ****             } else {
 506               		.loc 1 394 0
 507 0128 8091 0000 		lds r24,debug_config
 508 012c 8160      		ori r24,lo8(1<<0)
 509 012e 8093 0000 		sts debug_config,r24
 510 0132 00C0      		rjmp .L79
 511               	.LVL54:
 512               	.L35:
 510:../../tmk_core/common/command.c ****             break;
 513               		.loc 1 510 0
 514 0134 8D51      		subi r24,lo8(-(-29))
 515               	.LVL55:
 516               	.L81:
 517               	.LBB18:
 518               	.LBB19:
 678:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 679:../../tmk_core/common/command.c ****             break;
 680:../../tmk_core/common/command.c ****     }
 681:../../tmk_core/common/command.c **** }
 682:../../tmk_core/common/command.c **** 
 683:../../tmk_core/common/command.c **** static void mousekey_console_help(void)
 684:../../tmk_core/common/command.c **** {
 685:../../tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
 686:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 687:../../tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 688:../../tmk_core/common/command.c ****           "2:	interval(ms)\n"
 689:../../tmk_core/common/command.c ****           "3:	max_speed\n"
 690:../../tmk_core/common/command.c ****           "4:	time_to_max\n"
 691:../../tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 692:../../tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 693:../../tmk_core/common/command.c ****           "\n"
 694:../../tmk_core/common/command.c ****           "p:	print values\n"
 695:../../tmk_core/common/command.c ****           "d:	set defaults\n"
 696:../../tmk_core/common/command.c ****           "up:	+1\n"
 697:../../tmk_core/common/command.c ****           "down:	-1\n"
 698:../../tmk_core/common/command.c ****           "pgup:	+10\n"
 699:../../tmk_core/common/command.c ****           "pgdown:	-10\n"
 700:../../tmk_core/common/command.c ****           "\n"
 701:../../tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 702:../../tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n"
 703:../../tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 704:../../tmk_core/common/command.c **** }
 705:../../tmk_core/common/command.c **** 
 706:../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 707:../../tmk_core/common/command.c **** {
 708:../../tmk_core/common/command.c ****     switch (code) {
 709:../../tmk_core/common/command.c ****         case KC_H:
 710:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 711:../../tmk_core/common/command.c ****             mousekey_console_help();
 712:../../tmk_core/common/command.c ****             break;
 713:../../tmk_core/common/command.c ****         case KC_Q:
 714:../../tmk_core/common/command.c ****         case KC_ESC:
 715:../../tmk_core/common/command.c ****             if (mousekey_param) {
 716:../../tmk_core/common/command.c ****                 mousekey_param = 0;
 717:../../tmk_core/common/command.c ****             } else {
 718:../../tmk_core/common/command.c ****                 print("C> ");
 719:../../tmk_core/common/command.c ****                 command_state = CONSOLE;
 720:../../tmk_core/common/command.c ****                 return false;
 721:../../tmk_core/common/command.c ****             }
 722:../../tmk_core/common/command.c ****             break;
 723:../../tmk_core/common/command.c ****         case KC_P:
 724:../../tmk_core/common/command.c ****             mousekey_param_print();
 725:../../tmk_core/common/command.c ****             break;
 726:../../tmk_core/common/command.c ****         case KC_1:
 727:../../tmk_core/common/command.c ****         case KC_2:
 728:../../tmk_core/common/command.c ****         case KC_3:
 729:../../tmk_core/common/command.c ****         case KC_4:
 730:../../tmk_core/common/command.c ****         case KC_5:
 731:../../tmk_core/common/command.c ****         case KC_6:
 732:../../tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 733:../../tmk_core/common/command.c ****             break;
 734:../../tmk_core/common/command.c ****         case KC_UP:
 735:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 736:../../tmk_core/common/command.c ****             break;
 737:../../tmk_core/common/command.c ****         case KC_DOWN:
 738:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 739:../../tmk_core/common/command.c ****             break;
 740:../../tmk_core/common/command.c ****         case KC_PGUP:
 741:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 742:../../tmk_core/common/command.c ****             break;
 743:../../tmk_core/common/command.c ****         case KC_PGDN:
 744:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 745:../../tmk_core/common/command.c ****             break;
 746:../../tmk_core/common/command.c ****         case KC_D:
 747:../../tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 748:../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 749:../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 750:../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 751:../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 752:../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 753:../../tmk_core/common/command.c ****             print("set default\n");
 754:../../tmk_core/common/command.c ****             break;
 755:../../tmk_core/common/command.c ****         default:
 756:../../tmk_core/common/command.c ****             print("?");
 757:../../tmk_core/common/command.c ****             return false;
 758:../../tmk_core/common/command.c ****     }
 759:../../tmk_core/common/command.c ****     if (mousekey_param) {
 760:../../tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 761:../../tmk_core/common/command.c ****     } else {
 762:../../tmk_core/common/command.c ****         print("M>" );
 763:../../tmk_core/common/command.c ****     }
 764:../../tmk_core/common/command.c ****     return true;
 765:../../tmk_core/common/command.c **** }
 766:../../tmk_core/common/command.c **** #endif
 767:../../tmk_core/common/command.c **** 
 768:../../tmk_core/common/command.c **** 
 769:../../tmk_core/common/command.c **** /***********************************************************
 770:../../tmk_core/common/command.c ****  * Utilities
 771:../../tmk_core/common/command.c ****  ***********************************************************/
 772:../../tmk_core/common/command.c **** uint8_t numkey2num(uint8_t code)
 773:../../tmk_core/common/command.c **** {
 774:../../tmk_core/common/command.c ****     switch (code) {
 775:../../tmk_core/common/command.c ****         case KC_1: return 1;
 776:../../tmk_core/common/command.c ****         case KC_2: return 2;
 777:../../tmk_core/common/command.c ****         case KC_3: return 3;
 778:../../tmk_core/common/command.c ****         case KC_4: return 4;
 779:../../tmk_core/common/command.c ****         case KC_5: return 5;
 780:../../tmk_core/common/command.c ****         case KC_6: return 6;
 781:../../tmk_core/common/command.c ****         case KC_7: return 7;
 782:../../tmk_core/common/command.c ****         case KC_8: return 8;
 783:../../tmk_core/common/command.c ****         case KC_9: return 9;
 784:../../tmk_core/common/command.c ****         case KC_0: return 0;
 785:../../tmk_core/common/command.c ****     }
 786:../../tmk_core/common/command.c ****     return 0;
 787:../../tmk_core/common/command.c **** }
 788:../../tmk_core/common/command.c **** 
 789:../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 790:../../tmk_core/common/command.c **** {
 791:../../tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 792:../../tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 519               		.loc 1 792 0
 520 0136 41E0      		ldi r20,lo8(1)
 521 0138 50E0      		ldi r21,0
 522 013a 60E0      		ldi r22,0
 523 013c 70E0      		ldi r23,0
 524 013e 8A01      		movw r16,r20
 525 0140 9B01      		movw r18,r22
 526 0142 00C0      		rjmp 2f
 527               		1:
 528 0144 000F      		lsl r16
 529 0146 111F      		rol r17
 530 0148 221F      		rol r18
 531 014a 331F      		rol r19
 532               		2:
 533 014c 8A95      		dec r24
 534 014e 02F4      		brpl 1b
 535 0150 C901      		movw r24,r18
 536 0152 B801      		movw r22,r16
 537               	.L80:
 538 0154 0E94 0000 		call default_layer_set
 539               	.LVL56:
 793:../../tmk_core/common/command.c ****     clear_keyboard();
 540               		.loc 1 793 0
 541 0158 0E94 0000 		call clear_keyboard
 542               	.LVL57:
 543               	.L79:
 544               	.LBE19:
 545               	.LBE18:
 521:../../tmk_core/common/command.c **** }
 546               		.loc 1 521 0
 547 015c 81E0      		ldi r24,lo8(1)
 548 015e 00C0      		rjmp .L33
 549               	.LVL58:
 550               	.L48:
 551               	.LBB20:
 552               	.LBB21:
 792:../../tmk_core/common/command.c ****     clear_keyboard();
 553               		.loc 1 792 0
 554 0160 61E0      		ldi r22,lo8(1)
 555 0162 70E0      		ldi r23,0
 556 0164 80E0      		ldi r24,0
 557 0166 90E0      		ldi r25,0
 558 0168 00C0      		rjmp .L80
 559               	.LVL59:
 560               	.L56:
 561               	.LBE21:
 562               	.LBE20:
 519:../../tmk_core/common/command.c ****     }
 563               		.loc 1 519 0
 564 016a 80E0      		ldi r24,0
 565               	.LVL60:
 566               	.L33:
 567               	/* epilogue start */
 522:../../tmk_core/common/command.c **** 
 568               		.loc 1 522 0
 569 016c 1F91      		pop r17
 570 016e 0F91      		pop r16
 571 0170 0895      		ret
 572               		.cfi_endproc
 573               	.LFE113:
 575               		.section	.text.command_extra,"ax",@progbits
 576               		.weak	command_extra
 578               	command_extra:
 579               	.LFB108:
 105:../../tmk_core/common/command.c ****     (void)code;
 580               		.loc 1 105 0
 581               		.cfi_startproc
 582               	.LVL61:
 583               	/* prologue: function */
 584               	/* frame size = 0 */
 585               	/* stack size = 0 */
 586               	.L__stack_usage = 0
 108:../../tmk_core/common/command.c **** 
 587               		.loc 1 108 0
 588 0000 80E0      		ldi r24,0
 589               	.LVL62:
 590 0002 0895      		ret
 591               		.cfi_endproc
 592               	.LFE108:
 594               		.section	.text.command_console_extra,"ax",@progbits
 595               		.weak	command_console_extra
 597               	command_console_extra:
 598               	.LFB109:
 112:../../tmk_core/common/command.c ****     (void)code;
 599               		.loc 1 112 0
 600               		.cfi_startproc
 601               	.LVL63:
 602               	/* prologue: function */
 603               	/* frame size = 0 */
 604               	/* stack size = 0 */
 605               	.L__stack_usage = 0
 115:../../tmk_core/common/command.c **** 
 606               		.loc 1 115 0
 607 0000 80E0      		ldi r24,0
 608               	.LVL64:
 609 0002 0895      		ret
 610               		.cfi_endproc
 611               	.LFE109:
 613               		.section	.text.numkey2num,"ax",@progbits
 614               	.global	numkey2num
 616               	numkey2num:
 617               	.LFB121:
 773:../../tmk_core/common/command.c ****     switch (code) {
 618               		.loc 1 773 0
 619               		.cfi_startproc
 620               	.LVL65:
 621               	/* prologue: function */
 622               	/* frame size = 0 */
 623               	/* stack size = 0 */
 624               	.L__stack_usage = 0
 625 0000 8E51      		subi r24,lo8(-(-30))
 626               	.LVL66:
 627 0002 8A30      		cpi r24,lo8(10)
 628 0004 00F4      		brsh .L86
 629 0006 E82F      		mov r30,r24
 630 0008 F0E0      		ldi r31,0
 631 000a E050      		subi r30,lo8(-(CSWTCH.48))
 632 000c F040      		sbci r31,hi8(-(CSWTCH.48))
 633 000e 8081      		ld r24,Z
 634               	.LVL67:
 635 0010 0895      		ret
 636               	.L86:
 773:../../tmk_core/common/command.c ****     switch (code) {
 637               		.loc 1 773 0
 638 0012 80E0      		ldi r24,0
 787:../../tmk_core/common/command.c **** 
 639               		.loc 1 787 0
 640 0014 0895      		ret
 641               		.cfi_endproc
 642               	.LFE121:
 644               		.section	.text.command_proc,"ax",@progbits
 645               	.global	command_proc
 647               	command_proc:
 648               	.LFB107:
  76:../../tmk_core/common/command.c ****     switch (command_state) {
 649               		.loc 1 76 0
 650               		.cfi_startproc
 651               	.LVL68:
 652 0000 CF93      		push r28
 653               	.LCFI2:
 654               		.cfi_def_cfa_offset 3
 655               		.cfi_offset 28, -2
 656               	/* prologue: function */
 657               	/* frame size = 0 */
 658               	/* stack size = 1 */
 659               	.L__stack_usage = 1
 660 0002 C82F      		mov r28,r24
  77:../../tmk_core/common/command.c ****         case ONESHOT:
 661               		.loc 1 77 0
 662 0004 8091 0000 		lds r24,command_state
 663               	.LVL69:
 664 0008 8130      		cpi r24,lo8(1)
 665 000a 01F0      		breq .L89
 666 000c 00F0      		brlo .L90
 667 000e 8230      		cpi r24,lo8(2)
 668 0010 01F0      		breq .L91
 669 0012 00C0      		rjmp .L144
 670               	.L90:
  79:../../tmk_core/common/command.c ****                 return false;
 671               		.loc 1 79 0
 672 0014 E091 0000 		lds r30,keyboard_report
 673 0018 F091 0000 		lds r31,keyboard_report+1
 674 001c 8081      		ld r24,Z
 675 001e 8232      		cpi r24,lo8(34)
 676 0020 01F0      		breq .+2
 677 0022 00C0      		rjmp .L113
 678 0024 00C0      		rjmp .L143
 679               	.L89:
  84:../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 680               		.loc 1 84 0
 681 0026 E091 0000 		lds r30,keyboard_report
 682 002a F091 0000 		lds r31,keyboard_report+1
 683 002e 8081      		ld r24,Z
 684 0030 8232      		cpi r24,lo8(34)
 685 0032 01F4      		brne .L94
 686               	.L143:
  85:../../tmk_core/common/command.c ****             else
 687               		.loc 1 85 0
 688 0034 8C2F      		mov r24,r28
 689 0036 0E94 0000 		call command_extra
 690               	.LVL70:
 691 003a 8111      		cpse r24,__zero_reg__
 692 003c 00C0      		rjmp .L115
  85:../../tmk_core/common/command.c ****             else
 693               		.loc 1 85 0 is_stmt 0 discriminator 2
 694 003e 8C2F      		mov r24,r28
 695 0040 0E94 0000 		call command_common
 696               	.LVL71:
 697 0044 00C0      		rjmp .L96
 698               	.L115:
  85:../../tmk_core/common/command.c ****             else
 699               		.loc 1 85 0
 700 0046 81E0      		ldi r24,lo8(1)
 701 0048 90E0      		ldi r25,0
 702 004a 00C0      		rjmp .L96
 703               	.L94:
  87:../../tmk_core/common/command.c ****             break;
 704               		.loc 1 87 0 is_stmt 1
 705 004c 8C2F      		mov r24,r28
 706 004e 0E94 0000 		call command_console_extra
 707               	.LVL72:
 708 0052 8111      		cpse r24,__zero_reg__
 709 0054 00C0      		rjmp .L116
 710               	.LVL73:
 711               	.LBB26:
 712               	.LBB27:
 540:../../tmk_core/common/command.c ****         case KC_H:
 713               		.loc 1 540 0
 714 0056 C431      		cpi r28,lo8(20)
 715 0058 01F0      		breq .L98
 716 005a 00F4      		brsh .L99
 717 005c CB30      		cpi r28,lo8(11)
 718 005e 01F0      		breq .L116
 719 0060 C031      		cpi r28,lo8(16)
 720 0062 01F0      		breq .+2
 721 0064 00C0      		rjmp .L97
 553:../../tmk_core/common/command.c ****             return true;
 722               		.loc 1 553 0
 723 0066 82E0      		ldi r24,lo8(2)
 724 0068 8093 0000 		sts command_state,r24
 725 006c 00C0      		rjmp .L116
 726               	.L99:
 540:../../tmk_core/common/command.c ****         case KC_H:
 727               		.loc 1 540 0
 728 006e C932      		cpi r28,lo8(41)
 729 0070 01F0      		breq .L98
 730 0072 C833      		cpi r28,lo8(56)
 731 0074 01F0      		breq .L116
 732 0076 00C0      		rjmp .L97
 733               	.L98:
 547:../../tmk_core/common/command.c ****             return false;
 734               		.loc 1 547 0
 735 0078 1092 0000 		sts command_state,__zero_reg__
 736 007c 00C0      		rjmp .L97
 737               	.LVL74:
 738               	.L116:
 739               	.LBE27:
 740               	.LBE26:
  87:../../tmk_core/common/command.c ****             break;
 741               		.loc 1 87 0
 742 007e 81E0      		ldi r24,lo8(1)
 743               	.L96:
  87:../../tmk_core/common/command.c ****             break;
 744               		.loc 1 87 0 is_stmt 0 discriminator 6
 745 0080 8170      		andi r24,lo8(1)
 746 0082 00C0      		rjmp .L137
 747               	.L91:
 748               	.LVL75:
 749               	.LBB28:
 750               	.LBB29:
 708:../../tmk_core/common/command.c ****         case KC_H:
 751               		.loc 1 708 0 is_stmt 1
 752 0084 C932      		cpi r28,lo8(41)
 753 0086 01F0      		breq .L102
 754 0088 00F4      		brsh .L103
 755 008a C431      		cpi r28,lo8(20)
 756 008c 01F0      		breq .L102
 757 008e 00F4      		brsh .L104
 758 0090 C730      		cpi r28,lo8(7)
 759 0092 01F0      		breq .+2
 760 0094 00C0      		rjmp .L117
 747:../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 761               		.loc 1 747 0
 762 0096 8EE1      		ldi r24,lo8(30)
 763 0098 8093 0000 		sts mk_delay,r24
 748:../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 764               		.loc 1 748 0
 765 009c 82E3      		ldi r24,lo8(50)
 766 009e 8093 0000 		sts mk_interval,r24
 749:../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 767               		.loc 1 749 0
 768 00a2 8AE0      		ldi r24,lo8(10)
 769 00a4 8093 0000 		sts mk_max_speed,r24
 750:../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 770               		.loc 1 750 0
 771 00a8 84E1      		ldi r24,lo8(20)
 772 00aa 8093 0000 		sts mk_time_to_max,r24
 751:../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 773               		.loc 1 751 0
 774 00ae 88E0      		ldi r24,lo8(8)
 775 00b0 8093 0000 		sts mk_wheel_max_speed,r24
 752:../../tmk_core/common/command.c ****             print("set default\n");
 776               		.loc 1 752 0
 777 00b4 88E2      		ldi r24,lo8(40)
 778 00b6 8093 0000 		sts mk_wheel_time_to_max,r24
 779 00ba 00C0      		rjmp .L117
 780               	.L104:
 708:../../tmk_core/common/command.c ****         case KC_H:
 781               		.loc 1 708 0
 782 00bc 82EE      		ldi r24,lo8(-30)
 783 00be 8C0F      		add r24,r28
 784 00c0 8630      		cpi r24,lo8(6)
 785 00c2 00F4      		brsh .L117
 732:../../tmk_core/common/command.c ****             break;
 786               		.loc 1 732 0
 787 00c4 8C2F      		mov r24,r28
 788 00c6 0E94 0000 		call numkey2num
 789               	.LVL76:
 790 00ca 8093 0000 		sts mousekey_param,r24
 791 00ce 00C0      		rjmp .L117
 792               	.L103:
 708:../../tmk_core/common/command.c ****         case KC_H:
 793               		.loc 1 708 0
 794 00d0 CE34      		cpi r28,lo8(78)
 795 00d2 01F0      		breq .L107
 796 00d4 00F4      		brsh .L108
 797 00d6 CB34      		cpi r28,lo8(75)
 798 00d8 01F4      		brne .L117
 741:../../tmk_core/common/command.c ****             break;
 799               		.loc 1 741 0
 800 00da 6AE0      		ldi r22,lo8(10)
 801 00dc 00C0      		rjmp .L141
 802               	.L108:
 708:../../tmk_core/common/command.c ****         case KC_H:
 803               		.loc 1 708 0
 804 00de C135      		cpi r28,lo8(81)
 805 00e0 01F0      		breq .L110
 806 00e2 C235      		cpi r28,lo8(82)
 807 00e4 01F4      		brne .L117
 735:../../tmk_core/common/command.c ****             break;
 808               		.loc 1 735 0
 809 00e6 61E0      		ldi r22,lo8(1)
 810 00e8 00C0      		rjmp .L141
 811               	.L102:
 715:../../tmk_core/common/command.c ****                 mousekey_param = 0;
 812               		.loc 1 715 0
 813 00ea 8091 0000 		lds r24,mousekey_param
 814 00ee 8823      		tst r24
 815 00f0 01F0      		breq .L112
 716:../../tmk_core/common/command.c ****             } else {
 816               		.loc 1 716 0
 817 00f2 1092 0000 		sts mousekey_param,__zero_reg__
 818 00f6 00C0      		rjmp .L117
 819               	.L112:
 719:../../tmk_core/common/command.c ****                 return false;
 820               		.loc 1 719 0
 821 00f8 81E0      		ldi r24,lo8(1)
 822 00fa 8093 0000 		sts command_state,r24
 823 00fe 00C0      		rjmp .L137
 824               	.L110:
 738:../../tmk_core/common/command.c ****             break;
 825               		.loc 1 738 0
 826 0100 61E0      		ldi r22,lo8(1)
 827 0102 00C0      		rjmp .L140
 828               	.L141:
 741:../../tmk_core/common/command.c ****             break;
 829               		.loc 1 741 0
 830 0104 8091 0000 		lds r24,mousekey_param
 831 0108 0E94 0000 		call mousekey_param_inc
 832               	.LVL77:
 833 010c 00C0      		rjmp .L117
 834               	.L107:
 744:../../tmk_core/common/command.c ****             break;
 835               		.loc 1 744 0
 836 010e 6AE0      		ldi r22,lo8(10)
 837               	.L140:
 838 0110 8091 0000 		lds r24,mousekey_param
 839 0114 0E94 0000 		call mousekey_param_dec
 840               	.LVL78:
 841 0118 00C0      		rjmp .L117
 842               	.LVL79:
 843               	.L144:
 844               	.LBE29:
 845               	.LBE28:
  95:../../tmk_core/common/command.c ****             return false;
 846               		.loc 1 95 0
 847 011a 1092 0000 		sts command_state,__zero_reg__
 848               	.L113:
  80:../../tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 849               		.loc 1 80 0
 850 011e 80E0      		ldi r24,0
 851 0120 00C0      		rjmp .L137
 852               	.LVL80:
 853               	.L117:
  98:../../tmk_core/common/command.c **** }
 854               		.loc 1 98 0
 855 0122 81E0      		ldi r24,lo8(1)
 856 0124 00C0      		rjmp .L137
 857               	.LVL81:
 858               	.L97:
  87:../../tmk_core/common/command.c ****             break;
 859               		.loc 1 87 0
 860 0126 80E0      		ldi r24,0
 861 0128 00C0      		rjmp .L96
 862               	.LVL82:
 863               	.L137:
 864               	/* epilogue start */
  99:../../tmk_core/common/command.c **** 
 865               		.loc 1 99 0
 866 012a CF91      		pop r28
 867               	.LVL83:
 868 012c 0895      		ret
 869               		.cfi_endproc
 870               	.LFE107:
 872               		.section	.rodata.CSWTCH.48,"a",@progbits
 875               	CSWTCH.48:
 876 0000 01        		.byte	1
 877 0001 02        		.byte	2
 878 0002 03        		.byte	3
 879 0003 04        		.byte	4
 880 0004 05        		.byte	5
 881 0005 06        		.byte	6
 882 0006 07        		.byte	7
 883 0007 08        		.byte	8
 884 0008 09        		.byte	9
 885 0009 00        		.byte	0
 886               		.section	.bss.mousekey_param,"aw",@nobits
 889               	mousekey_param:
 890 0000 00        		.zero	1
 891               	.global	command_state
 892               		.section	.bss.command_state,"aw",@nobits
 895               	command_state:
 896 0000 00        		.zero	1
 897               		.text
 898               	.Letext0:
 899               		.file 3 "/usr/local/Cellar/avr-gcc/4.9.3/avr/include/stdint.h"
 900               		.file 4 "../../tmk_core/common/report.h"
 901               		.file 5 "../../tmk_core/common/debug.h"
 902               		.file 6 "../../tmk_core/common/command.h"
 903               		.file 7 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 904               		.file 8 "../../tmk_core/common/host.h"
 905               		.file 9 "../../tmk_core/common/action_util.h"
 906               		.file 10 "../../tmk_core/common/mousekey.h"
 907               		.file 11 "../../tmk_core/common/action.h"
 908               		.file 12 "../../tmk_core/common/bootloader.h"
 909               		.file 13 "../../tmk_core/common/keycode.h"
 910               		.file 14 "../../tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccZEYr01.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccZEYr01.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccZEYr01.s:4      *ABS*:000000000000003f __SREG__
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccZEYr01.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccZEYr01.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccZEYr01.s:12     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccZEYr01.s:182    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccZEYr01.s:301    .text.command_common:0000000000000000 command_common
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccZEYr01.s:895    .bss.command_state:0000000000000000 command_state
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccZEYr01.s:578    .text.command_extra:0000000000000000 command_extra
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccZEYr01.s:597    .text.command_console_extra:0000000000000000 command_console_extra
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccZEYr01.s:616    .text.numkey2num:0000000000000000 numkey2num
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccZEYr01.s:875    .rodata.CSWTCH.48:0000000000000000 CSWTCH.48
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccZEYr01.s:647    .text.command_proc:0000000000000000 command_proc
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccZEYr01.s:889    .bss.mousekey_param:0000000000000000 mousekey_param

UNDEFINED SYMBOLS
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
debug_config
clear_keyboard
keyboard_nkro
bootloader_jump
default_layer_set
keyboard_report
__do_copy_data
__do_clear_bss
