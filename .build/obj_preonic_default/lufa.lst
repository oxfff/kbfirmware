   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB115:
  14               		.file 1 "../../tmk_core/protocol/lufa/lufa.c"
   1:../../tmk_core/protocol/lufa/lufa.c **** /*
   2:../../tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:../../tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:../../tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:../../tmk_core/protocol/lufa/lufa.c ****  */
   7:../../tmk_core/protocol/lufa/lufa.c **** 
   8:../../tmk_core/protocol/lufa/lufa.c **** /*
   9:../../tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:../../tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:../../tmk_core/protocol/lufa/lufa.c **** 
  12:../../tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:../../tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:../../tmk_core/protocol/lufa/lufa.c **** */
  15:../../tmk_core/protocol/lufa/lufa.c **** 
  16:../../tmk_core/protocol/lufa/lufa.c **** /*
  17:../../tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:../../tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:../../tmk_core/protocol/lufa/lufa.c **** 
  20:../../tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:../../tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:../../tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:../../tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:../../tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:../../tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:../../tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:../../tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:../../tmk_core/protocol/lufa/lufa.c **** 
  29:../../tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:../../tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:../../tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:../../tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:../../tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:../../tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:../../tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:../../tmk_core/protocol/lufa/lufa.c ****   this software.
  37:../../tmk_core/protocol/lufa/lufa.c **** */
  38:../../tmk_core/protocol/lufa/lufa.c **** 
  39:../../tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:../../tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:../../tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:../../tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:../../tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:../../tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:../../tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:../../tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:../../tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:../../tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:../../tmk_core/protocol/lufa/lufa.c **** #endif
  50:../../tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:../../tmk_core/protocol/lufa/lufa.c **** 
  52:../../tmk_core/protocol/lufa/lufa.c **** #include "descriptor.h"
  53:../../tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:../../tmk_core/protocol/lufa/lufa.c **** 
  55:../../tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  56:../../tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  57:../../tmk_core/protocol/lufa/lufa.c **** #endif
  58:../../tmk_core/protocol/lufa/lufa.c **** 
  59:../../tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  60:../../tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  61:../../tmk_core/protocol/lufa/lufa.c **** #endif
  62:../../tmk_core/protocol/lufa/lufa.c **** 
  63:../../tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  64:../../tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  65:../../tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  66:../../tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  67:../../tmk_core/protocol/lufa/lufa.c **** 
  68:../../tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  69:../../tmk_core/protocol/lufa/lufa.c **** 
  70:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  71:../../tmk_core/protocol/lufa/lufa.c **** void usb_send_func(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
  72:../../tmk_core/protocol/lufa/lufa.c **** void usb_get_midi(MidiDevice * device);
  73:../../tmk_core/protocol/lufa/lufa.c **** void midi_usb_init(MidiDevice * device);
  74:../../tmk_core/protocol/lufa/lufa.c **** #endif
  75:../../tmk_core/protocol/lufa/lufa.c **** 
  76:../../tmk_core/protocol/lufa/lufa.c **** /* Host driver */
  77:../../tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
  78:../../tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
  79:../../tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
  80:../../tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
  81:../../tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
  82:../../tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
  83:../../tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
  84:../../tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
  85:../../tmk_core/protocol/lufa/lufa.c ****     send_mouse,
  86:../../tmk_core/protocol/lufa/lufa.c ****     send_system,
  87:../../tmk_core/protocol/lufa/lufa.c ****     send_consumer,
  88:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  89:../../tmk_core/protocol/lufa/lufa.c ****     usb_send_func,
  90:../../tmk_core/protocol/lufa/lufa.c ****     usb_get_midi,
  91:../../tmk_core/protocol/lufa/lufa.c ****     midi_usb_init
  92:../../tmk_core/protocol/lufa/lufa.c **** #endif
  93:../../tmk_core/protocol/lufa/lufa.c **** };
  94:../../tmk_core/protocol/lufa/lufa.c **** 
  95:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
  96:../../tmk_core/protocol/lufa/lufa.c ****  * MIDI
  97:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
  98:../../tmk_core/protocol/lufa/lufa.c **** 
  99:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 100:../../tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 101:../../tmk_core/protocol/lufa/lufa.c **** {
 102:../../tmk_core/protocol/lufa/lufa.c ****   .Config =
 103:../../tmk_core/protocol/lufa/lufa.c ****   {
 104:../../tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 105:../../tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 106:../../tmk_core/protocol/lufa/lufa.c ****     {
 107:../../tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 108:../../tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 109:../../tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 110:../../tmk_core/protocol/lufa/lufa.c ****     },
 111:../../tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 112:../../tmk_core/protocol/lufa/lufa.c ****     {
 113:../../tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 114:../../tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 115:../../tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 116:../../tmk_core/protocol/lufa/lufa.c ****     },
 117:../../tmk_core/protocol/lufa/lufa.c ****   },
 118:../../tmk_core/protocol/lufa/lufa.c **** };
 119:../../tmk_core/protocol/lufa/lufa.c **** 
 120:../../tmk_core/protocol/lufa/lufa.c **** #define SYSEX_START_OR_CONT 0x40
 121:../../tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_1 0x50
 122:../../tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_2 0x60
 123:../../tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_3 0x70
 124:../../tmk_core/protocol/lufa/lufa.c **** 
 125:../../tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_1 0x50
 126:../../tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_2 0x20
 127:../../tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_3 0x30
 128:../../tmk_core/protocol/lufa/lufa.c **** #endif
 129:../../tmk_core/protocol/lufa/lufa.c **** 
 130:../../tmk_core/protocol/lufa/lufa.c **** 
 131:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 132:../../tmk_core/protocol/lufa/lufa.c ****  * Console
 133:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 134:../../tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 135:../../tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 136:../../tmk_core/protocol/lufa/lufa.c **** {
 137:../../tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 138:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 139:../../tmk_core/protocol/lufa/lufa.c ****         return;
 140:../../tmk_core/protocol/lufa/lufa.c **** 
 141:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 142:../../tmk_core/protocol/lufa/lufa.c **** 
 143:../../tmk_core/protocol/lufa/lufa.c **** #if 0
 144:../../tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 145:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 146:../../tmk_core/protocol/lufa/lufa.c **** 
 147:../../tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 148:../../tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 149:../../tmk_core/protocol/lufa/lufa.c ****     {
 150:../../tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 151:../../tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 152:../../tmk_core/protocol/lufa/lufa.c ****         {
 153:../../tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 154:../../tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 155:../../tmk_core/protocol/lufa/lufa.c **** 
 156:../../tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 157:../../tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 158:../../tmk_core/protocol/lufa/lufa.c **** 
 159:../../tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 160:../../tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 161:../../tmk_core/protocol/lufa/lufa.c ****         }
 162:../../tmk_core/protocol/lufa/lufa.c **** 
 163:../../tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 164:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 165:../../tmk_core/protocol/lufa/lufa.c ****     }
 166:../../tmk_core/protocol/lufa/lufa.c **** #endif
 167:../../tmk_core/protocol/lufa/lufa.c **** 
 168:../../tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 169:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 170:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 171:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 172:../../tmk_core/protocol/lufa/lufa.c ****         return;
 173:../../tmk_core/protocol/lufa/lufa.c ****     }
 174:../../tmk_core/protocol/lufa/lufa.c **** 
 175:../../tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 176:../../tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 177:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 178:../../tmk_core/protocol/lufa/lufa.c **** 
 179:../../tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 180:../../tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 181:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 182:../../tmk_core/protocol/lufa/lufa.c ****     }
 183:../../tmk_core/protocol/lufa/lufa.c **** 
 184:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 185:../../tmk_core/protocol/lufa/lufa.c **** }
 186:../../tmk_core/protocol/lufa/lufa.c **** #endif
 187:../../tmk_core/protocol/lufa/lufa.c **** 
 188:../../tmk_core/protocol/lufa/lufa.c **** 
 189:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 190:../../tmk_core/protocol/lufa/lufa.c ****  * USB Events
 191:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 192:../../tmk_core/protocol/lufa/lufa.c **** /*
 193:../../tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 194:../../tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 195:../../tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 196:../../tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 197:../../tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 198:../../tmk_core/protocol/lufa/lufa.c **** */
 199:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 200:../../tmk_core/protocol/lufa/lufa.c **** {
 201:../../tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 202:../../tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 203:../../tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 204:../../tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 205:../../tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 206:../../tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 207:../../tmk_core/protocol/lufa/lufa.c ****     }
 208:../../tmk_core/protocol/lufa/lufa.c **** }
 209:../../tmk_core/protocol/lufa/lufa.c **** 
 210:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 211:../../tmk_core/protocol/lufa/lufa.c **** {
 212:../../tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 213:../../tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 214:../../tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 215:../../tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 216:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 217:../../tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 218:../../tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 219:../../tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 220:../../tmk_core/protocol/lufa/lufa.c ****     }
 221:../../tmk_core/protocol/lufa/lufa.c **** */
 222:../../tmk_core/protocol/lufa/lufa.c **** }
 223:../../tmk_core/protocol/lufa/lufa.c **** 
 224:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 225:../../tmk_core/protocol/lufa/lufa.c **** {
 226:../../tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 227:../../tmk_core/protocol/lufa/lufa.c **** }
 228:../../tmk_core/protocol/lufa/lufa.c **** 
 229:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 230:../../tmk_core/protocol/lufa/lufa.c **** {
 231:../../tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 232:../../tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 233:../../tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 234:../../tmk_core/protocol/lufa/lufa.c **** #endif
 235:../../tmk_core/protocol/lufa/lufa.c **** }
 236:../../tmk_core/protocol/lufa/lufa.c **** 
 237:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 238:../../tmk_core/protocol/lufa/lufa.c **** {
 239:../../tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 240:../../tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 241:../../tmk_core/protocol/lufa/lufa.c **** 
 242:../../tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 243:../../tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 244:../../tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 245:../../tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 246:../../tmk_core/protocol/lufa/lufa.c **** #endif
 247:../../tmk_core/protocol/lufa/lufa.c **** }
 248:../../tmk_core/protocol/lufa/lufa.c **** 
 249:../../tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 250:../../tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 251:../../tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 252:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t sreg = SREG; cli(); console_flush = b; SREG = sreg; \
 253:../../tmk_core/protocol/lufa/lufa.c **** } while (0)
 254:../../tmk_core/protocol/lufa/lufa.c **** 
 255:../../tmk_core/protocol/lufa/lufa.c **** // called every 1ms
 256:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 257:../../tmk_core/protocol/lufa/lufa.c **** {
 258:../../tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 259:../../tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 260:../../tmk_core/protocol/lufa/lufa.c ****     count = 0;
 261:../../tmk_core/protocol/lufa/lufa.c **** 
 262:../../tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 263:../../tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 264:../../tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 265:../../tmk_core/protocol/lufa/lufa.c **** }
 266:../../tmk_core/protocol/lufa/lufa.c **** #endif
 267:../../tmk_core/protocol/lufa/lufa.c **** 
 268:../../tmk_core/protocol/lufa/lufa.c **** /** Event handler for the USB_ConfigurationChanged event.
 269:../../tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 270:../../tmk_core/protocol/lufa/lufa.c ****  *
 271:../../tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 272:../../tmk_core/protocol/lufa/lufa.c ****  * it is safe to use singl bank for all endpoints.
 273:../../tmk_core/protocol/lufa/lufa.c ****  */
 274:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 275:../../tmk_core/protocol/lufa/lufa.c **** {
 276:../../tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 277:../../tmk_core/protocol/lufa/lufa.c **** 
 278:../../tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 279:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 280:../../tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 281:../../tmk_core/protocol/lufa/lufa.c **** 
 282:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 283:../../tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 284:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 285:../../tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 286:../../tmk_core/protocol/lufa/lufa.c **** #endif
 287:../../tmk_core/protocol/lufa/lufa.c **** 
 288:../../tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 289:../../tmk_core/protocol/lufa/lufa.c ****     /* Setup Extra HID Report Endpoint */
 290:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(EXTRAKEY_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 291:../../tmk_core/protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 292:../../tmk_core/protocol/lufa/lufa.c **** #endif
 293:../../tmk_core/protocol/lufa/lufa.c **** 
 294:../../tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 295:../../tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 296:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 297:../../tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 298:../../tmk_core/protocol/lufa/lufa.c **** #if 0
 299:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 300:../../tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 301:../../tmk_core/protocol/lufa/lufa.c **** #endif
 302:../../tmk_core/protocol/lufa/lufa.c **** #endif
 303:../../tmk_core/protocol/lufa/lufa.c **** 
 304:../../tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 305:../../tmk_core/protocol/lufa/lufa.c ****     /* Setup NKRO HID Report Endpoints */
 306:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 307:../../tmk_core/protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 308:../../tmk_core/protocol/lufa/lufa.c **** #endif
 309:../../tmk_core/protocol/lufa/lufa.c **** 
 310:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 311:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 312:../../tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 313:../../tmk_core/protocol/lufa/lufa.c **** #endif
 314:../../tmk_core/protocol/lufa/lufa.c **** }
 315:../../tmk_core/protocol/lufa/lufa.c **** 
 316:../../tmk_core/protocol/lufa/lufa.c **** /*
 317:../../tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 318:../../tmk_core/protocol/lufa/lufa.c **** 
 319:../../tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 320:../../tmk_core/protocol/lufa/lufa.c **** 
 321:../../tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 322:../../tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 323:../../tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 324:../../tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 325:../../tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 326:../../tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 327:../../tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 328:../../tmk_core/protocol/lufa/lufa.c **** */
 329:../../tmk_core/protocol/lufa/lufa.c **** /** Event handler for the USB_ControlRequest event.
 330:../../tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 331:../../tmk_core/protocol/lufa/lufa.c ****  */
 332:../../tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 333:../../tmk_core/protocol/lufa/lufa.c **** {
 334:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 335:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 336:../../tmk_core/protocol/lufa/lufa.c **** 
 337:../../tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 338:../../tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 339:../../tmk_core/protocol/lufa/lufa.c ****     {
 340:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 341:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 342:../../tmk_core/protocol/lufa/lufa.c ****             {
 343:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 344:../../tmk_core/protocol/lufa/lufa.c **** 
 345:../../tmk_core/protocol/lufa/lufa.c ****                 // Interface
 346:../../tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 347:../../tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 348:../../tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 349:../../tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 350:../../tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 351:../../tmk_core/protocol/lufa/lufa.c ****                     break;
 352:../../tmk_core/protocol/lufa/lufa.c ****                 }
 353:../../tmk_core/protocol/lufa/lufa.c **** 
 354:../../tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 355:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 356:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 357:../../tmk_core/protocol/lufa/lufa.c ****             }
 358:../../tmk_core/protocol/lufa/lufa.c **** 
 359:../../tmk_core/protocol/lufa/lufa.c ****             break;
 360:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 361:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 362:../../tmk_core/protocol/lufa/lufa.c ****             {
 363:../../tmk_core/protocol/lufa/lufa.c **** 
 364:../../tmk_core/protocol/lufa/lufa.c ****                 // Interface
 365:../../tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 366:../../tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 367:../../tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 368:../../tmk_core/protocol/lufa/lufa.c ****                 case NKRO_INTERFACE:
 369:../../tmk_core/protocol/lufa/lufa.c **** #endif
 370:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 371:../../tmk_core/protocol/lufa/lufa.c **** 
 372:../../tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 373:../../tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 374:../../tmk_core/protocol/lufa/lufa.c ****                           return;
 375:../../tmk_core/protocol/lufa/lufa.c ****                     }
 376:../../tmk_core/protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 377:../../tmk_core/protocol/lufa/lufa.c **** 
 378:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 379:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 380:../../tmk_core/protocol/lufa/lufa.c ****                     break;
 381:../../tmk_core/protocol/lufa/lufa.c ****                 }
 382:../../tmk_core/protocol/lufa/lufa.c **** 
 383:../../tmk_core/protocol/lufa/lufa.c ****             }
 384:../../tmk_core/protocol/lufa/lufa.c **** 
 385:../../tmk_core/protocol/lufa/lufa.c ****             break;
 386:../../tmk_core/protocol/lufa/lufa.c **** 
 387:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 388:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 389:../../tmk_core/protocol/lufa/lufa.c ****             {
 390:../../tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 391:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 392:../../tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 393:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 394:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 395:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 396:../../tmk_core/protocol/lufa/lufa.c ****                 }
 397:../../tmk_core/protocol/lufa/lufa.c ****             }
 398:../../tmk_core/protocol/lufa/lufa.c **** 
 399:../../tmk_core/protocol/lufa/lufa.c ****             break;
 400:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 401:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 402:../../tmk_core/protocol/lufa/lufa.c ****             {
 403:../../tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 404:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 405:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 406:../../tmk_core/protocol/lufa/lufa.c **** 
 407:../../tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 408:../../tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 409:../../tmk_core/protocol/lufa/lufa.c ****                 }
 410:../../tmk_core/protocol/lufa/lufa.c ****             }
 411:../../tmk_core/protocol/lufa/lufa.c **** 
 412:../../tmk_core/protocol/lufa/lufa.c ****             break;
 413:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 414:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 415:../../tmk_core/protocol/lufa/lufa.c ****             {
 416:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 417:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 418:../../tmk_core/protocol/lufa/lufa.c **** 
 419:../../tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 420:../../tmk_core/protocol/lufa/lufa.c ****             }
 421:../../tmk_core/protocol/lufa/lufa.c **** 
 422:../../tmk_core/protocol/lufa/lufa.c ****             break;
 423:../../tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 424:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 425:../../tmk_core/protocol/lufa/lufa.c ****             {
 426:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 427:../../tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 428:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 429:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 430:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 431:../../tmk_core/protocol/lufa/lufa.c ****             }
 432:../../tmk_core/protocol/lufa/lufa.c **** 
 433:../../tmk_core/protocol/lufa/lufa.c ****             break;
 434:../../tmk_core/protocol/lufa/lufa.c ****     }
 435:../../tmk_core/protocol/lufa/lufa.c **** }
 436:../../tmk_core/protocol/lufa/lufa.c **** 
 437:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 438:../../tmk_core/protocol/lufa/lufa.c ****  * Host driver
 439:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 440:../../tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 441:../../tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 441 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 442:../../tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
 443:../../tmk_core/protocol/lufa/lufa.c **** }
  21               		.loc 1 443 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23 0004 0895      		ret
  24               		.cfi_endproc
  25               	.LFE115:
  27               		.section	.text.send_consumer,"ax",@progbits
  29               	send_consumer:
  30               	.LFB119:
 444:../../tmk_core/protocol/lufa/lufa.c **** 
 445:../../tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 446:../../tmk_core/protocol/lufa/lufa.c **** {
 447:../../tmk_core/protocol/lufa/lufa.c **** 
 448:../../tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 449:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0xFD);
 450:../../tmk_core/protocol/lufa/lufa.c ****     for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 451:../../tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->raw[i]);
 452:../../tmk_core/protocol/lufa/lufa.c ****     }
 453:../../tmk_core/protocol/lufa/lufa.c **** #endif
 454:../../tmk_core/protocol/lufa/lufa.c **** 
 455:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 456:../../tmk_core/protocol/lufa/lufa.c **** 
 457:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 458:../../tmk_core/protocol/lufa/lufa.c ****         return;
 459:../../tmk_core/protocol/lufa/lufa.c **** 
 460:../../tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 461:../../tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 462:../../tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keyboard_nkro) {
 463:../../tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 464:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 465:../../tmk_core/protocol/lufa/lufa.c **** 
 466:../../tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 1ms */
 467:../../tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 468:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 469:../../tmk_core/protocol/lufa/lufa.c **** 
 470:../../tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 471:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 472:../../tmk_core/protocol/lufa/lufa.c ****     }
 473:../../tmk_core/protocol/lufa/lufa.c ****     else
 474:../../tmk_core/protocol/lufa/lufa.c **** #endif
 475:../../tmk_core/protocol/lufa/lufa.c ****     {
 476:../../tmk_core/protocol/lufa/lufa.c ****         /* Boot protocol */
 477:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
 478:../../tmk_core/protocol/lufa/lufa.c **** 
 479:../../tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 10ms */
 480:../../tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 481:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 482:../../tmk_core/protocol/lufa/lufa.c **** 
 483:../../tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 484:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 485:../../tmk_core/protocol/lufa/lufa.c ****     }
 486:../../tmk_core/protocol/lufa/lufa.c **** 
 487:../../tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 488:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 489:../../tmk_core/protocol/lufa/lufa.c **** 
 490:../../tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 491:../../tmk_core/protocol/lufa/lufa.c **** }
 492:../../tmk_core/protocol/lufa/lufa.c **** 
 493:../../tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 494:../../tmk_core/protocol/lufa/lufa.c **** {
 495:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 496:../../tmk_core/protocol/lufa/lufa.c **** 
 497:../../tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 498:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0xFD);
 499:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 500:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x03);
 501:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->buttons);
 502:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->x);
 503:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->y);
 504:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->v); // should try sending the wheel v here
 505:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->h); // should try sending the wheel h here
 506:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 507:../../tmk_core/protocol/lufa/lufa.c **** #endif
 508:../../tmk_core/protocol/lufa/lufa.c **** 
 509:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 510:../../tmk_core/protocol/lufa/lufa.c **** 
 511:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 512:../../tmk_core/protocol/lufa/lufa.c ****         return;
 513:../../tmk_core/protocol/lufa/lufa.c **** 
 514:../../tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 515:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 516:../../tmk_core/protocol/lufa/lufa.c **** 
 517:../../tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 518:../../tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 519:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 520:../../tmk_core/protocol/lufa/lufa.c **** 
 521:../../tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 522:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 523:../../tmk_core/protocol/lufa/lufa.c **** 
 524:../../tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 525:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 526:../../tmk_core/protocol/lufa/lufa.c **** #endif
 527:../../tmk_core/protocol/lufa/lufa.c **** }
 528:../../tmk_core/protocol/lufa/lufa.c **** 
 529:../../tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 530:../../tmk_core/protocol/lufa/lufa.c **** {
 531:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 532:../../tmk_core/protocol/lufa/lufa.c **** 
 533:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 534:../../tmk_core/protocol/lufa/lufa.c ****         return;
 535:../../tmk_core/protocol/lufa/lufa.c **** 
 536:../../tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 537:../../tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 538:../../tmk_core/protocol/lufa/lufa.c ****         .usage = data
 539:../../tmk_core/protocol/lufa/lufa.c ****     };
 540:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 541:../../tmk_core/protocol/lufa/lufa.c **** 
 542:../../tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 543:../../tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 544:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 545:../../tmk_core/protocol/lufa/lufa.c **** 
 546:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 547:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 548:../../tmk_core/protocol/lufa/lufa.c **** }
 549:../../tmk_core/protocol/lufa/lufa.c **** 
 550:../../tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 551:../../tmk_core/protocol/lufa/lufa.c **** {
  31               		.loc 1 551 0
  32               		.cfi_startproc
  33               	.LVL0:
  34 0000 CF93      		push r28
  35               	.LCFI0:
  36               		.cfi_def_cfa_offset 3
  37               		.cfi_offset 28, -2
  38 0002 DF93      		push r29
  39               	.LCFI1:
  40               		.cfi_def_cfa_offset 4
  41               		.cfi_offset 29, -3
  42 0004 00D0      		rcall .
  43 0006 1F92      		push __zero_reg__
  44               	.LCFI2:
  45               		.cfi_def_cfa_offset 7
  46 0008 CDB7      		in r28,__SP_L__
  47 000a DEB7      		in r29,__SP_H__
  48               	.LCFI3:
  49               		.cfi_def_cfa_register 28
  50               	/* prologue: function */
  51               	/* frame size = 3 */
  52               	/* stack size = 5 */
  53               	.L__stack_usage = 5
  54 000c 9C01      		movw r18,r24
  55               	.LVL1:
 552:../../tmk_core/protocol/lufa/lufa.c **** 
 553:../../tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 554:../../tmk_core/protocol/lufa/lufa.c ****     static uint16_t last_data = 0;
 555:../../tmk_core/protocol/lufa/lufa.c ****     if (data == last_data) return;
 556:../../tmk_core/protocol/lufa/lufa.c ****     last_data = data;
 557:../../tmk_core/protocol/lufa/lufa.c ****     uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 558:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0xFD);
 559:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 560:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x02);
 561:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send((bitmap>>8)&0xFF);
 562:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(bitmap&0xFF);
 563:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 564:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 565:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 566:../../tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 567:../../tmk_core/protocol/lufa/lufa.c **** #endif
 568:../../tmk_core/protocol/lufa/lufa.c **** 
 569:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 570:../../tmk_core/protocol/lufa/lufa.c **** 
 571:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
  56               		.loc 1 571 0
  57 000e 8091 0000 		lds r24,USB_DeviceState
  58               	.LVL2:
  59 0012 8430      		cpi r24,lo8(4)
  60 0014 01F4      		brne .L2
 572:../../tmk_core/protocol/lufa/lufa.c ****         return;
 573:../../tmk_core/protocol/lufa/lufa.c **** 
 574:../../tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
  61               		.loc 1 574 0
  62 0016 93E0      		ldi r25,lo8(3)
  63 0018 9983      		std Y+1,r25
  64 001a 3B83      		std Y+3,r19
  65 001c 2A83      		std Y+2,r18
  66               	.LVL3:
  67               	.LBB113:
  68               	.LBB114:
  69               		.file 2 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2014.
   4:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 254:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  70               		.loc 2 270 0
  71 001e 9093 E900 		sts 233,r25
  72               	.LVL4:
  73 0022 8FEF      		ldi r24,lo8(-1)
  74               	.LVL5:
  75               	.L4:
  76               	.LBE114:
  77               	.LBE113:
  78               	.LBB115:
  79               	.LBB116:
 271:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 314:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  80               		.loc 2 360 0
  81 0024 9091 E800 		lds r25,232
  82 0028 8150      		subi r24,lo8(-(-1))
  83               	.LVL6:
  84               	.LBE116:
  85               	.LBE115:
 575:../../tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 576:../../tmk_core/protocol/lufa/lufa.c ****         .usage = data
 577:../../tmk_core/protocol/lufa/lufa.c ****     };
 578:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 579:../../tmk_core/protocol/lufa/lufa.c **** 
 580:../../tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 581:../../tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
  86               		.loc 1 581 0
  87 002a 95FD      		sbrc r25,5
  88 002c 00C0      		rjmp .L5
  89               	.LVL7:
  90               	.LBB117:
  91               	.LBB118:
  92               		.file 3 "/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		}
 204:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		return;
 205:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	}
 206:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	else
 207:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #endif
 210:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** }
 211:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 212:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** /**
 213:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 215:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 217:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 220:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 222:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 226:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 231:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 236:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    respectively.
 240:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 241:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    \note
 242:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 243:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 253:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****  */
 254:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** void
 255:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** {
 257:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 265:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 268:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 271:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#else
 272:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		//round up by default
 273:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	#endif
 275:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 
 276:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  93               		.loc 3 276 0
  94 002e 95ED      		ldi r25,lo8(-43)
  95 0030 9A95      		1: dec r25
  96 0032 01F4      		brne 1b
  97 0034 0000      		nop
  98               	.LVL8:
  99               	.LBE118:
 100               	.LBE117:
 101               		.loc 1 581 0
 102 0036 8111      		cpse r24,__zero_reg__
 103 0038 00C0      		rjmp .L4
 104               	.LVL9:
 105               	.L5:
 106               	.LBB119:
 107               	.LBB120:
 108               		.loc 2 360 0
 109 003a 8091 E800 		lds r24,232
 110               	.LBE120:
 111               	.LBE119:
 582:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 112               		.loc 1 582 0
 113 003e 85FF      		sbrs r24,5
 114 0040 00C0      		rjmp .L2
 583:../../tmk_core/protocol/lufa/lufa.c **** 
 584:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 115               		.loc 1 584 0
 116 0042 40E0      		ldi r20,0
 117 0044 50E0      		ldi r21,0
 118 0046 63E0      		ldi r22,lo8(3)
 119 0048 70E0      		ldi r23,0
 120 004a CE01      		movw r24,r28
 121 004c 0196      		adiw r24,1
 122 004e 0E94 0000 		call Endpoint_Write_Stream_LE
 123               	.LVL10:
 124               	.LBB121:
 125               	.LBB122:
 361:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 371:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 126               		.loc 2 456 0
 127 0052 8091 E800 		lds r24,232
 128 0056 8E77      		andi r24,lo8(126)
 129 0058 8093 E800 		sts 232,r24
 130               	.LVL11:
 131               	.L2:
 132               	/* epilogue start */
 133               	.LBE122:
 134               	.LBE121:
 585:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 586:../../tmk_core/protocol/lufa/lufa.c **** }
 135               		.loc 1 586 0
 136 005c 0F90      		pop __tmp_reg__
 137 005e 0F90      		pop __tmp_reg__
 138 0060 0F90      		pop __tmp_reg__
 139 0062 DF91      		pop r29
 140 0064 CF91      		pop r28
 141 0066 0895      		ret
 142               		.cfi_endproc
 143               	.LFE119:
 145               		.section	.text.send_system,"ax",@progbits
 147               	send_system:
 148               	.LFB118:
 530:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 149               		.loc 1 530 0
 150               		.cfi_startproc
 151               	.LVL12:
 152 0000 CF93      		push r28
 153               	.LCFI4:
 154               		.cfi_def_cfa_offset 3
 155               		.cfi_offset 28, -2
 156 0002 DF93      		push r29
 157               	.LCFI5:
 158               		.cfi_def_cfa_offset 4
 159               		.cfi_offset 29, -3
 160 0004 00D0      		rcall .
 161 0006 1F92      		push __zero_reg__
 162               	.LCFI6:
 163               		.cfi_def_cfa_offset 7
 164 0008 CDB7      		in r28,__SP_L__
 165 000a DEB7      		in r29,__SP_H__
 166               	.LCFI7:
 167               		.cfi_def_cfa_register 28
 168               	/* prologue: function */
 169               	/* frame size = 3 */
 170               	/* stack size = 5 */
 171               	.L__stack_usage = 5
 172               	.LVL13:
 533:../../tmk_core/protocol/lufa/lufa.c ****         return;
 173               		.loc 1 533 0
 174 000c 2091 0000 		lds r18,USB_DeviceState
 175 0010 2430      		cpi r18,lo8(4)
 176 0012 01F4      		brne .L15
 536:../../tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 177               		.loc 1 536 0
 178 0014 22E0      		ldi r18,lo8(2)
 179 0016 2983      		std Y+1,r18
 180 0018 9B83      		std Y+3,r25
 181 001a 8A83      		std Y+2,r24
 182               	.LVL14:
 183               	.LBB123:
 184               	.LBB124:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 185               		.loc 2 270 0
 186 001c 83E0      		ldi r24,lo8(3)
 187               	.LVL15:
 188 001e 8093 E900 		sts 233,r24
 189               	.LVL16:
 190 0022 8FEF      		ldi r24,lo8(-1)
 191               	.LVL17:
 192               	.L17:
 193               	.LBE124:
 194               	.LBE123:
 195               	.LBB125:
 196               	.LBB126:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 197               		.loc 2 360 0
 198 0024 9091 E800 		lds r25,232
 199 0028 8150      		subi r24,lo8(-(-1))
 200               	.LVL18:
 201               	.LBE126:
 202               	.LBE125:
 543:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 203               		.loc 1 543 0
 204 002a 95FD      		sbrc r25,5
 205 002c 00C0      		rjmp .L18
 206               	.LVL19:
 207               	.LBB127:
 208               	.LBB128:
 209               		.loc 3 276 0
 210 002e 95ED      		ldi r25,lo8(-43)
 211 0030 9A95      		1: dec r25
 212 0032 01F4      		brne 1b
 213 0034 0000      		nop
 214               	.LVL20:
 215               	.LBE128:
 216               	.LBE127:
 543:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 217               		.loc 1 543 0
 218 0036 8111      		cpse r24,__zero_reg__
 219 0038 00C0      		rjmp .L17
 220               	.LVL21:
 221               	.L18:
 222               	.LBB129:
 223               	.LBB130:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 224               		.loc 2 360 0
 225 003a 8091 E800 		lds r24,232
 226               	.LBE130:
 227               	.LBE129:
 544:../../tmk_core/protocol/lufa/lufa.c **** 
 228               		.loc 1 544 0
 229 003e 85FF      		sbrs r24,5
 230 0040 00C0      		rjmp .L15
 546:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 231               		.loc 1 546 0
 232 0042 40E0      		ldi r20,0
 233 0044 50E0      		ldi r21,0
 234 0046 63E0      		ldi r22,lo8(3)
 235 0048 70E0      		ldi r23,0
 236 004a CE01      		movw r24,r28
 237 004c 0196      		adiw r24,1
 238 004e 0E94 0000 		call Endpoint_Write_Stream_LE
 239               	.LVL22:
 240               	.LBB131:
 241               	.LBB132:
 242               		.loc 2 456 0
 243 0052 8091 E800 		lds r24,232
 244 0056 8E77      		andi r24,lo8(126)
 245 0058 8093 E800 		sts 232,r24
 246               	.LVL23:
 247               	.L15:
 248               	/* epilogue start */
 249               	.LBE132:
 250               	.LBE131:
 548:../../tmk_core/protocol/lufa/lufa.c **** 
 251               		.loc 1 548 0
 252 005c 0F90      		pop __tmp_reg__
 253 005e 0F90      		pop __tmp_reg__
 254 0060 0F90      		pop __tmp_reg__
 255 0062 DF91      		pop r29
 256 0064 CF91      		pop r28
 257 0066 0895      		ret
 258               		.cfi_endproc
 259               	.LFE118:
 261               		.section	.text.send_mouse,"ax",@progbits
 263               	send_mouse:
 264               	.LFB117:
 494:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 265               		.loc 1 494 0
 266               		.cfi_startproc
 267               	.LVL24:
 268               	/* prologue: function */
 269               	/* frame size = 0 */
 270               	/* stack size = 0 */
 271               	.L__stack_usage = 0
 511:../../tmk_core/protocol/lufa/lufa.c ****         return;
 272               		.loc 1 511 0
 273 0000 2091 0000 		lds r18,USB_DeviceState
 274 0004 2430      		cpi r18,lo8(4)
 275 0006 01F4      		brne .L27
 276               	.LVL25:
 277               	.LBB133:
 278               	.LBB134:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 279               		.loc 2 270 0
 280 0008 22E0      		ldi r18,lo8(2)
 281 000a 2093 E900 		sts 233,r18
 282               	.LVL26:
 283 000e 2FEF      		ldi r18,lo8(-1)
 284               	.LVL27:
 285               	.L30:
 286               	.LBE134:
 287               	.LBE133:
 288               	.LBB135:
 289               	.LBB136:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 290               		.loc 2 360 0
 291 0010 3091 E800 		lds r19,232
 292 0014 2150      		subi r18,lo8(-(-1))
 293               	.LVL28:
 294               	.LBE136:
 295               	.LBE135:
 518:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 296               		.loc 1 518 0
 297 0016 35FD      		sbrc r19,5
 298 0018 00C0      		rjmp .L31
 299               	.LVL29:
 300               	.LBB137:
 301               	.LBB138:
 302               		.loc 3 276 0
 303 001a 35ED      		ldi r19,lo8(-43)
 304 001c 3A95      		1: dec r19
 305 001e 01F4      		brne 1b
 306 0020 0000      		nop
 307               	.LVL30:
 308               	.LBE138:
 309               	.LBE137:
 518:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 310               		.loc 1 518 0
 311 0022 2111      		cpse r18,__zero_reg__
 312 0024 00C0      		rjmp .L30
 313               	.LVL31:
 314               	.L31:
 315               	.LBB139:
 316               	.LBB140:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 317               		.loc 2 360 0
 318 0026 2091 E800 		lds r18,232
 319               	.LBE140:
 320               	.LBE139:
 519:../../tmk_core/protocol/lufa/lufa.c **** 
 321               		.loc 1 519 0
 322 002a 25FF      		sbrs r18,5
 323 002c 00C0      		rjmp .L27
 522:../../tmk_core/protocol/lufa/lufa.c **** 
 324               		.loc 1 522 0
 325 002e 40E0      		ldi r20,0
 326 0030 50E0      		ldi r21,0
 327 0032 65E0      		ldi r22,lo8(5)
 328 0034 70E0      		ldi r23,0
 329 0036 0E94 0000 		call Endpoint_Write_Stream_LE
 330               	.LVL32:
 331               	.LBB141:
 332               	.LBB142:
 333               		.loc 2 456 0
 334 003a 8091 E800 		lds r24,232
 335 003e 8E77      		andi r24,lo8(126)
 336 0040 8093 E800 		sts 232,r24
 337               	.LVL33:
 338               	.L27:
 339 0044 0895      		ret
 340               	.LBE142:
 341               	.LBE141:
 342               		.cfi_endproc
 343               	.LFE117:
 345               		.section	.text.send_keyboard,"ax",@progbits
 347               	send_keyboard:
 348               	.LFB116:
 446:../../tmk_core/protocol/lufa/lufa.c **** 
 349               		.loc 1 446 0
 350               		.cfi_startproc
 351               	.LVL34:
 352 0000 CF93      		push r28
 353               	.LCFI8:
 354               		.cfi_def_cfa_offset 3
 355               		.cfi_offset 28, -2
 356 0002 DF93      		push r29
 357               	.LCFI9:
 358               		.cfi_def_cfa_offset 4
 359               		.cfi_offset 29, -3
 360               	/* prologue: function */
 361               	/* frame size = 0 */
 362               	/* stack size = 2 */
 363               	.L__stack_usage = 2
 364 0004 EC01      		movw r28,r24
 365               	.LVL35:
 457:../../tmk_core/protocol/lufa/lufa.c ****         return;
 366               		.loc 1 457 0
 367 0006 9091 0000 		lds r25,USB_DeviceState
 368 000a 9430      		cpi r25,lo8(4)
 369 000c 01F0      		breq .+2
 370 000e 00C0      		rjmp .L40
 462:../../tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 371               		.loc 1 462 0
 372 0010 8091 0000 		lds r24,keyboard_protocol
 373               	.LVL36:
 374 0014 8823      		tst r24
 375 0016 01F0      		breq .L43
 462:../../tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 376               		.loc 1 462 0 is_stmt 0 discriminator 1
 377 0018 8091 0000 		lds r24,keyboard_nkro
 378 001c 8823      		tst r24
 379 001e 01F0      		breq .L43
 380               	.LVL37:
 381               	.LBB143:
 382               	.LBB144:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 383               		.loc 2 270 0 is_stmt 1
 384 0020 9093 E900 		sts 233,r25
 385               	.LVL38:
 386 0024 8FEF      		ldi r24,lo8(-1)
 387               	.LVL39:
 388               	.L44:
 389               	.LBE144:
 390               	.LBE143:
 391               	.LBB145:
 392               	.LBB146:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 393               		.loc 2 360 0
 394 0026 9091 E800 		lds r25,232
 395 002a 8150      		subi r24,lo8(-(-1))
 396               	.LVL40:
 397               	.LBE146:
 398               	.LBE145:
 467:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 399               		.loc 1 467 0
 400 002c 95FD      		sbrc r25,5
 401 002e 00C0      		rjmp .L45
 402               	.LVL41:
 403               	.LBB147:
 404               	.LBB148:
 405               		.loc 3 276 0
 406 0030 95E1      		ldi r25,lo8(21)
 407 0032 9A95      		1: dec r25
 408 0034 01F4      		brne 1b
 409 0036 0000      		nop
 410               	.LVL42:
 411               	.LBE148:
 412               	.LBE147:
 467:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 413               		.loc 1 467 0
 414 0038 8111      		cpse r24,__zero_reg__
 415 003a 00C0      		rjmp .L44
 416               	.LVL43:
 417               	.L45:
 418               	.LBB149:
 419               	.LBB150:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 420               		.loc 2 360 0
 421 003c 8091 E800 		lds r24,232
 422               	.LBE150:
 423               	.LBE149:
 468:../../tmk_core/protocol/lufa/lufa.c **** 
 424               		.loc 1 468 0
 425 0040 85FF      		sbrs r24,5
 426 0042 00C0      		rjmp .L40
 471:../../tmk_core/protocol/lufa/lufa.c ****     }
 427               		.loc 1 471 0
 428 0044 40E0      		ldi r20,0
 429 0046 50E0      		ldi r21,0
 430 0048 60E1      		ldi r22,lo8(16)
 431 004a 70E0      		ldi r23,0
 432 004c 00C0      		rjmp .L70
 433               	.LVL44:
 434               	.L43:
 435               	.LBB151:
 436               	.LBB152:
 270:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 437               		.loc 2 270 0
 438 004e 81E0      		ldi r24,lo8(1)
 439 0050 8093 E900 		sts 233,r24
 440               	.LVL45:
 441 0054 8FEF      		ldi r24,lo8(-1)
 442               	.LVL46:
 443               	.L49:
 444               	.LBE152:
 445               	.LBE151:
 446               	.LBB153:
 447               	.LBB154:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 448               		.loc 2 360 0
 449 0056 9091 E800 		lds r25,232
 450 005a 8150      		subi r24,lo8(-(-1))
 451               	.LVL47:
 452               	.LBE154:
 453               	.LBE153:
 480:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 454               		.loc 1 480 0
 455 005c 95FD      		sbrc r25,5
 456 005e 00C0      		rjmp .L50
 457               	.LVL48:
 458               	.LBB155:
 459               	.LBB156:
 460               		.loc 3 276 0
 461 0060 95ED      		ldi r25,lo8(-43)
 462 0062 9A95      		1: dec r25
 463 0064 01F4      		brne 1b
 464 0066 0000      		nop
 465               	.LVL49:
 466               	.LBE156:
 467               	.LBE155:
 480:../../tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 468               		.loc 1 480 0
 469 0068 8111      		cpse r24,__zero_reg__
 470 006a 00C0      		rjmp .L49
 471               	.LVL50:
 472               	.L50:
 473               	.LBB157:
 474               	.LBB158:
 360:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 475               		.loc 2 360 0
 476 006c 8091 E800 		lds r24,232
 477               	.LBE158:
 478               	.LBE157:
 481:../../tmk_core/protocol/lufa/lufa.c **** 
 479               		.loc 1 481 0
 480 0070 85FF      		sbrs r24,5
 481 0072 00C0      		rjmp .L40
 484:../../tmk_core/protocol/lufa/lufa.c ****     }
 482               		.loc 1 484 0
 483 0074 40E0      		ldi r20,0
 484 0076 50E0      		ldi r21,0
 485 0078 68E0      		ldi r22,lo8(8)
 486 007a 70E0      		ldi r23,0
 487               	.LVL51:
 488               	.L70:
 489 007c CE01      		movw r24,r28
 490 007e 0E94 0000 		call Endpoint_Write_Stream_LE
 491               	.LVL52:
 492               	.LBB159:
 493               	.LBB160:
 494               		.loc 2 456 0
 495 0082 8091 E800 		lds r24,232
 496 0086 8E77      		andi r24,lo8(126)
 497 0088 8093 E800 		sts 232,r24
 498               	.LBE160:
 499               	.LBE159:
 490:../../tmk_core/protocol/lufa/lufa.c **** }
 500               		.loc 1 490 0
 501 008c 80E1      		ldi r24,lo8(16)
 502 008e FE01      		movw r30,r28
 503 0090 A0E0      		ldi r26,lo8(keyboard_report_sent)
 504 0092 B0E0      		ldi r27,hi8(keyboard_report_sent)
 505               		0:
 506 0094 0190      		ld r0,Z+
 507 0096 0D92      		st X+,r0
 508 0098 8A95      		dec r24
 509 009a 01F4      		brne 0b
 510               	.L40:
 511               	/* epilogue start */
 491:../../tmk_core/protocol/lufa/lufa.c **** 
 512               		.loc 1 491 0
 513 009c DF91      		pop r29
 514 009e CF91      		pop r28
 515               	.LVL53:
 516 00a0 0895      		ret
 517               		.cfi_endproc
 518               	.LFE116:
 520               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 521               	.global	EVENT_USB_Device_Connect
 523               	EVENT_USB_Device_Connect:
 524               	.LFB108:
 200:../../tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 525               		.loc 1 200 0
 526               		.cfi_startproc
 527               	/* prologue: function */
 528               	/* frame size = 0 */
 529               	/* stack size = 0 */
 530               	.L__stack_usage = 0
 203:../../tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 531               		.loc 1 203 0
 532 0000 8091 0000 		lds r24,USB_IsInitialized
 533 0004 8111      		cpse r24,__zero_reg__
 534 0006 00C0      		rjmp .L71
 204:../../tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 535               		.loc 1 204 0
 536 0008 0E94 0000 		call USB_Disable
 537               	.LVL54:
 205:../../tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 538               		.loc 1 205 0
 539 000c 0E94 0000 		call USB_Init
 540               	.LVL55:
 541               	.LBB161:
 542               	.LBB162:
 543               	.LBB163:
 544               		.file 4 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR
   1:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2014.
   4:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 545               		.loc 4 113 0
 546 0010 8091 E200 		lds r24,226
 547 0014 8460      		ori r24,lo8(4)
 548 0016 8093 E200 		sts 226,r24
 549               	.LVL56:
 550               	.L71:
 551 001a 0895      		ret
 552               	.LBE163:
 553               	.LBE162:
 554               	.LBE161:
 555               		.cfi_endproc
 556               	.LFE108:
 558               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 559               	.global	EVENT_USB_Device_Disconnect
 561               	EVENT_USB_Device_Disconnect:
 562               	.LFB109:
 211:../../tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 563               		.loc 1 211 0
 564               		.cfi_startproc
 565               	/* prologue: function */
 566               	/* frame size = 0 */
 567               	/* stack size = 0 */
 568               	.L__stack_usage = 0
 214:../../tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 569               		.loc 1 214 0
 570 0000 1092 0000 		sts USB_IsInitialized,__zero_reg__
 571 0004 0895      		ret
 572               		.cfi_endproc
 573               	.LFE109:
 575               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 576               	.global	EVENT_USB_Device_Reset
 578               	EVENT_USB_Device_Reset:
 579               	.LFB110:
 225:../../tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 580               		.loc 1 225 0
 581               		.cfi_startproc
 582               	/* prologue: function */
 583               	/* frame size = 0 */
 584               	/* stack size = 0 */
 585               	.L__stack_usage = 0
 586 0000 0895      		ret
 587               		.cfi_endproc
 588               	.LFE110:
 590               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 591               	.global	EVENT_USB_Device_Suspend
 593               	EVENT_USB_Device_Suspend:
 594               	.LFB111:
 230:../../tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 595               		.loc 1 230 0
 596               		.cfi_startproc
 597               	/* prologue: function */
 598               	/* frame size = 0 */
 599               	/* stack size = 0 */
 600               	.L__stack_usage = 0
 601 0000 0895      		ret
 602               		.cfi_endproc
 603               	.LFE111:
 605               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 606               	.global	EVENT_USB_Device_WakeUp
 608               	EVENT_USB_Device_WakeUp:
 609               	.LFB112:
 238:../../tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 610               		.loc 1 238 0
 611               		.cfi_startproc
 612               	/* prologue: function */
 613               	/* frame size = 0 */
 614               	/* stack size = 0 */
 615               	.L__stack_usage = 0
 240:../../tmk_core/protocol/lufa/lufa.c **** 
 616               		.loc 1 240 0
 617 0000 0C94 0000 		jmp suspend_wakeup_init
 618               	.LVL57:
 619               		.cfi_endproc
 620               	.LFE112:
 622               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 623               	.global	EVENT_USB_Device_ConfigurationChanged
 625               	EVENT_USB_Device_ConfigurationChanged:
 626               	.LFB113:
 275:../../tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 627               		.loc 1 275 0
 628               		.cfi_startproc
 629               	/* prologue: function */
 630               	/* frame size = 0 */
 631               	/* stack size = 0 */
 632               	.L__stack_usage = 0
 633               	.LVL58:
 634               	.LBB164:
 635               	.LBB165:
 210:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 636               		.loc 2 210 0
 637 0000 42E0      		ldi r20,lo8(2)
 638 0002 61EC      		ldi r22,lo8(-63)
 639 0004 81E0      		ldi r24,lo8(1)
 640 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 641               	.LVL59:
 642               	.LBE165:
 643               	.LBE164:
 644               	.LBB166:
 645               	.LBB167:
 646 000a 42E0      		ldi r20,lo8(2)
 647 000c 61EC      		ldi r22,lo8(-63)
 648 000e 82E0      		ldi r24,lo8(2)
 649 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 650               	.LVL60:
 651               	.LBE167:
 652               	.LBE166:
 653               	.LBB168:
 654               	.LBB169:
 655 0014 42E0      		ldi r20,lo8(2)
 656 0016 61EC      		ldi r22,lo8(-63)
 657 0018 83E0      		ldi r24,lo8(3)
 658 001a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 659               	.LVL61:
 660               	.LBE169:
 661               	.LBE168:
 662               	.LBB170:
 663               	.LBB171:
 664 001e 42E1      		ldi r20,lo8(18)
 665 0020 61EC      		ldi r22,lo8(-63)
 666 0022 84E0      		ldi r24,lo8(4)
 667 0024 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 668               	.LVL62:
 669               	.LBE171:
 670               	.LBE170:
 671               		.cfi_endproc
 672               	.LFE113:
 674               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 675               	.global	EVENT_USB_Device_ControlRequest
 677               	EVENT_USB_Device_ControlRequest:
 678               	.LFB114:
 333:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 679               		.loc 1 333 0
 680               		.cfi_startproc
 681               	/* prologue: function */
 682               	/* frame size = 0 */
 683               	/* stack size = 0 */
 684               	.L__stack_usage = 0
 685               	.LVL63:
 338:../../tmk_core/protocol/lufa/lufa.c ****     {
 686               		.loc 1 338 0
 687 0000 8091 0000 		lds r24,USB_ControlRequest+1
 688 0004 8330      		cpi r24,lo8(3)
 689 0006 01F4      		brne .+2
 690 0008 00C0      		rjmp .L80
 691 000a 00F4      		brsh .L81
 692 000c 8130      		cpi r24,lo8(1)
 693 000e 01F0      		breq .L82
 694 0010 8230      		cpi r24,lo8(2)
 695 0012 01F4      		brne .+2
 696 0014 00C0      		rjmp .L83
 697 0016 0895      		ret
 698               	.L81:
 699 0018 8A30      		cpi r24,lo8(10)
 700 001a 01F4      		brne .+2
 701 001c 00C0      		rjmp .L84
 702 001e 8B30      		cpi r24,lo8(11)
 703 0020 01F4      		brne .+2
 704 0022 00C0      		rjmp .L85
 705 0024 8930      		cpi r24,lo8(9)
 706 0026 01F0      		breq .+2
 707 0028 00C0      		rjmp .L78
 708 002a 00C0      		rjmp .L113
 709               	.L82:
 341:../../tmk_core/protocol/lufa/lufa.c ****             {
 710               		.loc 1 341 0
 711 002c 8091 0000 		lds r24,USB_ControlRequest
 712 0030 813A      		cpi r24,lo8(-95)
 713 0032 01F0      		breq .+2
 714 0034 00C0      		rjmp .L78
 715               	.LBB172:
 716               	.LBB173:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 717               		.loc 2 444 0
 718 0036 8091 E800 		lds r24,232
 719 003a 877F      		andi r24,lo8(-9)
 720 003c 8093 E800 		sts 232,r24
 721               	.LBE173:
 722               	.LBE172:
 346:../../tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 723               		.loc 1 346 0
 724 0040 8091 0000 		lds r24,USB_ControlRequest+4
 725 0044 9091 0000 		lds r25,USB_ControlRequest+4+1
 726 0048 892B      		or r24,r25
 727 004a 01F4      		brne .L110
 350:../../tmk_core/protocol/lufa/lufa.c ****                     break;
 728               		.loc 1 350 0
 729 004c 60E1      		ldi r22,lo8(16)
 349:../../tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 730               		.loc 1 349 0
 731 004e 80E0      		ldi r24,lo8(keyboard_report_sent)
 732 0050 90E0      		ldi r25,hi8(keyboard_report_sent)
 733 0052 00C0      		rjmp .L88
 734               	.L110:
 335:../../tmk_core/protocol/lufa/lufa.c **** 
 735               		.loc 1 335 0
 736 0054 60E0      		ldi r22,0
 334:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 737               		.loc 1 334 0
 738 0056 80E0      		ldi r24,0
 739 0058 90E0      		ldi r25,0
 740               	.L88:
 741               	.LVL64:
 355:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 742               		.loc 1 355 0
 743 005a 70E0      		ldi r23,0
 744 005c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 745               	.LVL65:
 746               	.LBB174:
 747               	.LBB175:
 457:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 748               		.loc 2 471 0
 749 0060 8091 E800 		lds r24,232
 750 0064 8B77      		andi r24,lo8(123)
 751 0066 8093 E800 		sts 232,r24
 752 006a 0895      		ret
 753               	.LVL66:
 754               	.L113:
 755               	.LBE175:
 756               	.LBE174:
 361:../../tmk_core/protocol/lufa/lufa.c ****             {
 757               		.loc 1 361 0
 758 006c 8091 0000 		lds r24,USB_ControlRequest
 759 0070 8132      		cpi r24,lo8(33)
 760 0072 01F0      		breq .+2
 761 0074 00C0      		rjmp .L78
 365:../../tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 762               		.loc 1 365 0
 763 0076 8091 0000 		lds r24,USB_ControlRequest+4
 764 007a 9091 0000 		lds r25,USB_ControlRequest+4+1
 765 007e 0097      		sbiw r24,0
 766 0080 01F0      		breq .L91
 767 0082 0397      		sbiw r24,3
 768 0084 01F0      		breq .+2
 769 0086 00C0      		rjmp .L78
 770               	.L91:
 771               	.LBB176:
 772               	.LBB177:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 773               		.loc 2 444 0
 774 0088 8091 E800 		lds r24,232
 775 008c 877F      		andi r24,lo8(-9)
 776 008e 8093 E800 		sts 232,r24
 777               	.L92:
 778               	.LBE177:
 779               	.LBE176:
 780               	.LBB178:
 781               	.LBB179:
 419:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 782               		.loc 2 419 0
 783 0092 8091 E800 		lds r24,232
 784               	.LBE179:
 785               	.LBE178:
 372:../../tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 786               		.loc 1 372 0
 787 0096 82FD      		sbrc r24,2
 788 0098 00C0      		rjmp .L114
 373:../../tmk_core/protocol/lufa/lufa.c ****                           return;
 789               		.loc 1 373 0
 790 009a 8091 0000 		lds r24,USB_DeviceState
 791 009e 8111      		cpse r24,__zero_reg__
 792 00a0 00C0      		rjmp .L92
 793 00a2 00C0      		rjmp .L78
 794               	.L114:
 795               	.LBB180:
 796               	.LBB181:
 472:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 797               		.loc 2 542 0
 798 00a4 8091 F100 		lds r24,241
 799               	.LBE181:
 800               	.LBE180:
 376:../../tmk_core/protocol/lufa/lufa.c **** 
 801               		.loc 1 376 0
 802 00a8 8093 0000 		sts keyboard_led_stats,r24
 803               	.LBB182:
 804               	.LBB183:
 471:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 805               		.loc 2 471 0
 806 00ac 8091 E800 		lds r24,232
 807 00b0 8B77      		andi r24,lo8(123)
 808 00b2 00C0      		rjmp .L111
 809               	.L80:
 810               	.LBE183:
 811               	.LBE182:
 388:../../tmk_core/protocol/lufa/lufa.c ****             {
 812               		.loc 1 388 0
 813 00b4 8091 0000 		lds r24,USB_ControlRequest
 814 00b8 813A      		cpi r24,lo8(-95)
 815 00ba 01F0      		breq .+2
 816 00bc 00C0      		rjmp .L78
 390:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 817               		.loc 1 390 0
 818 00be 8091 0000 		lds r24,USB_ControlRequest+4
 819 00c2 9091 0000 		lds r25,USB_ControlRequest+4+1
 820 00c6 892B      		or r24,r25
 821 00c8 01F0      		breq .+2
 822 00ca 00C0      		rjmp .L78
 823               	.LBB184:
 824               	.LBB185:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 825               		.loc 2 444 0
 826 00cc 8091 E800 		lds r24,232
 827 00d0 877F      		andi r24,lo8(-9)
 828 00d2 8093 E800 		sts 232,r24
 829               	.L94:
 830               	.LBE185:
 831               	.LBE184:
 832               	.LBB186:
 833               	.LBB187:
 407:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 834               		.loc 2 407 0 discriminator 1
 835 00d6 8091 E800 		lds r24,232
 836               	.LBE187:
 837               	.LBE186:
 392:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 838               		.loc 1 392 0 discriminator 1
 839 00da 80FF      		sbrs r24,0
 840 00dc 00C0      		rjmp .L94
 393:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 841               		.loc 1 393 0
 842 00de 8091 0000 		lds r24,keyboard_protocol
 843               	.LVL67:
 844 00e2 00C0      		rjmp .L112
 845               	.LVL68:
 846               	.L85:
 401:../../tmk_core/protocol/lufa/lufa.c ****             {
 847               		.loc 1 401 0
 848 00e4 8091 0000 		lds r24,USB_ControlRequest
 849 00e8 8132      		cpi r24,lo8(33)
 850 00ea 01F4      		brne .L78
 403:../../tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 851               		.loc 1 403 0
 852 00ec 8091 0000 		lds r24,USB_ControlRequest+4
 853 00f0 9091 0000 		lds r25,USB_ControlRequest+4+1
 854 00f4 892B      		or r24,r25
 855 00f6 01F4      		brne .L78
 856               	.LBB188:
 857               	.LBB189:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 858               		.loc 2 444 0
 859 00f8 8091 E800 		lds r24,232
 860 00fc 877F      		andi r24,lo8(-9)
 861 00fe 8093 E800 		sts 232,r24
 862               	.LBE189:
 863               	.LBE188:
 405:../../tmk_core/protocol/lufa/lufa.c **** 
 864               		.loc 1 405 0
 865 0102 0E94 0000 		call Endpoint_ClearStatusStage
 866               	.LVL69:
 407:../../tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 867               		.loc 1 407 0
 868 0106 8091 0000 		lds r24,USB_ControlRequest+2
 869 010a 8093 0000 		sts keyboard_protocol,r24
 408:../../tmk_core/protocol/lufa/lufa.c ****                 }
 870               		.loc 1 408 0
 871 010e 0C94 0000 		jmp clear_keyboard
 872               	.LVL70:
 873               	.L84:
 414:../../tmk_core/protocol/lufa/lufa.c ****             {
 874               		.loc 1 414 0
 875 0112 8091 0000 		lds r24,USB_ControlRequest
 876 0116 8132      		cpi r24,lo8(33)
 877 0118 01F4      		brne .L78
 878               	.LBB190:
 879               	.LBB191:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 880               		.loc 2 444 0
 881 011a 8091 E800 		lds r24,232
 882 011e 877F      		andi r24,lo8(-9)
 883 0120 8093 E800 		sts 232,r24
 884               	.LBE191:
 885               	.LBE190:
 417:../../tmk_core/protocol/lufa/lufa.c **** 
 886               		.loc 1 417 0
 887 0124 0E94 0000 		call Endpoint_ClearStatusStage
 888               	.LVL71:
 419:../../tmk_core/protocol/lufa/lufa.c ****             }
 889               		.loc 1 419 0
 890 0128 8091 0000 		lds r24,USB_ControlRequest+3
 891 012c 8093 0000 		sts keyboard_idle,r24
 892 0130 0895      		ret
 893               	.L83:
 424:../../tmk_core/protocol/lufa/lufa.c ****             {
 894               		.loc 1 424 0
 895 0132 8091 0000 		lds r24,USB_ControlRequest
 896 0136 813A      		cpi r24,lo8(-95)
 897 0138 01F4      		brne .L78
 898               	.LBB192:
 899               	.LBB193:
 444:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 900               		.loc 2 444 0
 901 013a 8091 E800 		lds r24,232
 902 013e 877F      		andi r24,lo8(-9)
 903 0140 8093 E800 		sts 232,r24
 904               	.L95:
 905               	.LBE193:
 906               	.LBE192:
 907               	.LBB194:
 908               	.LBB195:
 407:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 909               		.loc 2 407 0 discriminator 1
 910 0144 8091 E800 		lds r24,232
 911               	.LBE195:
 912               	.LBE194:
 427:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 913               		.loc 1 427 0 discriminator 1
 914 0148 80FF      		sbrs r24,0
 915 014a 00C0      		rjmp .L95
 428:../../tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 916               		.loc 1 428 0
 917 014c 8091 0000 		lds r24,keyboard_idle
 918               	.L112:
 919               	.LVL72:
 920               	.LBB196:
 921               	.LBB197:
 543:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 922               		.loc 2 554 0
 923 0150 8093 F100 		sts 241,r24
 924               	.LBE197:
 925               	.LBE196:
 926               	.LBB198:
 927               	.LBB199:
 456:../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 928               		.loc 2 456 0
 929 0154 8091 E800 		lds r24,232
 930               	.LVL73:
 931 0158 8E77      		andi r24,lo8(126)
 932               	.LVL74:
 933               	.L111:
 934 015a 8093 E800 		sts 232,r24
 935               	.LBE199:
 936               	.LBE198:
 430:../../tmk_core/protocol/lufa/lufa.c ****             }
 937               		.loc 1 430 0
 938 015e 0C94 0000 		jmp Endpoint_ClearStatusStage
 939               	.LVL75:
 940               	.L78:
 941 0162 0895      		ret
 942               		.cfi_endproc
 943               	.LFE114:
 945               		.section	.text.sendchar,"ax",@progbits
 946               	.global	sendchar
 948               	sendchar:
 949               	.LFB120:
 587:../../tmk_core/protocol/lufa/lufa.c **** 
 588:../../tmk_core/protocol/lufa/lufa.c **** 
 589:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 590:../../tmk_core/protocol/lufa/lufa.c ****  * sendchar
 591:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 592:../../tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 593:../../tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 594:../../tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 595:../../tmk_core/protocol/lufa/lufa.c **** {
 596:../../tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 597:../../tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 598:../../tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 599:../../tmk_core/protocol/lufa/lufa.c **** 
 600:../../tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 601:../../tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 602:../../tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
 603:../../tmk_core/protocol/lufa/lufa.c **** 
 604:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 605:../../tmk_core/protocol/lufa/lufa.c ****         return -1;
 606:../../tmk_core/protocol/lufa/lufa.c **** 
 607:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 608:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 609:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 610:../../tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 611:../../tmk_core/protocol/lufa/lufa.c ****     }
 612:../../tmk_core/protocol/lufa/lufa.c **** 
 613:../../tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 614:../../tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 615:../../tmk_core/protocol/lufa/lufa.c ****     }
 616:../../tmk_core/protocol/lufa/lufa.c **** 
 617:../../tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 618:../../tmk_core/protocol/lufa/lufa.c **** 
 619:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 620:../../tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 621:../../tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 622:../../tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 623:../../tmk_core/protocol/lufa/lufa.c ****         }
 624:../../tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 625:../../tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 626:../../tmk_core/protocol/lufa/lufa.c ****         }
 627:../../tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 628:../../tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 629:../../tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 630:../../tmk_core/protocol/lufa/lufa.c ****         }
 631:../../tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 632:../../tmk_core/protocol/lufa/lufa.c ****     }
 633:../../tmk_core/protocol/lufa/lufa.c **** 
 634:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 635:../../tmk_core/protocol/lufa/lufa.c **** 
 636:../../tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 637:../../tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 638:../../tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 639:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 640:../../tmk_core/protocol/lufa/lufa.c ****     } else {
 641:../../tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 642:../../tmk_core/protocol/lufa/lufa.c ****     }
 643:../../tmk_core/protocol/lufa/lufa.c **** 
 644:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 645:../../tmk_core/protocol/lufa/lufa.c ****     return 0;
 646:../../tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 647:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 648:../../tmk_core/protocol/lufa/lufa.c ****     return -1;
 649:../../tmk_core/protocol/lufa/lufa.c **** }
 650:../../tmk_core/protocol/lufa/lufa.c **** #else
 651:../../tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 652:../../tmk_core/protocol/lufa/lufa.c **** {
 950               		.loc 1 652 0
 951               		.cfi_startproc
 952               	.LVL76:
 953               	/* prologue: function */
 954               	/* frame size = 0 */
 955               	/* stack size = 0 */
 956               	.L__stack_usage = 0
 653:../../tmk_core/protocol/lufa/lufa.c ****     return 0;
 654:../../tmk_core/protocol/lufa/lufa.c **** }
 957               		.loc 1 654 0
 958 0000 80E0      		ldi r24,0
 959               	.LVL77:
 960 0002 0895      		ret
 961               		.cfi_endproc
 962               	.LFE120:
 964               		.section	.text.startup.main,"ax",@progbits
 965               		.weak	main
 967               	main:
 968               	.LFB123:
 655:../../tmk_core/protocol/lufa/lufa.c **** #endif
 656:../../tmk_core/protocol/lufa/lufa.c **** 
 657:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 658:../../tmk_core/protocol/lufa/lufa.c ****  * MIDI
 659:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 660:../../tmk_core/protocol/lufa/lufa.c **** 
 661:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 662:../../tmk_core/protocol/lufa/lufa.c **** void usb_send_func(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) 
 663:../../tmk_core/protocol/lufa/lufa.c ****   MIDI_EventPacket_t event;
 664:../../tmk_core/protocol/lufa/lufa.c ****   event.Data1 = byte0;
 665:../../tmk_core/protocol/lufa/lufa.c ****   event.Data2 = byte1;
 666:../../tmk_core/protocol/lufa/lufa.c ****   event.Data3 = byte2;
 667:../../tmk_core/protocol/lufa/lufa.c **** 
 668:../../tmk_core/protocol/lufa/lufa.c ****   uint8_t cable = 0;
 669:../../tmk_core/protocol/lufa/lufa.c **** 
 670:../../tmk_core/protocol/lufa/lufa.c **** // Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPNUM);
 671:../../tmk_core/protocol/lufa/lufa.c **** 
 672:../../tmk_core/protocol/lufa/lufa.c ****   //if the length is undefined we assume it is a SYSEX message
 673:../../tmk_core/protocol/lufa/lufa.c ****   if (midi_packet_length(byte0) == UNDEFINED) {
 674:../../tmk_core/protocol/lufa/lufa.c ****     switch(cnt) {
 675:../../tmk_core/protocol/lufa/lufa.c ****       case 3:
 676:../../tmk_core/protocol/lufa/lufa.c ****         if (byte2 == SYSEX_END)
 677:../../tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_3);
 678:../../tmk_core/protocol/lufa/lufa.c ****         else
 679:../../tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 680:../../tmk_core/protocol/lufa/lufa.c ****         break;
 681:../../tmk_core/protocol/lufa/lufa.c ****       case 2:
 682:../../tmk_core/protocol/lufa/lufa.c ****         if (byte1 == SYSEX_END)
 683:../../tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_2);
 684:../../tmk_core/protocol/lufa/lufa.c ****         else
 685:../../tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 686:../../tmk_core/protocol/lufa/lufa.c ****         break;
 687:../../tmk_core/protocol/lufa/lufa.c ****       case 1:
 688:../../tmk_core/protocol/lufa/lufa.c ****         if (byte0 == SYSEX_END)
 689:../../tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_1);
 690:../../tmk_core/protocol/lufa/lufa.c ****         else
 691:../../tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 692:../../tmk_core/protocol/lufa/lufa.c ****         break;
 693:../../tmk_core/protocol/lufa/lufa.c ****       default:
 694:../../tmk_core/protocol/lufa/lufa.c ****         return; //invalid cnt
 695:../../tmk_core/protocol/lufa/lufa.c ****     }
 696:../../tmk_core/protocol/lufa/lufa.c ****   } else {
 697:../../tmk_core/protocol/lufa/lufa.c ****     //deal with 'system common' messages
 698:../../tmk_core/protocol/lufa/lufa.c ****     //TODO are there any more?
 699:../../tmk_core/protocol/lufa/lufa.c ****     switch(byte0 & 0xF0){
 700:../../tmk_core/protocol/lufa/lufa.c ****       case MIDI_SONGPOSITION:
 701:../../tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, SYS_COMMON_3);
 702:../../tmk_core/protocol/lufa/lufa.c ****         break;
 703:../../tmk_core/protocol/lufa/lufa.c ****       case MIDI_SONGSELECT:
 704:../../tmk_core/protocol/lufa/lufa.c ****       case MIDI_TC_QUARTERFRAME:
 705:../../tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, SYS_COMMON_2);
 706:../../tmk_core/protocol/lufa/lufa.c ****         break;
 707:../../tmk_core/protocol/lufa/lufa.c ****       default:
 708:../../tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, byte0);
 709:../../tmk_core/protocol/lufa/lufa.c ****         break;
 710:../../tmk_core/protocol/lufa/lufa.c ****     }
 711:../../tmk_core/protocol/lufa/lufa.c ****   }
 712:../../tmk_core/protocol/lufa/lufa.c **** 
 713:../../tmk_core/protocol/lufa/lufa.c **** // Endpoint_Write_Stream_LE(&event, sizeof(event), NULL);
 714:../../tmk_core/protocol/lufa/lufa.c **** // Endpoint_ClearIN();
 715:../../tmk_core/protocol/lufa/lufa.c **** 
 716:../../tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, &event);
 717:../../tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_Flush(&USB_MIDI_Interface);
 718:../../tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_USBTask(&USB_MIDI_Interface);
 719:../../tmk_core/protocol/lufa/lufa.c ****   USB_USBTask();
 720:../../tmk_core/protocol/lufa/lufa.c **** }
 721:../../tmk_core/protocol/lufa/lufa.c **** 
 722:../../tmk_core/protocol/lufa/lufa.c **** void usb_get_midi(MidiDevice * device) {
 723:../../tmk_core/protocol/lufa/lufa.c ****   MIDI_EventPacket_t event;
 724:../../tmk_core/protocol/lufa/lufa.c ****   while (MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, &event)) {
 725:../../tmk_core/protocol/lufa/lufa.c **** 
 726:../../tmk_core/protocol/lufa/lufa.c ****     midi_packet_length_t length = midi_packet_length(event.Data1);
 727:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t input[3];
 728:../../tmk_core/protocol/lufa/lufa.c ****     input[0] = event.Data1;
 729:../../tmk_core/protocol/lufa/lufa.c ****     input[1] = event.Data2;
 730:../../tmk_core/protocol/lufa/lufa.c ****     input[2] = event.Data3;
 731:../../tmk_core/protocol/lufa/lufa.c ****     if (length == UNDEFINED) {
 732:../../tmk_core/protocol/lufa/lufa.c ****       //sysex
 733:../../tmk_core/protocol/lufa/lufa.c ****       if (event.Event == MIDI_EVENT(0, SYSEX_START_OR_CONT) || event.Event == MIDI_EVENT(0, SYSEX_E
 734:../../tmk_core/protocol/lufa/lufa.c ****         length = 3;
 735:../../tmk_core/protocol/lufa/lufa.c ****       } else if (event.Event == MIDI_EVENT(0, SYSEX_ENDS_IN_2)) {
 736:../../tmk_core/protocol/lufa/lufa.c ****         length = 2;
 737:../../tmk_core/protocol/lufa/lufa.c ****       } else if(event.Event ==  MIDI_EVENT(0, SYSEX_ENDS_IN_1)) {
 738:../../tmk_core/protocol/lufa/lufa.c ****         length = 1;
 739:../../tmk_core/protocol/lufa/lufa.c ****       } else {
 740:../../tmk_core/protocol/lufa/lufa.c ****         //XXX what to do?
 741:../../tmk_core/protocol/lufa/lufa.c ****       }
 742:../../tmk_core/protocol/lufa/lufa.c ****     }
 743:../../tmk_core/protocol/lufa/lufa.c **** 
 744:../../tmk_core/protocol/lufa/lufa.c ****     //pass the data to the device input function
 745:../../tmk_core/protocol/lufa/lufa.c ****     if (length != UNDEFINED)
 746:../../tmk_core/protocol/lufa/lufa.c ****       midi_device_input(device, length, input);
 747:../../tmk_core/protocol/lufa/lufa.c ****   }
 748:../../tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_USBTask(&USB_MIDI_Interface);
 749:../../tmk_core/protocol/lufa/lufa.c ****   USB_USBTask();
 750:../../tmk_core/protocol/lufa/lufa.c **** }
 751:../../tmk_core/protocol/lufa/lufa.c **** 
 752:../../tmk_core/protocol/lufa/lufa.c **** void midi_usb_init(MidiDevice * device){
 753:../../tmk_core/protocol/lufa/lufa.c ****   midi_device_init(device);
 754:../../tmk_core/protocol/lufa/lufa.c ****   midi_device_set_send_func(device, usb_send_func);
 755:../../tmk_core/protocol/lufa/lufa.c ****   midi_device_set_pre_input_process_func(device, usb_get_midi);
 756:../../tmk_core/protocol/lufa/lufa.c **** 
 757:../../tmk_core/protocol/lufa/lufa.c ****   SetupHardware();
 758:../../tmk_core/protocol/lufa/lufa.c ****   sei();
 759:../../tmk_core/protocol/lufa/lufa.c **** }
 760:../../tmk_core/protocol/lufa/lufa.c **** 
 761:../../tmk_core/protocol/lufa/lufa.c **** void MIDI_Task(void)
 762:../../tmk_core/protocol/lufa/lufa.c **** {
 763:../../tmk_core/protocol/lufa/lufa.c **** 
 764:../../tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 765:../../tmk_core/protocol/lufa/lufa.c ****     dprint("in MIDI_TASK\n");
 766:../../tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 767:../../tmk_core/protocol/lufa/lufa.c ****       return;
 768:../../tmk_core/protocol/lufa/lufa.c ****     dprint("continuing in MIDI_TASK\n");
 769:../../tmk_core/protocol/lufa/lufa.c **** 
 770:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPADDR);
 771:../../tmk_core/protocol/lufa/lufa.c **** 
 772:../../tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady())
 773:../../tmk_core/protocol/lufa/lufa.c ****     {
 774:../../tmk_core/protocol/lufa/lufa.c **** 
 775:../../tmk_core/protocol/lufa/lufa.c ****         dprint("Endpoint is ready\n");
 776:../../tmk_core/protocol/lufa/lufa.c **** 
 777:../../tmk_core/protocol/lufa/lufa.c ****         uint8_t MIDICommand = 0;
 778:../../tmk_core/protocol/lufa/lufa.c ****         uint8_t MIDIPitch;
 779:../../tmk_core/protocol/lufa/lufa.c **** 
 780:../../tmk_core/protocol/lufa/lufa.c ****         /* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 
 781:../../tmk_core/protocol/lufa/lufa.c ****         uint8_t Channel = MIDI_CHANNEL(1);
 782:../../tmk_core/protocol/lufa/lufa.c **** 
 783:../../tmk_core/protocol/lufa/lufa.c ****         MIDICommand = MIDI_COMMAND_NOTE_ON;
 784:../../tmk_core/protocol/lufa/lufa.c ****         MIDIPitch   = 0x3E;
 785:../../tmk_core/protocol/lufa/lufa.c **** 
 786:../../tmk_core/protocol/lufa/lufa.c ****         /* Check if a MIDI command is to be sent */
 787:../../tmk_core/protocol/lufa/lufa.c ****         if (MIDICommand)
 788:../../tmk_core/protocol/lufa/lufa.c ****         {
 789:../../tmk_core/protocol/lufa/lufa.c ****             dprint("Command exists\n");
 790:../../tmk_core/protocol/lufa/lufa.c ****             MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
 791:../../tmk_core/protocol/lufa/lufa.c ****                 {
 792:../../tmk_core/protocol/lufa/lufa.c ****                     .Event       = MIDI_EVENT(0, MIDICommand),
 793:../../tmk_core/protocol/lufa/lufa.c **** 
 794:../../tmk_core/protocol/lufa/lufa.c ****                     .Data1       = MIDICommand | Channel,
 795:../../tmk_core/protocol/lufa/lufa.c ****                     .Data2       = MIDIPitch,
 796:../../tmk_core/protocol/lufa/lufa.c ****                     .Data3       = MIDI_STANDARD_VELOCITY,
 797:../../tmk_core/protocol/lufa/lufa.c ****                 };
 798:../../tmk_core/protocol/lufa/lufa.c **** 
 799:../../tmk_core/protocol/lufa/lufa.c ****             /* Write the MIDI event packet to the endpoint */
 800:../../tmk_core/protocol/lufa/lufa.c ****             Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
 801:../../tmk_core/protocol/lufa/lufa.c **** 
 802:../../tmk_core/protocol/lufa/lufa.c ****             /* Send the data in the endpoint to the host */
 803:../../tmk_core/protocol/lufa/lufa.c ****             Endpoint_ClearIN();
 804:../../tmk_core/protocol/lufa/lufa.c ****         }
 805:../../tmk_core/protocol/lufa/lufa.c ****     }
 806:../../tmk_core/protocol/lufa/lufa.c **** 
 807:../../tmk_core/protocol/lufa/lufa.c **** 
 808:../../tmk_core/protocol/lufa/lufa.c ****     /* Select the MIDI OUT stream */
 809:../../tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MIDI_STREAM_OUT_EPADDR);
 810:../../tmk_core/protocol/lufa/lufa.c **** 
 811:../../tmk_core/protocol/lufa/lufa.c ****     /* Check if a MIDI command has been received */
 812:../../tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 813:../../tmk_core/protocol/lufa/lufa.c ****     {
 814:../../tmk_core/protocol/lufa/lufa.c ****         MIDI_EventPacket_t MIDIEvent;
 815:../../tmk_core/protocol/lufa/lufa.c **** 
 816:../../tmk_core/protocol/lufa/lufa.c ****         /* Read the MIDI event packet from the endpoint */
 817:../../tmk_core/protocol/lufa/lufa.c ****         Endpoint_Read_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
 818:../../tmk_core/protocol/lufa/lufa.c **** 
 819:../../tmk_core/protocol/lufa/lufa.c ****         /* If the endpoint is now empty, clear the bank */
 820:../../tmk_core/protocol/lufa/lufa.c ****         if (!(Endpoint_BytesInEndpoint()))
 821:../../tmk_core/protocol/lufa/lufa.c ****         {
 822:../../tmk_core/protocol/lufa/lufa.c ****             /* Clear the endpoint ready for new packet */
 823:../../tmk_core/protocol/lufa/lufa.c ****             Endpoint_ClearOUT();
 824:../../tmk_core/protocol/lufa/lufa.c ****         }
 825:../../tmk_core/protocol/lufa/lufa.c ****     }
 826:../../tmk_core/protocol/lufa/lufa.c **** }
 827:../../tmk_core/protocol/lufa/lufa.c **** 
 828:../../tmk_core/protocol/lufa/lufa.c **** #endif
 829:../../tmk_core/protocol/lufa/lufa.c **** 
 830:../../tmk_core/protocol/lufa/lufa.c **** 
 831:../../tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 832:../../tmk_core/protocol/lufa/lufa.c ****  * main
 833:../../tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 834:../../tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
 835:../../tmk_core/protocol/lufa/lufa.c **** {
 836:../../tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 837:../../tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 838:../../tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 839:../../tmk_core/protocol/lufa/lufa.c **** 
 840:../../tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
 841:../../tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
 842:../../tmk_core/protocol/lufa/lufa.c **** 
 843:../../tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
 844:../../tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 845:../../tmk_core/protocol/lufa/lufa.c **** }
 846:../../tmk_core/protocol/lufa/lufa.c **** 
 847:../../tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
 848:../../tmk_core/protocol/lufa/lufa.c **** {
 849:../../tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
 850:../../tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
 851:../../tmk_core/protocol/lufa/lufa.c **** 
 852:../../tmk_core/protocol/lufa/lufa.c ****     USB_Init();
 853:../../tmk_core/protocol/lufa/lufa.c **** 
 854:../../tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
 855:../../tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
 856:../../tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
 857:../../tmk_core/protocol/lufa/lufa.c **** }
 858:../../tmk_core/protocol/lufa/lufa.c **** 
 859:../../tmk_core/protocol/lufa/lufa.c **** 
 860:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 861:../../tmk_core/protocol/lufa/lufa.c **** void fallthrough_callback(MidiDevice * device,
 862:../../tmk_core/protocol/lufa/lufa.c ****     uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
 863:../../tmk_core/protocol/lufa/lufa.c **** void cc_callback(MidiDevice * device,
 864:../../tmk_core/protocol/lufa/lufa.c ****     uint8_t chan, uint8_t num, uint8_t val);
 865:../../tmk_core/protocol/lufa/lufa.c **** void sysex_callback(MidiDevice * device,
 866:../../tmk_core/protocol/lufa/lufa.c ****     uint16_t start, uint8_t length, uint8_t * data);
 867:../../tmk_core/protocol/lufa/lufa.c **** #endif
 868:../../tmk_core/protocol/lufa/lufa.c **** 
 869:../../tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
 870:../../tmk_core/protocol/lufa/lufa.c **** int main(void)
 871:../../tmk_core/protocol/lufa/lufa.c **** {
 969               		.loc 1 871 0
 970               		.cfi_startproc
 971               	/* prologue: function */
 972               	/* frame size = 0 */
 973               	/* stack size = 0 */
 974               	.L__stack_usage = 0
 975               	.LBB209:
 976               	.LBB210:
 837:../../tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 977               		.loc 1 837 0
 978 0000 84B7      		in r24,0x34
 979 0002 877F      		andi r24,lo8(-9)
 980 0004 84BF      		out 0x34,r24
 981               	.LBB211:
 982               	.LBB212:
 983               		.file 5 "/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h"
   1:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
   5:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
   8:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  11:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****      distribution.
  15:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  16:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  20:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  32:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  34:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** /*
  35:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****  */
  37:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  38:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  41:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  44:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** /** \file */
  45:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  48:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  57:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  61:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     the following:
  68:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  69:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     \code
  70:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  73:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  75:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     {
  80:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     }
  84:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     \endcode
  85:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  86:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** */
  91:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  92:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** /**
  93:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** */
  98:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
  99:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 101:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 103:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #else
 106:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #endif
 108:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 109:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #else
 114:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #endif
 116:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 117:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #else
 120:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #endif
 122:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 123:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 125:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 126:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** /**
 127:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 134:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** */
 136:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 137:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 138:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 140:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** /*
 141:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 142:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    registers to the CCP register
 144:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** ** At the same time,
 145:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 148:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****    sync is finished).
 151:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** */
 152:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 153:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** do { \
 154:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** uint8_t temp; \
 155:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 156:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 165:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     : "r0" \
 173:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** ); \
 174:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** } while(0)
 175:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 176:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #define wdt_disable() \
 177:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 178:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     : \
 184:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     : "r0" \
 190:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** );
 191:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 192:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 193:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 194:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 195:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 196:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 198:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 199:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     : /* no outputs */  \
 203:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     : "r16" \
 209:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** )
 210:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 211:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #define wdt_disable() \
 212:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** do { \
 213:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 214:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 215:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 217:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 218:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     : /*no output */ \
 224:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****     : "r16" \
 230:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** ); \
 231:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** }while(0)
 232:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 233:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #elif defined(CCP)
 234:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 235:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** static __inline__
 236:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 237:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 238:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** {
 239:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	{
 241:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 242:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 244:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 245:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			: /* no outputs */
 249:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			: "r0"
 255:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			);
 256:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	}
 257:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	{
 259:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 260:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 262:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 263:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			: /* no outputs */
 267:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			: "r0"
 273:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			);
 274:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	}
 275:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	{
 277:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 278:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 280:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 281:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			: /* no outputs */
 285:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			: "r0"
 291:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			);
 292:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	}
 293:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	else
 294:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****  	{
 295:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 296:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 298:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 299:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			: /* no outputs */
 303:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			: "r0"
 309:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 			);
 310:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	}
 311:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** }
 312:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 313:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** static __inline__
 314:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 315:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** void wdt_disable (void)
 316:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** {
 317:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	{
 319:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 320:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 321:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 323:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 324:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: /*no output */
 330:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: "r0"
 336:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				);
 337:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	}
 338:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	{
 340:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 341:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 342:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 344:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 345:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: /*no output */
 351:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: "r0"
 357:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				);
 358:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	}
 359:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	{
 361:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 362:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 363:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 365:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 366:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: /*no output */
 372:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: "r0"
 378:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				);
 379:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	}
 380:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	else
 381:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	{
 382:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 383:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 384:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 386:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 387:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: /*no output */
 393:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: "r0"
 399:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				);
 400:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	}
 401:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** }
 402:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 403:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** #else
 404:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 405:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** static __inline__
 406:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 407:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 408:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** {
 409:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	{
 411:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 412:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 414:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 415:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 416:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 418:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: /* no outputs */
 419:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: "r0"
 424:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 		);
 425:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	}
 426:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	else
 427:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	{
 428:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 429:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 433:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 435:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: /* no outputs */
 436:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: "r0"
 441:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 		);
 442:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	}
 443:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** }
 444:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 
 445:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** static __inline__
 446:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 447:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** void wdt_disable (void)
 448:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** {
 449:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 450:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	{
 451:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 452:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 453:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 455:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 456:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 				: "r0"
 465:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 		);
 466:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	}
 467:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	else
 468:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 	{
 469:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 470:/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 984               		.loc 5 470 0
 985               	/* #APP */
 986               	 ;  470 "/usr/local/Cellar/avr-gcc/4.9.3/avr/include/avr/wdt.h" 1
 987 0006 0FB6      		in __tmp_reg__,__SREG__
 988 0008 F894      		cli
 989 000a A895      		wdr
 990 000c 8091 6000 		lds r24,96
 991 0010 8861      		ori r24,24
 992 0012 8093 6000 		sts 96,r24
 993 0016 1092 6000 		sts 96,__zero_reg__
 994 001a 0FBE      		out __SREG__,__tmp_reg__
 995               		
 996               	 ;  0 "" 2
 997               	.LVL78:
 998               	/* #NOAPP */
 999               	.LBE212:
 1000               	.LBE211:
 843:../../tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1001               		.loc 1 843 0
 1002 001c 80E8      		ldi r24,lo8(-128)
 1003 001e 8093 6100 		sts 97,r24
 844:../../tmk_core/protocol/lufa/lufa.c **** }
 1004               		.loc 1 844 0
 1005 0022 1092 6100 		sts 97,__zero_reg__
 1006               	.LBE210:
 1007               	.LBE209:
 872:../../tmk_core/protocol/lufa/lufa.c **** 
 873:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 874:../../tmk_core/protocol/lufa/lufa.c ****     midi_device_init(&midi_device);
 875:../../tmk_core/protocol/lufa/lufa.c ****     midi_device_set_send_func(&midi_device, usb_send_func);
 876:../../tmk_core/protocol/lufa/lufa.c ****     midi_device_set_pre_input_process_func(&midi_device, usb_get_midi);
 877:../../tmk_core/protocol/lufa/lufa.c **** #endif
 878:../../tmk_core/protocol/lufa/lufa.c **** 
 879:../../tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
 880:../../tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 1008               		.loc 1 880 0
 1009 0026 0E94 0000 		call keyboard_setup
 1010               	.LVL79:
 1011               	.LBB213:
 1012               	.LBB214:
 850:../../tmk_core/protocol/lufa/lufa.c **** 
 1013               		.loc 1 850 0
 1014 002a 0E94 0000 		call USB_Disable
 1015               	.LVL80:
 852:../../tmk_core/protocol/lufa/lufa.c **** 
 1016               		.loc 1 852 0
 1017 002e 0E94 0000 		call USB_Init
 1018               	.LVL81:
 1019               	.LBB215:
 1020               	.LBB216:
 1021               	.LBB217:
 1022               		.loc 4 113 0
 1023 0032 8091 E200 		lds r24,226
 1024 0036 8460      		ori r24,lo8(4)
 1025 0038 8093 E200 		sts 226,r24
 1026               	.LBE217:
 1027               	.LBE216:
 1028               	.LBE215:
 1029               	.LBE214:
 1030               	.LBE213:
 881:../../tmk_core/protocol/lufa/lufa.c ****     setup_usb();
 882:../../tmk_core/protocol/lufa/lufa.c ****     sei();
 1031               		.loc 1 882 0
 1032               	/* #APP */
 1033               	 ;  882 "../../tmk_core/protocol/lufa/lufa.c" 1
 1034 003c 7894      		sei
 1035               	 ;  0 "" 2
 883:../../tmk_core/protocol/lufa/lufa.c **** 
 884:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 885:../../tmk_core/protocol/lufa/lufa.c ****     midi_register_fallthrough_callback(&midi_device, fallthrough_callback);
 886:../../tmk_core/protocol/lufa/lufa.c ****     midi_register_cc_callback(&midi_device, cc_callback);
 887:../../tmk_core/protocol/lufa/lufa.c ****     midi_register_sysex_callback(&midi_device, sysex_callback);
 888:../../tmk_core/protocol/lufa/lufa.c **** 
 889:../../tmk_core/protocol/lufa/lufa.c ****     // init_notes();
 890:../../tmk_core/protocol/lufa/lufa.c ****     // midi_send_cc(&midi_device, 0, 1, 2);
 891:../../tmk_core/protocol/lufa/lufa.c ****     // midi_send_cc(&midi_device, 15, 1, 0);
 892:../../tmk_core/protocol/lufa/lufa.c ****     // midi_send_noteon(&midi_device, 0, 64, 127);
 893:../../tmk_core/protocol/lufa/lufa.c ****     // midi_send_noteoff(&midi_device, 0, 64, 127);
 894:../../tmk_core/protocol/lufa/lufa.c **** #endif
 895:../../tmk_core/protocol/lufa/lufa.c **** 
 896:../../tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 897:../../tmk_core/protocol/lufa/lufa.c ****     serial_init();
 898:../../tmk_core/protocol/lufa/lufa.c **** #endif
 899:../../tmk_core/protocol/lufa/lufa.c **** 
 900:../../tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
 901:../../tmk_core/protocol/lufa/lufa.c **** 
 902:../../tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
 903:../../tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
 904:../../tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
 905:../../tmk_core/protocol/lufa/lufa.c ****             ;
 906:../../tmk_core/protocol/lufa/lufa.c ****     #else
 907:../../tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
 908:../../tmk_core/protocol/lufa/lufa.c ****     #endif
 909:../../tmk_core/protocol/lufa/lufa.c ****     }
 910:../../tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
 911:../../tmk_core/protocol/lufa/lufa.c **** #else
 912:../../tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 1036               		.loc 1 912 0
 1037               	/* #NOAPP */
 1038 003e 0E94 0000 		call USB_USBTask
 1039               	.LVL82:
 913:../../tmk_core/protocol/lufa/lufa.c **** #endif
 914:../../tmk_core/protocol/lufa/lufa.c ****     /* init modules */
 915:../../tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 1040               		.loc 1 915 0
 1041 0042 0E94 0000 		call keyboard_init
 1042               	.LVL83:
 916:../../tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1043               		.loc 1 916 0
 1044 0046 80E0      		ldi r24,lo8(lufa_driver)
 1045 0048 90E0      		ldi r25,hi8(lufa_driver)
 1046 004a 0E94 0000 		call host_set_driver
 1047               	.LVL84:
 1048               	.L117:
 917:../../tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 918:../../tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
 919:../../tmk_core/protocol/lufa/lufa.c **** #endif
 920:../../tmk_core/protocol/lufa/lufa.c **** 
 921:../../tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
 922:../../tmk_core/protocol/lufa/lufa.c ****     while (1) {
 923:../../tmk_core/protocol/lufa/lufa.c ****         #ifndef BLUETOOTH_ENABLE
 924:../../tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1049               		.loc 1 924 0
 1050 004e 8091 0000 		lds r24,USB_DeviceState
 1051 0052 8530      		cpi r24,lo8(5)
 1052 0054 01F4      		brne .L125
 925:../../tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 926:../../tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
 1053               		.loc 1 926 0
 1054 0056 0E94 0000 		call suspend_power_down
 1055               	.LVL85:
 927:../../tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1056               		.loc 1 927 0
 1057 005a 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1058 005e 8823      		tst r24
 1059 0060 01F0      		breq .L117
 1060               		.loc 1 927 0 is_stmt 0 discriminator 1
 1061 0062 0E94 0000 		call suspend_wakeup_condition
 1062               	.LVL86:
 1063 0066 8823      		tst r24
 1064 0068 01F0      		breq .L117
 928:../../tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1065               		.loc 1 928 0 is_stmt 1
 1066 006a 0E94 0000 		call USB_Device_SendRemoteWakeup
 1067               	.LVL87:
 1068 006e 00C0      		rjmp .L117
 1069               	.L125:
 929:../../tmk_core/protocol/lufa/lufa.c ****             }
 930:../../tmk_core/protocol/lufa/lufa.c ****         }
 931:../../tmk_core/protocol/lufa/lufa.c ****         #endif
 932:../../tmk_core/protocol/lufa/lufa.c **** 
 933:../../tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 934:../../tmk_core/protocol/lufa/lufa.c ****         midi_device_process(&midi_device);
 935:../../tmk_core/protocol/lufa/lufa.c ****         // MIDI_Task();
 936:../../tmk_core/protocol/lufa/lufa.c **** #endif
 937:../../tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 1070               		.loc 1 937 0
 1071 0070 0E94 0000 		call keyboard_task
 1072               	.LVL88:
 938:../../tmk_core/protocol/lufa/lufa.c **** 
 939:../../tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
 940:../../tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
 941:../../tmk_core/protocol/lufa/lufa.c **** #endif
 942:../../tmk_core/protocol/lufa/lufa.c ****     }
 1073               		.loc 1 942 0
 1074 0074 00C0      		rjmp .L117
 1075               		.cfi_endproc
 1076               	.LFE123:
 1078               	.global	lufa_driver
 1079               		.section	.data.lufa_driver,"aw",@progbits
 1082               	lufa_driver:
 1083 0000 0000      		.word	gs(keyboard_leds)
 1084 0002 0000      		.word	gs(send_keyboard)
 1085 0004 0000      		.word	gs(send_mouse)
 1086 0006 0000      		.word	gs(send_system)
 1087 0008 0000      		.word	gs(send_consumer)
 1088               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1091               	keyboard_report_sent:
 1092 0000 0000 0000 		.zero	16
 1092      0000 0000 
 1092      0000 0000 
 1092      0000 0000 
 1093               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1096               	keyboard_led_stats:
 1097 0000 00        		.zero	1
 1098               	.global	keyboard_protocol
 1099               		.section	.data.keyboard_protocol,"aw",@progbits
 1102               	keyboard_protocol:
 1103 0000 01        		.byte	1
 1104               	.global	keyboard_idle
 1105               		.section	.bss.keyboard_idle,"aw",@nobits
 1108               	keyboard_idle:
 1109 0000 00        		.zero	1
 1110               		.text
 1111               	.Letext0:
 1112               		.file 6 "/usr/local/Cellar/avr-gcc/4.9.3/avr/include/stdint.h"
 1113               		.file 7 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1114               		.file 8 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1115               		.file 9 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCom
 1116               		.file 10 "../../tmk_core/common/report.h"
 1117               		.file 11 "../../tmk_core/common/host_driver.h"
 1118               		.file 12 "../../tmk_core/protocol/lufa/lufa.h"
 1119               		.file 13 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 1120               		.file 14 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1121               		.file 15 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1122               		.file 16 "../../tmk_core/common/host.h"
 1123               		.file 17 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1124               		.file 18 "../../tmk_core/common/suspend.h"
 1125               		.file 19 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_
 1126               		.file 20 "../../tmk_core/common/action.h"
 1127               		.file 21 "../../tmk_core/common/keyboard.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:4      *ABS*:000000000000003f __SREG__
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:1096   .bss.keyboard_led_stats:0000000000000000 keyboard_led_stats
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:29     .text.send_consumer:0000000000000000 send_consumer
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:147    .text.send_system:0000000000000000 send_system
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:263    .text.send_mouse:0000000000000000 send_mouse
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:347    .text.send_keyboard:0000000000000000 send_keyboard
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:1102   .data.keyboard_protocol:0000000000000000 keyboard_protocol
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:1091   .bss.keyboard_report_sent:0000000000000000 keyboard_report_sent
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:523    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:561    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:578    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:593    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:608    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:625    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:677    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:1108   .bss.keyboard_idle:0000000000000000 keyboard_idle
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:948    .text.sendchar:0000000000000000 sendchar
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:967    .text.startup.main:0000000000000000 main
/var/folders/dz/_5509m0x1cvcwp6fj8ygb2300000gn/T//ccfxnSq1.s:1082   .data.lufa_driver:0000000000000000 lufa_driver

UNDEFINED SYMBOLS
USB_DeviceState
Endpoint_Write_Stream_LE
keyboard_nkro
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_ClearStatusStage
clear_keyboard
keyboard_setup
USB_USBTask
keyboard_init
host_set_driver
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
keyboard_task
__do_copy_data
__do_clear_bss
